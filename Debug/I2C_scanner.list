
I2C_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004980  08004980  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08004980  08004980  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004980  08004980  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08004988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200000b4  08004a3c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004a3c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb0a  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f06  00000000  00000000  0002bbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c5c  00000000  00000000  0002edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a003  00000000  00000000  00047a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ef9  00000000  00000000  00051a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  000d7918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a9c  00000000  00000000  000d79c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004904 	.word	0x08004904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08004904 	.word	0x08004904

0800014c <scan_device>:
uint8_t StartMSG[] = "Starting I2C Scanning.... \r\n";
uint8_t EndMsg[] = "\r\n.......Done!....... \r\n\r\n";
uint8_t NewLine[] = "\r\n";

void scan_device()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
    uint8_t i = 0, ret;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 8000156:	f242 7310 	movw	r3, #10000	; 0x2710
 800015a:	221d      	movs	r2, #29
 800015c:	4928      	ldr	r1, [pc, #160]	; (8000200 <scan_device+0xb4>)
 800015e:	4829      	ldr	r0, [pc, #164]	; (8000204 <scan_device+0xb8>)
 8000160:	f003 fa99 	bl	8003696 <HAL_UART_Transmit>
    for(i=0; i<128; i++){
 8000164:	2300      	movs	r3, #0
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	e03b      	b.n	80001e2 <scan_device+0x96>
        ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	b29b      	uxth	r3, r3
 800016e:	005b      	lsls	r3, r3, #1
 8000170:	b299      	uxth	r1, r3
 8000172:	2305      	movs	r3, #5
 8000174:	2203      	movs	r2, #3
 8000176:	4824      	ldr	r0, [pc, #144]	; (8000208 <scan_device+0xbc>)
 8000178:	f000 ffcc 	bl	8001114 <HAL_I2C_IsDeviceReady>
 800017c:	4603      	mov	r3, r0
 800017e:	71bb      	strb	r3, [r7, #6]
        if (ret != HAL_OK) // No ACK received at the address
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d007      	beq.n	8000196 <scan_device+0x4a>
        {
            HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 8000186:	f242 7310 	movw	r3, #10000	; 0x2710
 800018a:	2204      	movs	r2, #4
 800018c:	491f      	ldr	r1, [pc, #124]	; (800020c <scan_device+0xc0>)
 800018e:	481d      	ldr	r0, [pc, #116]	; (8000204 <scan_device+0xb8>)
 8000190:	f003 fa81 	bl	8003696 <HAL_UART_Transmit>
 8000194:	e00f      	b.n	80001b6 <scan_device+0x6a>
        }
        else if (ret == HAL_OK)
 8000196:	79bb      	ldrb	r3, [r7, #6]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d10c      	bne.n	80001b6 <scan_device+0x6a>
        {
            sprintf(Buffer, "0x%X", i);
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	461a      	mov	r2, r3
 80001a0:	491b      	ldr	r1, [pc, #108]	; (8000210 <scan_device+0xc4>)
 80001a2:	481c      	ldr	r0, [pc, #112]	; (8000214 <scan_device+0xc8>)
 80001a4:	f003 ff34 	bl	8004010 <siprintf>
            HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 80001a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80001ac:	2219      	movs	r2, #25
 80001ae:	4919      	ldr	r1, [pc, #100]	; (8000214 <scan_device+0xc8>)
 80001b0:	4814      	ldr	r0, [pc, #80]	; (8000204 <scan_device+0xb8>)
 80001b2:	f003 fa70 	bl	8003696 <HAL_UART_Transmit>
        }
        if(i%9 == 0){
 80001b6:	79fa      	ldrb	r2, [r7, #7]
 80001b8:	4b17      	ldr	r3, [pc, #92]	; (8000218 <scan_device+0xcc>)
 80001ba:	fba3 1302 	umull	r1, r3, r3, r2
 80001be:	0859      	lsrs	r1, r3, #1
 80001c0:	460b      	mov	r3, r1
 80001c2:	00db      	lsls	r3, r3, #3
 80001c4:	440b      	add	r3, r1
 80001c6:	1ad3      	subs	r3, r2, r3
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d106      	bne.n	80001dc <scan_device+0x90>
        	HAL_UART_Transmit(&huart1, NewLine, sizeof(NewLine), 10000);
 80001ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80001d2:	2203      	movs	r2, #3
 80001d4:	4911      	ldr	r1, [pc, #68]	; (800021c <scan_device+0xd0>)
 80001d6:	480b      	ldr	r0, [pc, #44]	; (8000204 <scan_device+0xb8>)
 80001d8:	f003 fa5d 	bl	8003696 <HAL_UART_Transmit>
    for(i=0; i<128; i++){
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	3301      	adds	r3, #1
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	dabf      	bge.n	800016a <scan_device+0x1e>
        }

    }
    HAL_UART_Transmit(&huart1, EndMsg, sizeof(EndMsg), 10000);
 80001ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80001ee:	221b      	movs	r2, #27
 80001f0:	490b      	ldr	r1, [pc, #44]	; (8000220 <scan_device+0xd4>)
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <scan_device+0xb8>)
 80001f4:	f003 fa4f 	bl	8003696 <HAL_UART_Transmit>
}
 80001f8:	bf00      	nop
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	20000004 	.word	0x20000004
 8000204:	20000154 	.word	0x20000154
 8000208:	20000100 	.word	0x20000100
 800020c:	20000000 	.word	0x20000000
 8000210:	0800491c 	.word	0x0800491c
 8000214:	200000d0 	.word	0x200000d0
 8000218:	38e38e39 	.word	0x38e38e39
 800021c:	20000040 	.word	0x20000040
 8000220:	20000024 	.word	0x20000024

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022a:	4b14      	ldr	r3, [pc, #80]	; (800027c <MX_GPIO_Init+0x58>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a13      	ldr	r2, [pc, #76]	; (800027c <MX_GPIO_Init+0x58>)
 8000230:	f043 0320 	orr.w	r3, r3, #32
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <MX_GPIO_Init+0x58>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0320 	and.w	r3, r3, #32
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <MX_GPIO_Init+0x58>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a0d      	ldr	r2, [pc, #52]	; (800027c <MX_GPIO_Init+0x58>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <MX_GPIO_Init+0x58>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <MX_GPIO_Init+0x58>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a07      	ldr	r2, [pc, #28]	; (800027c <MX_GPIO_Init+0x58>)
 8000260:	f043 0308 	orr.w	r3, r3, #8
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <MX_GPIO_Init+0x58>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0308 	and.w	r3, r3, #8
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]

}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	40021000 	.word	0x40021000

08000280 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_I2C1_Init+0x50>)
 8000286:	4a13      	ldr	r2, [pc, #76]	; (80002d4 <MX_I2C1_Init+0x54>)
 8000288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_I2C1_Init+0x50>)
 800028c:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <MX_I2C1_Init+0x58>)
 800028e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_I2C1_Init+0x50>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_I2C1_Init+0x50>)
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MX_I2C1_Init+0x50>)
 800029e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <MX_I2C1_Init+0x50>)
 80002be:	f000 fde5 	bl	8000e8c <HAL_I2C_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002c8:	f000 f8ae 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000100 	.word	0x20000100
 80002d4:	40005400 	.word	0x40005400
 80002d8:	000186a0 	.word	0x000186a0

080002dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0310 	add.w	r3, r7, #16
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a1d      	ldr	r2, [pc, #116]	; (800036c <HAL_I2C_MspInit+0x90>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d133      	bne.n	8000364 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <HAL_I2C_MspInit+0x94>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <HAL_I2C_MspInit+0x94>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b19      	ldr	r3, [pc, #100]	; (8000370 <HAL_I2C_MspInit+0x94>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000314:	23c0      	movs	r3, #192	; 0xc0
 8000316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000318:	2312      	movs	r3, #18
 800031a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031c:	2303      	movs	r3, #3
 800031e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	4813      	ldr	r0, [pc, #76]	; (8000374 <HAL_I2C_MspInit+0x98>)
 8000328:	f000 fc2c 	bl	8000b84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <HAL_I2C_MspInit+0x94>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <HAL_I2C_MspInit+0x94>)
 8000332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000336:	61d3      	str	r3, [r2, #28]
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <HAL_I2C_MspInit+0x94>)
 800033a:	69db      	ldr	r3, [r3, #28]
 800033c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000344:	2200      	movs	r2, #0
 8000346:	2100      	movs	r1, #0
 8000348:	201f      	movs	r0, #31
 800034a:	f000 fb28 	bl	800099e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800034e:	201f      	movs	r0, #31
 8000350:	f000 fb41 	bl	80009d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	2100      	movs	r1, #0
 8000358:	2020      	movs	r0, #32
 800035a:	f000 fb20 	bl	800099e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800035e:	2020      	movs	r0, #32
 8000360:	f000 fb39 	bl	80009d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000364:	bf00      	nop
 8000366:	3720      	adds	r7, #32
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40005400 	.word	0x40005400
 8000370:	40021000 	.word	0x40021000
 8000374:	40010c00 	.word	0x40010c00

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037c:	f000 f9b2 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000380:	f000 f80d 	bl	800039e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000384:	f7ff ff4e 	bl	8000224 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000388:	f7ff ff7a 	bl	8000280 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800038c:	f000 f906 	bl	800059c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* I2C scan begin */
  HAL_Delay(1000);
 8000390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000394:	f000 fa08 	bl	80007a8 <HAL_Delay>
  scan_device();
 8000398:	f7ff fed8 	bl	800014c <scan_device>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039c:	e7fe      	b.n	800039c <main+0x24>

0800039e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b090      	sub	sp, #64	; 0x40
 80003a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	2228      	movs	r2, #40	; 0x28
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fe27 	bl	8004000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c0:	2301      	movs	r3, #1
 80003c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 fcee 	bl	8002dc8 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f2:	f000 f819 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2102      	movs	r1, #2
 8000410:	4618      	mov	r0, r3
 8000412:	f002 ff59 	bl	80032c8 <HAL_RCC_ClockConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800041c:	f000 f804 	bl	8000428 <Error_Handler>
  }
}
 8000420:	bf00      	nop
 8000422:	3740      	adds	r7, #64	; 0x40
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_MspInit+0x60>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_MspInit+0x60>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800049c:	e7fe      	b.n	800049c <NMI_Handler+0x4>

0800049e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0x4>

080004a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <MemManage_Handler+0x4>

080004aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004de:	f000 f947 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <I2C1_EV_IRQHandler+0x10>)
 80004ee:	f000 ff3f 	bl	8001370 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000100 	.word	0x20000100

080004fc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000500:	4802      	ldr	r0, [pc, #8]	; (800050c <I2C1_ER_IRQHandler+0x10>)
 8000502:	f001 f8a6 	bl	8001652 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000100 	.word	0x20000100

08000510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <USART1_IRQHandler+0x10>)
 8000516:	f003 f951 	bl	80037bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000154 	.word	0x20000154

08000524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <_sbrk+0x5c>)
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <_sbrk+0x60>)
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d102      	bne.n	8000546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <_sbrk+0x64>)
 8000542:	4a12      	ldr	r2, [pc, #72]	; (800058c <_sbrk+0x68>)
 8000544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	429a      	cmp	r2, r3
 8000552:	d207      	bcs.n	8000564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000554:	f003 fd2a 	bl	8003fac <__errno>
 8000558:	4603      	mov	r3, r0
 800055a:	220c      	movs	r2, #12
 800055c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000562:	e009      	b.n	8000578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <_sbrk+0x64>)
 8000574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20005000 	.word	0x20005000
 8000584:	00000400 	.word	0x00000400
 8000588:	200000ec 	.word	0x200000ec
 800058c:	200001a0 	.word	0x200001a0

08000590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <MX_USART1_UART_Init+0x50>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_USART1_UART_Init+0x4c>)
 80005d4:	f003 f812 	bl	80035fc <HAL_UART_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005de:	f7ff ff23 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000154 	.word	0x20000154
 80005ec:	40013800 	.word	0x40013800

080005f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <HAL_UART_MspInit+0x9c>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d139      	bne.n	8000684 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <HAL_UART_MspInit+0xa0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <HAL_UART_MspInit+0xa0>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_UART_MspInit+0xa0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_UART_MspInit+0xa0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a18      	ldr	r2, [pc, #96]	; (8000690 <HAL_UART_MspInit+0xa0>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_UART_MspInit+0xa0>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000644:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064a:	2303      	movs	r3, #3
 800064c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4619      	mov	r1, r3
 8000654:	480f      	ldr	r0, [pc, #60]	; (8000694 <HAL_UART_MspInit+0xa4>)
 8000656:	f000 fa95 	bl	8000b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800065a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4809      	ldr	r0, [pc, #36]	; (8000694 <HAL_UART_MspInit+0xa4>)
 8000670:	f000 fa88 	bl	8000b84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2025      	movs	r0, #37	; 0x25
 800067a:	f000 f990 	bl	800099e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800067e:	2025      	movs	r0, #37	; 0x25
 8000680:	f000 f9a9 	bl	80009d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40013800 	.word	0x40013800
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	; (80006d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	; (80006dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006be:	f7ff ff67 	bl	8000590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c2:	f003 fc79 	bl	8003fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fe57 	bl	8000378 <main>
  bx lr
 80006ca:	4770      	bx	lr
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80006d4:	08004988 	.word	0x08004988
  ldr r2, =_sbss
 80006d8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80006dc:	2000019c 	.word	0x2000019c

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <HAL_Init+0x28>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_Init+0x28>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f947 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	200f      	movs	r0, #15
 80006fc:	f000 f808 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff fe98 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f95f 	bl	80009f2 <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800074c:	f000 f927 	bl	800099e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000044 	.word	0x20000044
 8000768:	2000004c 	.word	0x2000004c
 800076c:	20000048 	.word	0x20000048

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x1c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x20>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <HAL_IncTick+0x20>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	2000004c 	.word	0x2000004c
 8000790:	20000198 	.word	0x20000198

08000794 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000198 	.word	0x20000198

080007a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff fff0 	bl	8000794 <HAL_GetTick>
 80007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ce:	bf00      	nop
 80007d0:	f7ff ffe0 	bl	8000794 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000004c 	.word	0x2000004c

080007f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	60d3      	str	r3, [r2, #12]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <__NVIC_GetPriorityGrouping+0x18>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	f003 0307 	and.w	r3, r3, #7
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	db0b      	blt.n	800087e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 021f 	and.w	r2, r3, #31
 800086c:	4906      	ldr	r1, [pc, #24]	; (8000888 <__NVIC_EnableIRQ+0x34>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	2001      	movs	r0, #1
 8000876:	fa00 f202 	lsl.w	r2, r0, r2
 800087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000968:	f7ff ff90 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff2d 	bl	80007f0 <__NVIC_SetPriorityGrouping>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff42 	bl	8000838 <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff90 	bl	80008e0 <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5f 	bl	800088c <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff35 	bl	8000854 <__NVIC_EnableIRQ>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffa2 	bl	8000944 <SysTick_Config>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b085      	sub	sp, #20
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d008      	beq.n	8000a32 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2204      	movs	r2, #4
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e020      	b.n	8000a74 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f022 020e 	bic.w	r2, r2, #14
 8000a40:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 0201 	bic.w	r2, r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2201      	movs	r2, #1
 8000a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
	...

08000a80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d005      	beq.n	8000aa2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2204      	movs	r2, #4
 8000a9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e051      	b.n	8000b46 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 020e 	bic.w	r2, r2, #14
 8000ab0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 0201 	bic.w	r2, r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a22      	ldr	r2, [pc, #136]	; (8000b50 <HAL_DMA_Abort_IT+0xd0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d029      	beq.n	8000b20 <HAL_DMA_Abort_IT+0xa0>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <HAL_DMA_Abort_IT+0xd4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d022      	beq.n	8000b1c <HAL_DMA_Abort_IT+0x9c>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <HAL_DMA_Abort_IT+0xd8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d01a      	beq.n	8000b16 <HAL_DMA_Abort_IT+0x96>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1d      	ldr	r2, [pc, #116]	; (8000b5c <HAL_DMA_Abort_IT+0xdc>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d012      	beq.n	8000b10 <HAL_DMA_Abort_IT+0x90>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_DMA_Abort_IT+0xe0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d00a      	beq.n	8000b0a <HAL_DMA_Abort_IT+0x8a>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <HAL_DMA_Abort_IT+0xe4>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d102      	bne.n	8000b04 <HAL_DMA_Abort_IT+0x84>
 8000afe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b02:	e00e      	b.n	8000b22 <HAL_DMA_Abort_IT+0xa2>
 8000b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b08:	e00b      	b.n	8000b22 <HAL_DMA_Abort_IT+0xa2>
 8000b0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0e:	e008      	b.n	8000b22 <HAL_DMA_Abort_IT+0xa2>
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	e005      	b.n	8000b22 <HAL_DMA_Abort_IT+0xa2>
 8000b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1a:	e002      	b.n	8000b22 <HAL_DMA_Abort_IT+0xa2>
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	e000      	b.n	8000b22 <HAL_DMA_Abort_IT+0xa2>
 8000b20:	2301      	movs	r3, #1
 8000b22:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <HAL_DMA_Abort_IT+0xe8>)
 8000b24:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	4798      	blx	r3
    } 
  }
  return status;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40020008 	.word	0x40020008
 8000b54:	4002001c 	.word	0x4002001c
 8000b58:	40020030 	.word	0x40020030
 8000b5c:	40020044 	.word	0x40020044
 8000b60:	40020058 	.word	0x40020058
 8000b64:	4002006c 	.word	0x4002006c
 8000b68:	40020000 	.word	0x40020000

08000b6c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b08b      	sub	sp, #44	; 0x2c
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e169      	b.n	8000e6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	f040 8158 	bne.w	8000e66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	4a9a      	ldr	r2, [pc, #616]	; (8000e24 <HAL_GPIO_Init+0x2a0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d05e      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bc0:	4a98      	ldr	r2, [pc, #608]	; (8000e24 <HAL_GPIO_Init+0x2a0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d875      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bc6:	4a98      	ldr	r2, [pc, #608]	; (8000e28 <HAL_GPIO_Init+0x2a4>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d058      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bcc:	4a96      	ldr	r2, [pc, #600]	; (8000e28 <HAL_GPIO_Init+0x2a4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d86f      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bd2:	4a96      	ldr	r2, [pc, #600]	; (8000e2c <HAL_GPIO_Init+0x2a8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d052      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bd8:	4a94      	ldr	r2, [pc, #592]	; (8000e2c <HAL_GPIO_Init+0x2a8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d869      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bde:	4a94      	ldr	r2, [pc, #592]	; (8000e30 <HAL_GPIO_Init+0x2ac>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d04c      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000be4:	4a92      	ldr	r2, [pc, #584]	; (8000e30 <HAL_GPIO_Init+0x2ac>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d863      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bea:	4a92      	ldr	r2, [pc, #584]	; (8000e34 <HAL_GPIO_Init+0x2b0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d046      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
 8000bf0:	4a90      	ldr	r2, [pc, #576]	; (8000e34 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d85d      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bf6:	2b12      	cmp	r3, #18
 8000bf8:	d82a      	bhi.n	8000c50 <HAL_GPIO_Init+0xcc>
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d859      	bhi.n	8000cb2 <HAL_GPIO_Init+0x12e>
 8000bfe:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <HAL_GPIO_Init+0x80>)
 8000c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c04:	08000c7f 	.word	0x08000c7f
 8000c08:	08000c59 	.word	0x08000c59
 8000c0c:	08000c6b 	.word	0x08000c6b
 8000c10:	08000cad 	.word	0x08000cad
 8000c14:	08000cb3 	.word	0x08000cb3
 8000c18:	08000cb3 	.word	0x08000cb3
 8000c1c:	08000cb3 	.word	0x08000cb3
 8000c20:	08000cb3 	.word	0x08000cb3
 8000c24:	08000cb3 	.word	0x08000cb3
 8000c28:	08000cb3 	.word	0x08000cb3
 8000c2c:	08000cb3 	.word	0x08000cb3
 8000c30:	08000cb3 	.word	0x08000cb3
 8000c34:	08000cb3 	.word	0x08000cb3
 8000c38:	08000cb3 	.word	0x08000cb3
 8000c3c:	08000cb3 	.word	0x08000cb3
 8000c40:	08000cb3 	.word	0x08000cb3
 8000c44:	08000cb3 	.word	0x08000cb3
 8000c48:	08000c61 	.word	0x08000c61
 8000c4c:	08000c75 	.word	0x08000c75
 8000c50:	4a79      	ldr	r2, [pc, #484]	; (8000e38 <HAL_GPIO_Init+0x2b4>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c56:	e02c      	b.n	8000cb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e029      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	3304      	adds	r3, #4
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e024      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	3308      	adds	r3, #8
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e01f      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	330c      	adds	r3, #12
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e01a      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c86:	2304      	movs	r3, #4
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e013      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d105      	bne.n	8000ca0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c94:	2308      	movs	r3, #8
 8000c96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	611a      	str	r2, [r3, #16]
          break;
 8000c9e:	e009      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	615a      	str	r2, [r3, #20]
          break;
 8000caa:	e003      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
          break;
 8000cb0:	e000      	b.n	8000cb4 <HAL_GPIO_Init+0x130>
          break;
 8000cb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2bff      	cmp	r3, #255	; 0xff
 8000cb8:	d801      	bhi.n	8000cbe <HAL_GPIO_Init+0x13a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	e001      	b.n	8000cc2 <HAL_GPIO_Init+0x13e>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2bff      	cmp	r3, #255	; 0xff
 8000cc8:	d802      	bhi.n	8000cd0 <HAL_GPIO_Init+0x14c>
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	e002      	b.n	8000cd6 <HAL_GPIO_Init+0x152>
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3b08      	subs	r3, #8
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	210f      	movs	r1, #15
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	6a39      	ldr	r1, [r7, #32]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 80b1 	beq.w	8000e66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d04:	4b4d      	ldr	r3, [pc, #308]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b4a      	ldr	r3, [pc, #296]	; (8000e3c <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d1c:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <HAL_GPIO_Init+0x2bc>)
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a40      	ldr	r2, [pc, #256]	; (8000e44 <HAL_GPIO_Init+0x2c0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d013      	beq.n	8000d70 <HAL_GPIO_Init+0x1ec>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a3f      	ldr	r2, [pc, #252]	; (8000e48 <HAL_GPIO_Init+0x2c4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00d      	beq.n	8000d6c <HAL_GPIO_Init+0x1e8>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a3e      	ldr	r2, [pc, #248]	; (8000e4c <HAL_GPIO_Init+0x2c8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_Init+0x1e4>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a3d      	ldr	r2, [pc, #244]	; (8000e50 <HAL_GPIO_Init+0x2cc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_GPIO_Init+0x1e0>
 8000d60:	2303      	movs	r3, #3
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d64:	2304      	movs	r3, #4
 8000d66:	e004      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_Init+0x1ee>
 8000d70:	2300      	movs	r3, #0
 8000d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4093      	lsls	r3, r2
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d82:	492f      	ldr	r1, [pc, #188]	; (8000e40 <HAL_GPIO_Init+0x2bc>)
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	492c      	ldr	r1, [pc, #176]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4928      	ldr	r1, [pc, #160]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4922      	ldr	r1, [pc, #136]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	604b      	str	r3, [r1, #4]
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	491e      	ldr	r1, [pc, #120]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	4013      	ands	r3, r2
 8000dde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	4918      	ldr	r1, [pc, #96]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	608b      	str	r3, [r1, #8]
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4914      	ldr	r1, [pc, #80]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d021      	beq.n	8000e58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	490e      	ldr	r1, [pc, #56]	; (8000e54 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	60cb      	str	r3, [r1, #12]
 8000e20:	e021      	b.n	8000e66 <HAL_GPIO_Init+0x2e2>
 8000e22:	bf00      	nop
 8000e24:	10320000 	.word	0x10320000
 8000e28:	10310000 	.word	0x10310000
 8000e2c:	10220000 	.word	0x10220000
 8000e30:	10210000 	.word	0x10210000
 8000e34:	10120000 	.word	0x10120000
 8000e38:	10110000 	.word	0x10110000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	40011000 	.word	0x40011000
 8000e50:	40011400 	.word	0x40011400
 8000e54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_GPIO_Init+0x304>)
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4909      	ldr	r1, [pc, #36]	; (8000e88 <HAL_GPIO_Init+0x304>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	3301      	adds	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	fa22 f303 	lsr.w	r3, r2, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f47f ae8e 	bne.w	8000b98 <HAL_GPIO_Init+0x14>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	372c      	adds	r7, #44	; 0x2c
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e12b      	b.n	80010f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d106      	bne.n	8000eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fa12 	bl	80002dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2224      	movs	r2, #36	; 0x24
 8000ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0201 	bic.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ede:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ef0:	f002 fb3e 	bl	8003570 <HAL_RCC_GetPCLK1Freq>
 8000ef4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a81      	ldr	r2, [pc, #516]	; (8001100 <HAL_I2C_Init+0x274>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d807      	bhi.n	8000f10 <HAL_I2C_Init+0x84>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4a80      	ldr	r2, [pc, #512]	; (8001104 <HAL_I2C_Init+0x278>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	bf94      	ite	ls
 8000f08:	2301      	movls	r3, #1
 8000f0a:	2300      	movhi	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	e006      	b.n	8000f1e <HAL_I2C_Init+0x92>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4a7d      	ldr	r2, [pc, #500]	; (8001108 <HAL_I2C_Init+0x27c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	bf94      	ite	ls
 8000f18:	2301      	movls	r3, #1
 8000f1a:	2300      	movhi	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0e7      	b.n	80010f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4a78      	ldr	r2, [pc, #480]	; (800110c <HAL_I2C_Init+0x280>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9b      	lsrs	r3, r3, #18
 8000f30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	4a6a      	ldr	r2, [pc, #424]	; (8001100 <HAL_I2C_Init+0x274>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d802      	bhi.n	8000f60 <HAL_I2C_Init+0xd4>
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	e009      	b.n	8000f74 <HAL_I2C_Init+0xe8>
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	4a69      	ldr	r2, [pc, #420]	; (8001110 <HAL_I2C_Init+0x284>)
 8000f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f70:	099b      	lsrs	r3, r3, #6
 8000f72:	3301      	adds	r3, #1
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6812      	ldr	r2, [r2, #0]
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	495c      	ldr	r1, [pc, #368]	; (8001100 <HAL_I2C_Init+0x274>)
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d819      	bhi.n	8000fc8 <HAL_I2C_Init+0x13c>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	1e59      	subs	r1, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fa2:	1c59      	adds	r1, r3, #1
 8000fa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000fa8:	400b      	ands	r3, r1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00a      	beq.n	8000fc4 <HAL_I2C_Init+0x138>
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	1e59      	subs	r1, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc2:	e051      	b.n	8001068 <HAL_I2C_Init+0x1dc>
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	e04f      	b.n	8001068 <HAL_I2C_Init+0x1dc>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d111      	bne.n	8000ff4 <HAL_I2C_Init+0x168>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1e58      	subs	r0, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6859      	ldr	r1, [r3, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	440b      	add	r3, r1
 8000fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	e012      	b.n	800101a <HAL_I2C_Init+0x18e>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1e58      	subs	r0, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6859      	ldr	r1, [r3, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	0099      	lsls	r1, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	fbb0 f3f3 	udiv	r3, r0, r3
 800100a:	3301      	adds	r3, #1
 800100c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf0c      	ite	eq
 8001014:	2301      	moveq	r3, #1
 8001016:	2300      	movne	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_I2C_Init+0x196>
 800101e:	2301      	movs	r3, #1
 8001020:	e022      	b.n	8001068 <HAL_I2C_Init+0x1dc>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10e      	bne.n	8001048 <HAL_I2C_Init+0x1bc>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1e58      	subs	r0, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6859      	ldr	r1, [r3, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	440b      	add	r3, r1
 8001038:	fbb0 f3f3 	udiv	r3, r0, r3
 800103c:	3301      	adds	r3, #1
 800103e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001046:	e00f      	b.n	8001068 <HAL_I2C_Init+0x1dc>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1e58      	subs	r0, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	0099      	lsls	r1, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	fbb0 f3f3 	udiv	r3, r0, r3
 800105e:	3301      	adds	r3, #1
 8001060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	6809      	ldr	r1, [r1, #0]
 800106c:	4313      	orrs	r3, r2
 800106e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69da      	ldr	r2, [r3, #28]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6911      	ldr	r1, [r2, #16]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68d2      	ldr	r2, [r2, #12]
 80010a2:	4311      	orrs	r1, r2
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2220      	movs	r2, #32
 80010e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	000186a0 	.word	0x000186a0
 8001104:	001e847f 	.word	0x001e847f
 8001108:	003d08ff 	.word	0x003d08ff
 800110c:	431bde83 	.word	0x431bde83
 8001110:	10624dd3 	.word	0x10624dd3

08001114 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af02      	add	r7, sp, #8
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	460b      	mov	r3, r1
 8001122:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff fb36 	bl	8000794 <HAL_GetTick>
 8001128:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b20      	cmp	r3, #32
 8001138:	f040 8111 	bne.w	800135e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2319      	movs	r3, #25
 8001142:	2201      	movs	r2, #1
 8001144:	4988      	ldr	r1, [pc, #544]	; (8001368 <HAL_I2C_IsDeviceReady+0x254>)
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f001 fd9a 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001152:	2302      	movs	r3, #2
 8001154:	e104      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_I2C_IsDeviceReady+0x50>
 8001160:	2302      	movs	r3, #2
 8001162:	e0fd      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x24c>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b01      	cmp	r3, #1
 8001178:	d007      	beq.n	800118a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0201 	orr.w	r2, r2, #1
 8001188:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2224      	movs	r2, #36	; 0x24
 800119e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4a70      	ldr	r2, [pc, #448]	; (800136c <HAL_I2C_IsDeviceReady+0x258>)
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f001 fd58 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00d      	beq.n	80011f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e4:	d103      	bne.n	80011ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e0b6      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011f2:	897b      	ldrh	r3, [r7, #10]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001200:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fac7 	bl	8000794 <HAL_GetTick>
 8001206:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b02      	cmp	r3, #2
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001236:	e025      	b.n	8001284 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001238:	f7ff faac 	bl	8000794 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d302      	bcc.n	800124e <HAL_I2C_IsDeviceReady+0x13a>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d103      	bne.n	8001256 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	22a0      	movs	r2, #160	; 0xa0
 8001252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b02      	cmp	r3, #2
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127a:	bf0c      	ite	eq
 800127c:	2301      	moveq	r3, #1
 800127e:	2300      	movne	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2ba0      	cmp	r3, #160	; 0xa0
 800128e:	d005      	beq.n	800129c <HAL_I2C_IsDeviceReady+0x188>
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <HAL_I2C_IsDeviceReady+0x188>
 8001296:	7dbb      	ldrb	r3, [r7, #22]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0cd      	beq.n	8001238 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2220      	movs	r2, #32
 80012a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d129      	bne.n	8001306 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2319      	movs	r3, #25
 80012de:	2201      	movs	r2, #1
 80012e0:	4921      	ldr	r1, [pc, #132]	; (8001368 <HAL_I2C_IsDeviceReady+0x254>)
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f001 fccc 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e036      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2220      	movs	r2, #32
 80012f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e02c      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001314:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800131e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2319      	movs	r3, #25
 8001326:	2201      	movs	r2, #1
 8001328:	490f      	ldr	r1, [pc, #60]	; (8001368 <HAL_I2C_IsDeviceReady+0x254>)
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f001 fca8 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e012      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	3301      	adds	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	f4ff af32 	bcc.w	80011ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2220      	movs	r2, #32
 800134e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800135e:	2302      	movs	r3, #2
  }
}
 8001360:	4618      	mov	r0, r3
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	00100002 	.word	0x00100002
 800136c:	ffff0000 	.word	0xffff0000

08001370 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001390:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001398:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b10      	cmp	r3, #16
 800139e:	d003      	beq.n	80013a8 <HAL_I2C_EV_IRQHandler+0x38>
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	f040 80c1 	bne.w	800152a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10d      	bne.n	80013de <HAL_I2C_EV_IRQHandler+0x6e>
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80013c8:	d003      	beq.n	80013d2 <HAL_I2C_EV_IRQHandler+0x62>
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80013d0:	d101      	bne.n	80013d6 <HAL_I2C_EV_IRQHandler+0x66>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_I2C_EV_IRQHandler+0x68>
 80013d6:	2300      	movs	r3, #0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f000 8132 	beq.w	8001642 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00c      	beq.n	8001402 <HAL_I2C_EV_IRQHandler+0x92>
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	0a5b      	lsrs	r3, r3, #9
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f001 fccd 	bl	8002d94 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fd77 	bl	8001eee <I2C_Master_SB>
 8001400:	e092      	b.n	8001528 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_I2C_EV_IRQHandler+0xb2>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	0a5b      	lsrs	r3, r3, #9
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fdec 	bl	8001ff8 <I2C_Master_ADD10>
 8001420:	e082      	b.n	8001528 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_I2C_EV_IRQHandler+0xd2>
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	0a5b      	lsrs	r3, r3, #9
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fe05 	bl	800204a <I2C_Master_ADDR>
 8001440:	e072      	b.n	8001528 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d03b      	beq.n	80014c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800145c:	f000 80f3 	beq.w	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	09db      	lsrs	r3, r3, #7
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00f      	beq.n	800148c <HAL_I2C_EV_IRQHandler+0x11c>
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	0a9b      	lsrs	r3, r3, #10
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d009      	beq.n	800148c <HAL_I2C_EV_IRQHandler+0x11c>
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f9f1 	bl	800186c <I2C_MasterTransmit_TXE>
 800148a:	e04d      	b.n	8001528 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80d6 	beq.w	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	0a5b      	lsrs	r3, r3, #9
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80cf 	beq.w	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b21      	cmp	r3, #33	; 0x21
 80014ac:	d103      	bne.n	80014b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 fa78 	bl	80019a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014b4:	e0c7      	b.n	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b40      	cmp	r3, #64	; 0x40
 80014ba:	f040 80c4 	bne.w	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fae6 	bl	8001a90 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014c4:	e0bf      	b.n	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014d4:	f000 80b7 	beq.w	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	099b      	lsrs	r3, r3, #6
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00f      	beq.n	8001504 <HAL_I2C_EV_IRQHandler+0x194>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	0a9b      	lsrs	r3, r3, #10
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <HAL_I2C_EV_IRQHandler+0x194>
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d103      	bne.n	8001504 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fb5b 	bl	8001bb8 <I2C_MasterReceive_RXNE>
 8001502:	e011      	b.n	8001528 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 809a 	beq.w	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	0a5b      	lsrs	r3, r3, #9
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8093 	beq.w	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fbfa 	bl	8001d1a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001526:	e08e      	b.n	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001528:	e08d      	b.n	8001646 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e007      	b.n	800154c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d012      	beq.n	800157e <HAL_I2C_EV_IRQHandler+0x20e>
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	0a5b      	lsrs	r3, r3, #9
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00c      	beq.n	800157e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001574:	69b9      	ldr	r1, [r7, #24]
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 ffbe 	bl	80024f8 <I2C_Slave_ADDR>
 800157c:	e066      	b.n	800164c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_I2C_EV_IRQHandler+0x22e>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	0a5b      	lsrs	r3, r3, #9
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fff8 	bl	800258c <I2C_Slave_STOPF>
 800159c:	e056      	b.n	800164c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	2b21      	cmp	r3, #33	; 0x21
 80015a2:	d002      	beq.n	80015aa <HAL_I2C_EV_IRQHandler+0x23a>
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	2b29      	cmp	r3, #41	; 0x29
 80015a8:	d125      	bne.n	80015f6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	09db      	lsrs	r3, r3, #7
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00f      	beq.n	80015d6 <HAL_I2C_EV_IRQHandler+0x266>
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	0a9b      	lsrs	r3, r3, #10
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_I2C_EV_IRQHandler+0x266>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fed6 	bl	8002380 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015d4:	e039      	b.n	800164a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d033      	beq.n	800164a <HAL_I2C_EV_IRQHandler+0x2da>
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	0a5b      	lsrs	r3, r3, #9
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d02d      	beq.n	800164a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 ff03 	bl	80023fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015f4:	e029      	b.n	800164a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00f      	beq.n	8001622 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	0a9b      	lsrs	r3, r3, #10
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_I2C_EV_IRQHandler+0x2b2>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 ff0d 	bl	800243a <I2C_SlaveReceive_RXNE>
 8001620:	e014      	b.n	800164c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00e      	beq.n	800164c <HAL_I2C_EV_IRQHandler+0x2dc>
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	0a5b      	lsrs	r3, r3, #9
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 ff3b 	bl	80024b6 <I2C_SlaveReceive_BTF>
 8001640:	e004      	b.n	800164c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001642:	bf00      	nop
 8001644:	e002      	b.n	800164c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001646:	bf00      	nop
 8001648:	e000      	b.n	800164c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800164a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b08a      	sub	sp, #40	; 0x28
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001674:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d016      	beq.n	80016b0 <HAL_I2C_ER_IRQHandler+0x5e>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d010      	beq.n	80016b0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800169e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ae:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	0a5b      	lsrs	r3, r3, #9
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00e      	beq.n	80016da <HAL_I2C_ER_IRQHandler+0x88>
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80016d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	0a9b      	lsrs	r3, r3, #10
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d03f      	beq.n	8001766 <HAL_I2C_ER_IRQHandler+0x114>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d039      	beq.n	8001766 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80016f2:	7efb      	ldrb	r3, [r7, #27]
 80016f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001704:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800170c:	7ebb      	ldrb	r3, [r7, #26]
 800170e:	2b20      	cmp	r3, #32
 8001710:	d112      	bne.n	8001738 <HAL_I2C_ER_IRQHandler+0xe6>
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10f      	bne.n	8001738 <HAL_I2C_ER_IRQHandler+0xe6>
 8001718:	7cfb      	ldrb	r3, [r7, #19]
 800171a:	2b21      	cmp	r3, #33	; 0x21
 800171c:	d008      	beq.n	8001730 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800171e:	7cfb      	ldrb	r3, [r7, #19]
 8001720:	2b29      	cmp	r3, #41	; 0x29
 8001722:	d005      	beq.n	8001730 <HAL_I2C_ER_IRQHandler+0xde>
 8001724:	7cfb      	ldrb	r3, [r7, #19]
 8001726:	2b28      	cmp	r3, #40	; 0x28
 8001728:	d106      	bne.n	8001738 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b21      	cmp	r3, #33	; 0x21
 800172e:	d103      	bne.n	8001738 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f001 f85b 	bl	80027ec <I2C_Slave_AF>
 8001736:	e016      	b.n	8001766 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001740:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800174a:	7efb      	ldrb	r3, [r7, #27]
 800174c:	2b10      	cmp	r3, #16
 800174e:	d002      	beq.n	8001756 <HAL_I2C_ER_IRQHandler+0x104>
 8001750:	7efb      	ldrb	r3, [r7, #27]
 8001752:	2b40      	cmp	r3, #64	; 0x40
 8001754:	d107      	bne.n	8001766 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001764:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	0adb      	lsrs	r3, r3, #11
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00e      	beq.n	8001790 <HAL_I2C_ER_IRQHandler+0x13e>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	0a1b      	lsrs	r3, r3, #8
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d008      	beq.n	8001790 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800178e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f001 f892 	bl	80028cc <I2C_ITError>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	; 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
 8001804:	4613      	mov	r3, r2
 8001806:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001882:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	d150      	bne.n	8001934 <I2C_MasterTransmit_TXE+0xc8>
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b21      	cmp	r3, #33	; 0x21
 8001896:	d14d      	bne.n	8001934 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b08      	cmp	r3, #8
 800189c:	d01d      	beq.n	80018da <I2C_MasterTransmit_TXE+0x6e>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	d01a      	beq.n	80018da <I2C_MasterTransmit_TXE+0x6e>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018aa:	d016      	beq.n	80018da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2211      	movs	r2, #17
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ff6c 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018d8:	e060      	b.n	800199c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b40      	cmp	r3, #64	; 0x40
 8001912:	d107      	bne.n	8001924 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff81 	bl	8001824 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001922:	e03b      	b.n	800199c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff3f 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001932:	e033      	b.n	800199c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b21      	cmp	r3, #33	; 0x21
 8001938:	d005      	beq.n	8001946 <I2C_MasterTransmit_TXE+0xda>
 800193a:	7bbb      	ldrb	r3, [r7, #14]
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d12d      	bne.n	800199c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b22      	cmp	r3, #34	; 0x22
 8001944:	d12a      	bne.n	800199c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d108      	bne.n	8001962 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001960:	e01c      	b.n	800199c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d103      	bne.n	8001976 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f88e 	bl	8001a90 <I2C_MemoryTransmit_TXE_BTF>
}
 8001974:	e012      	b.n	800199c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800199a:	e7ff      	b.n	800199c <I2C_MasterTransmit_TXE+0x130>
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b21      	cmp	r3, #33	; 0x21
 80019bc:	d164      	bne.n	8001a88 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d012      	beq.n	80019ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80019ec:	e04c      	b.n	8001a88 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d01d      	beq.n	8001a30 <I2C_MasterTransmit_BTF+0x8c>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d01a      	beq.n	8001a30 <I2C_MasterTransmit_BTF+0x8c>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a00:	d016      	beq.n	8001a30 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a10:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2211      	movs	r2, #17
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fec1 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
}
 8001a2e:	e02b      	b.n	8001a88 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a3e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b40      	cmp	r3, #64	; 0x40
 8001a68:	d107      	bne.n	8001a7a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fed6 	bl	8001824 <HAL_I2C_MemTxCpltCallback>
}
 8001a78:	e006      	b.n	8001a88 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fe94 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11d      	bne.n	8001ae4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d10b      	bne.n	8001ac8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac0:	1c9a      	adds	r2, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001ac6:	e073      	b.n	8001bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	121b      	asrs	r3, r3, #8
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ae2:	e065      	b.n	8001bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10b      	bne.n	8001b04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b02:	e055      	b.n	8001bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d151      	bne.n	8001bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	2b22      	cmp	r3, #34	; 0x22
 8001b10:	d10d      	bne.n	8001b2e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b2c:	e040      	b.n	8001bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d015      	beq.n	8001b64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b21      	cmp	r3, #33	; 0x21
 8001b3c:	d112      	bne.n	8001b64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b62:	e025      	b.n	8001bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d120      	bne.n	8001bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b21      	cmp	r3, #33	; 0x21
 8001b72:	d11d      	bne.n	8001bb0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b82:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fe3a 	bl	8001824 <HAL_I2C_MemTxCpltCallback>
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b22      	cmp	r3, #34	; 0x22
 8001bca:	f040 80a2 	bne.w	8001d12 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d921      	bls.n	8001c20 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691a      	ldr	r2, [r3, #16]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	f040 8082 	bne.w	8001d12 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001c1e:	e078      	b.n	8001d12 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d074      	beq.n	8001d12 <I2C_MasterReceive_RXNE+0x15a>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d002      	beq.n	8001c34 <I2C_MasterReceive_RXNE+0x7c>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d16e      	bne.n	8001d12 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f001 f87b 	bl	8002d30 <I2C_WaitOnSTOPRequestThroughIT>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d142      	bne.n	8001cc6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c4e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c5e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b40      	cmp	r3, #64	; 0x40
 8001c98:	d10a      	bne.n	8001cb0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fdc4 	bl	8001836 <HAL_I2C_MemRxCpltCallback>
}
 8001cae:	e030      	b.n	8001d12 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2212      	movs	r2, #18
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fd7f 	bl	80017c2 <HAL_I2C_MasterRxCpltCallback>
}
 8001cc4:	e025      	b.n	8001d12 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cd4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fd9b 	bl	8001848 <HAL_I2C_ErrorCallback>
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d11b      	bne.n	8001d6a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d40:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001d68:	e0bd      	b.n	8001ee6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d129      	bne.n	8001dc8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d82:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d00a      	beq.n	8001da0 <I2C_MasterReceive_BTF+0x86>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d007      	beq.n	8001da0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001dc6:	e08e      	b.n	8001ee6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d176      	bne.n	8001ec0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d002      	beq.n	8001dde <I2C_MasterReceive_BTF+0xc4>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d108      	bne.n	8001df0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e019      	b.n	8001e24 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d002      	beq.n	8001dfc <I2C_MasterReceive_BTF+0xe2>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d108      	bne.n	8001e0e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e00a      	b.n	8001e24 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d007      	beq.n	8001e24 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d10a      	bne.n	8001eaa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fcc7 	bl	8001836 <HAL_I2C_MemRxCpltCallback>
}
 8001ea8:	e01d      	b.n	8001ee6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2212      	movs	r2, #18
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fc82 	bl	80017c2 <HAL_I2C_MasterRxCpltCallback>
}
 8001ebe:	e012      	b.n	8001ee6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d117      	bne.n	8001f32 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f1a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001f1c:	e067      	b.n	8001fee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	611a      	str	r2, [r3, #16]
}
 8001f30:	e05d      	b.n	8001fee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f3a:	d133      	bne.n	8001fa4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b21      	cmp	r3, #33	; 0x21
 8001f46:	d109      	bne.n	8001f5c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	e008      	b.n	8001f6e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <I2C_Master_SB+0x92>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d108      	bne.n	8001f92 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d032      	beq.n	8001fee <I2C_Master_SB+0x100>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02d      	beq.n	8001fee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fa0:	605a      	str	r2, [r3, #4]
}
 8001fa2:	e024      	b.n	8001fee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10e      	bne.n	8001fca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	11db      	asrs	r3, r3, #7
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f003 0306 	and.w	r3, r3, #6
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f063 030f 	orn	r3, r3, #15
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	611a      	str	r2, [r3, #16]
}
 8001fc8:	e011      	b.n	8001fee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10d      	bne.n	8001fee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	11db      	asrs	r3, r3, #7
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f003 0306 	and.w	r3, r3, #6
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f063 030e 	orn	r3, r3, #14
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	611a      	str	r2, [r3, #16]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	b2da      	uxtb	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <I2C_Master_ADD10+0x26>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	2b00      	cmp	r3, #0
 800201c:	d108      	bne.n	8002030 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <I2C_Master_ADD10+0x48>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800203e:	605a      	str	r2, [r3, #4]
  }
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800204a:	b480      	push	{r7}
 800204c:	b091      	sub	sp, #68	; 0x44
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b22      	cmp	r3, #34	; 0x22
 8002072:	f040 8174 	bne.w	800235e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <I2C_Master_ADDR+0x54>
 800207e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002082:	2b40      	cmp	r3, #64	; 0x40
 8002084:	d10b      	bne.n	800209e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002086:	2300      	movs	r3, #0
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
 800209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209c:	e16b      	b.n	8002376 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d11d      	bne.n	80020e2 <I2C_Master_ADDR+0x98>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80020ae:	d118      	bne.n	80020e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	651a      	str	r2, [r3, #80]	; 0x50
 80020e0:	e149      	b.n	8002376 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d113      	bne.n	8002114 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e120      	b.n	8002356 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	f040 808a 	bne.w	8002234 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002122:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002126:	d137      	bne.n	8002198 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002146:	d113      	bne.n	8002170 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002156:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	e0f2      	b.n	8002356 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	623b      	str	r3, [r7, #32]
 8002184:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e0de      	b.n	8002356 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219a:	2b08      	cmp	r3, #8
 800219c:	d02e      	beq.n	80021fc <I2C_Master_ADDR+0x1b2>
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d02b      	beq.n	80021fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80021a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a6:	2b12      	cmp	r3, #18
 80021a8:	d102      	bne.n	80021b0 <I2C_Master_ADDR+0x166>
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d125      	bne.n	80021fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d00e      	beq.n	80021d4 <I2C_Master_ADDR+0x18a>
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d00b      	beq.n	80021d4 <I2C_Master_ADDR+0x18a>
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d008      	beq.n	80021d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e007      	b.n	80021e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	e0ac      	b.n	8002356 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e090      	b.n	8002356 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d158      	bne.n	80022f0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002240:	2b04      	cmp	r3, #4
 8002242:	d021      	beq.n	8002288 <I2C_Master_ADDR+0x23e>
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	2b02      	cmp	r3, #2
 8002248:	d01e      	beq.n	8002288 <I2C_Master_ADDR+0x23e>
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	2b10      	cmp	r3, #16
 800224e:	d01b      	beq.n	8002288 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e012      	b.n	80022ae <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002296:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022bc:	d14b      	bne.n	8002356 <I2C_Master_ADDR+0x30c>
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022c4:	d00b      	beq.n	80022de <I2C_Master_ADDR+0x294>
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d008      	beq.n	80022de <I2C_Master_ADDR+0x294>
 80022cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d005      	beq.n	80022de <I2C_Master_ADDR+0x294>
 80022d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	d002      	beq.n	80022de <I2C_Master_ADDR+0x294>
 80022d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022da:	2b20      	cmp	r3, #32
 80022dc:	d13b      	bne.n	8002356 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	e032      	b.n	8002356 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022fe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800230e:	d117      	bne.n	8002340 <I2C_Master_ADDR+0x2f6>
 8002310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002312:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002316:	d00b      	beq.n	8002330 <I2C_Master_ADDR+0x2e6>
 8002318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231a:	2b01      	cmp	r3, #1
 800231c:	d008      	beq.n	8002330 <I2C_Master_ADDR+0x2e6>
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	2b08      	cmp	r3, #8
 8002322:	d005      	beq.n	8002330 <I2C_Master_ADDR+0x2e6>
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	2b10      	cmp	r3, #16
 8002328:	d002      	beq.n	8002330 <I2C_Master_ADDR+0x2e6>
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	2b20      	cmp	r3, #32
 800232e:	d107      	bne.n	8002340 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800233e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800235c:	e00b      	b.n	8002376 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
}
 8002374:	e7ff      	b.n	8002376 <I2C_Master_ADDR+0x32c>
 8002376:	bf00      	nop
 8002378:	3744      	adds	r7, #68	; 0x44
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d02b      	beq.n	80023f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d114      	bne.n	80023f2 <I2C_SlaveTransmit_TXE+0x72>
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b29      	cmp	r3, #41	; 0x29
 80023cc:	d111      	bne.n	80023f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2221      	movs	r2, #33	; 0x21
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2228      	movs	r2, #40	; 0x28
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff f9f1 	bl	80017d4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d011      	beq.n	8002430 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d02c      	beq.n	80024ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d114      	bne.n	80024ae <I2C_SlaveReceive_RXNE+0x74>
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b2a      	cmp	r3, #42	; 0x2a
 8002488:	d111      	bne.n	80024ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002498:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2222      	movs	r2, #34	; 0x22
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2228      	movs	r2, #40	; 0x28
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff f99c 	bl	80017e6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002512:	2b28      	cmp	r3, #40	; 0x28
 8002514:	d127      	bne.n	8002566 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002524:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	09db      	lsrs	r3, r3, #7
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	81bb      	strh	r3, [r7, #12]
 8002548:	e002      	b.n	8002550 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002558:	89ba      	ldrh	r2, [r7, #12]
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff f94a 	bl	80017f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002564:	e00e      	b.n	8002584 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e8:	d172      	bne.n	80026d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b22      	cmp	r3, #34	; 0x22
 80025ee:	d002      	beq.n	80025f6 <I2C_Slave_STOPF+0x6a>
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b2a      	cmp	r3, #42	; 0x2a
 80025f4:	d135      	bne.n	8002662 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0204 	orr.w	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002628:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fa9c 	bl	8000b6c <HAL_DMA_GetState>
 8002634:	4603      	mov	r3, r0
 8002636:	2b01      	cmp	r3, #1
 8002638:	d049      	beq.n	80026ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a69      	ldr	r2, [pc, #420]	; (80027e4 <I2C_Slave_STOPF+0x258>)
 8002640:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fa1a 	bl	8000a80 <HAL_DMA_Abort_IT>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03d      	beq.n	80026ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800265c:	4610      	mov	r0, r2
 800265e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002660:	e035      	b.n	80026ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f043 0204 	orr.w	r2, r3, #4
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002694:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fa66 	bl	8000b6c <HAL_DMA_GetState>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d014      	beq.n	80026d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	4a4e      	ldr	r2, [pc, #312]	; (80027e4 <I2C_Slave_STOPF+0x258>)
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe f9e4 	bl	8000a80 <HAL_DMA_Abort_IT>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c8:	4610      	mov	r0, r2
 80026ca:	4798      	blx	r3
 80026cc:	e000      	b.n	80026d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d03e      	beq.n	8002758 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d112      	bne.n	800270e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d112      	bne.n	8002742 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f043 0204 	orr.w	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f8b3 	bl	80028cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002766:	e039      	b.n	80027dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b2a      	cmp	r3, #42	; 0x2a
 800276c:	d109      	bne.n	8002782 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2228      	movs	r2, #40	; 0x28
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff f832 	bl	80017e6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b28      	cmp	r3, #40	; 0x28
 800278c:	d111      	bne.n	80027b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <I2C_Slave_STOPF+0x25c>)
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff f831 	bl	8001812 <HAL_I2C_ListenCpltCallback>
}
 80027b0:	e014      	b.n	80027dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	2b22      	cmp	r3, #34	; 0x22
 80027b8:	d002      	beq.n	80027c0 <I2C_Slave_STOPF+0x234>
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b22      	cmp	r3, #34	; 0x22
 80027be:	d10d      	bne.n	80027dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff f805 	bl	80017e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	08002b31 	.word	0x08002b31
 80027e8:	ffff0000 	.word	0xffff0000

080027ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d002      	beq.n	800280e <I2C_Slave_AF+0x22>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b20      	cmp	r3, #32
 800280c:	d129      	bne.n	8002862 <I2C_Slave_AF+0x76>
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b28      	cmp	r3, #40	; 0x28
 8002812:	d126      	bne.n	8002862 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <I2C_Slave_AF+0xdc>)
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002828:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002832:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002842:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe ffd9 	bl	8001812 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002860:	e02e      	b.n	80028c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b21      	cmp	r3, #33	; 0x21
 8002866:	d126      	bne.n	80028b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <I2C_Slave_AF+0xdc>)
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2221      	movs	r2, #33	; 0x21
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002892:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800289c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe ff90 	bl	80017d4 <HAL_I2C_SlaveTxCpltCallback>
}
 80028b4:	e004      	b.n	80028c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028be:	615a      	str	r2, [r3, #20]
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	ffff0000 	.word	0xffff0000

080028cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028e4:	7bbb      	ldrb	r3, [r7, #14]
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d002      	beq.n	80028f0 <I2C_ITError+0x24>
 80028ea:	7bbb      	ldrb	r3, [r7, #14]
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d10a      	bne.n	8002906 <I2C_ITError+0x3a>
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b22      	cmp	r3, #34	; 0x22
 80028f4:	d107      	bne.n	8002906 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002904:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800290c:	2b28      	cmp	r3, #40	; 0x28
 800290e:	d107      	bne.n	8002920 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2228      	movs	r2, #40	; 0x28
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800291e:	e015      	b.n	800294c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292e:	d00a      	beq.n	8002946 <I2C_ITError+0x7a>
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b60      	cmp	r3, #96	; 0x60
 8002934:	d007      	beq.n	8002946 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800295a:	d161      	bne.n	8002a20 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002974:	2b01      	cmp	r3, #1
 8002976:	d020      	beq.n	80029ba <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	4a6a      	ldr	r2, [pc, #424]	; (8002b28 <I2C_ITError+0x25c>)
 800297e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f87b 	bl	8000a80 <HAL_DMA_Abort_IT>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8089 	beq.w	8002aa4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029b4:	4610      	mov	r0, r2
 80029b6:	4798      	blx	r3
 80029b8:	e074      	b.n	8002aa4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	4a5a      	ldr	r2, [pc, #360]	; (8002b28 <I2C_ITError+0x25c>)
 80029c0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f85a 	bl	8000a80 <HAL_DMA_Abort_IT>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d068      	beq.n	8002aa4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029dc:	2b40      	cmp	r3, #64	; 0x40
 80029de:	d10b      	bne.n	80029f8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4798      	blx	r3
 8002a1e:	e041      	b.n	8002aa4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b60      	cmp	r3, #96	; 0x60
 8002a2a:	d125      	bne.n	8002a78 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d10b      	bne.n	8002a60 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fe fef2 	bl	800185a <HAL_I2C_AbortCpltCallback>
 8002a76:	e015      	b.n	8002aa4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b40      	cmp	r3, #64	; 0x40
 8002a84:	d10b      	bne.n	8002a9e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fed2 	bl	8001848 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ae0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d113      	bne.n	8002b1e <I2C_ITError+0x252>
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b28      	cmp	r3, #40	; 0x28
 8002afa:	d110      	bne.n	8002b1e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <I2C_ITError+0x260>)
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fe fe7a 	bl	8001812 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	08002b31 	.word	0x08002b31
 8002b2c:	ffff0000 	.word	0xffff0000

08002b30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b4a:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <I2C_DMAAbort+0x148>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	08db      	lsrs	r3, r3, #3
 8002b50:	4a4a      	ldr	r2, [pc, #296]	; (8002c7c <I2C_DMAAbort+0x14c>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0a1a      	lsrs	r2, r3, #8
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00da      	lsls	r2, r3, #3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002b76:	e00a      	b.n	8002b8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b8c:	d0ea      	beq.n	8002b64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	2200      	movs	r2, #0
 8002be2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b60      	cmp	r3, #96	; 0x60
 8002bfe:	d10e      	bne.n	8002c1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f7fe fe1f 	bl	800185a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c1c:	e027      	b.n	8002c6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c24:	2b28      	cmp	r3, #40	; 0x28
 8002c26:	d117      	bne.n	8002c58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2228      	movs	r2, #40	; 0x28
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c56:	e007      	b.n	8002c68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002c68:	6978      	ldr	r0, [r7, #20]
 8002c6a:	f7fe fded 	bl	8001848 <HAL_I2C_ErrorCallback>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000044 	.word	0x20000044
 8002c7c:	14f8b589 	.word	0x14f8b589

08002c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	e025      	b.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c98:	d021      	beq.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7fd fd7b 	bl	8000794 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d116      	bne.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e023      	b.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10d      	bne.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	e00c      	b.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d0b6      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0a1a      	lsrs	r2, r3, #8
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e008      	b.n	8002d80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7c:	d0e9      	beq.n	8002d52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000044 	.word	0x20000044
 8002d90:	14f8b589 	.word	0x14f8b589

08002d94 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002da4:	d103      	bne.n	8002dae <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dac:	e007      	b.n	8002dbe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002db6:	d102      	bne.n	8002dbe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e26c      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8087 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de8:	4b92      	ldr	r3, [pc, #584]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d00c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df4:	4b8f      	ldr	r3, [pc, #572]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d112      	bne.n	8002e26 <HAL_RCC_OscConfig+0x5e>
 8002e00:	4b8c      	ldr	r3, [pc, #560]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d10b      	bne.n	8002e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0e:	4b89      	ldr	r3, [pc, #548]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d06c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x12c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d168      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e246      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x76>
 8002e30:	4b80      	ldr	r3, [pc, #512]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a7f      	ldr	r2, [pc, #508]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	e02e      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x98>
 8002e46:	4b7b      	ldr	r3, [pc, #492]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7a      	ldr	r2, [pc, #488]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b78      	ldr	r3, [pc, #480]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a77      	ldr	r2, [pc, #476]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e01d      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0xbc>
 8002e6a:	4b72      	ldr	r3, [pc, #456]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a71      	ldr	r2, [pc, #452]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b6f      	ldr	r3, [pc, #444]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6e      	ldr	r2, [pc, #440]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e84:	4b6b      	ldr	r3, [pc, #428]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6a      	ldr	r2, [pc, #424]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b68      	ldr	r3, [pc, #416]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a67      	ldr	r2, [pc, #412]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fd fc76 	bl	8000794 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fd fc72 	bl	8000794 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	; 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1fa      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b5d      	ldr	r3, [pc, #372]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0xe4>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fc62 	bl	8000794 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fd fc5e 	bl	8000794 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	; 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1e6      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	4b53      	ldr	r3, [pc, #332]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x10c>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f02:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x18c>
 8002f1a:	4b46      	ldr	r3, [pc, #280]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_RCC_OscConfig+0x176>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1ba      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4939      	ldr	r1, [pc, #228]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	e03a      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fd fc17 	bl	8000794 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7fd fc13 	bl	8000794 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e19b      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4927      	ldr	r1, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e015      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9e:	4b26      	ldr	r3, [pc, #152]	; (8003038 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fd fbf6 	bl	8000794 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fd fbf2 	bl	8000794 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e17a      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03a      	beq.n	800304c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d019      	beq.n	8003012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_RCC_OscConfig+0x274>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7fd fbd6 	bl	8000794 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fec:	f7fd fbd2 	bl	8000794 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e15a      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <HAL_RCC_OscConfig+0x26c>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800300a:	2001      	movs	r0, #1
 800300c:	f000 fad8 	bl	80035c0 <RCC_Delay>
 8003010:	e01c      	b.n	800304c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_OscConfig+0x274>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7fd fbbc 	bl	8000794 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301e:	e00f      	b.n	8003040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7fd fbb8 	bl	8000794 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d908      	bls.n	8003040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e140      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	42420000 	.word	0x42420000
 800303c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b9e      	ldr	r3, [pc, #632]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e9      	bne.n	8003020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a6 	beq.w	80031a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b97      	ldr	r3, [pc, #604]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b94      	ldr	r3, [pc, #592]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4a93      	ldr	r2, [pc, #588]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003074:	61d3      	str	r3, [r2, #28]
 8003076:	4b91      	ldr	r3, [pc, #580]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	4b8e      	ldr	r3, [pc, #568]	; (80032c0 <HAL_RCC_OscConfig+0x4f8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d118      	bne.n	80030c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003092:	4b8b      	ldr	r3, [pc, #556]	; (80032c0 <HAL_RCC_OscConfig+0x4f8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a8a      	ldr	r2, [pc, #552]	; (80032c0 <HAL_RCC_OscConfig+0x4f8>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fd fb79 	bl	8000794 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7fd fb75 	bl	8000794 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0fd      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b81      	ldr	r3, [pc, #516]	; (80032c0 <HAL_RCC_OscConfig+0x4f8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x312>
 80030cc:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4a7a      	ldr	r2, [pc, #488]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6213      	str	r3, [r2, #32]
 80030d8:	e02d      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x334>
 80030e2:	4b76      	ldr	r3, [pc, #472]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4a75      	ldr	r2, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6213      	str	r3, [r2, #32]
 80030ee:	4b73      	ldr	r3, [pc, #460]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a72      	ldr	r2, [pc, #456]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6213      	str	r3, [r2, #32]
 80030fa:	e01c      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d10c      	bne.n	800311e <HAL_RCC_OscConfig+0x356>
 8003104:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a6c      	ldr	r2, [pc, #432]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a69      	ldr	r2, [pc, #420]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	e00b      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 800311e:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a66      	ldr	r2, [pc, #408]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6213      	str	r3, [r2, #32]
 800312a:	4b64      	ldr	r3, [pc, #400]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a63      	ldr	r2, [pc, #396]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d015      	beq.n	800316a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7fd fb29 	bl	8000794 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fd fb25 	bl	8000794 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	; 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0ab      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ee      	beq.n	8003146 <HAL_RCC_OscConfig+0x37e>
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fd fb13 	bl	8000794 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fd fb0f 	bl	8000794 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e095      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003188:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ee      	bne.n	8003172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b48      	ldr	r3, [pc, #288]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4a47      	ldr	r2, [pc, #284]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8081 	beq.w	80032b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4b42      	ldr	r3, [pc, #264]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d061      	beq.n	8003280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d146      	bne.n	8003252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	4b3f      	ldr	r3, [pc, #252]	; (80032c4 <HAL_RCC_OscConfig+0x4fc>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fd fae3 	bl	8000794 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fd fadf 	bl	8000794 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e067      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e4:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d108      	bne.n	800320c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	492d      	ldr	r1, [pc, #180]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320c:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a19      	ldr	r1, [r3, #32]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	430b      	orrs	r3, r1
 800321e:	4927      	ldr	r1, [pc, #156]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x4fc>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fd fab3 	bl	8000794 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fd faaf 	bl	8000794 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e037      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x46a>
 8003250:	e02f      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HAL_RCC_OscConfig+0x4fc>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fd fa9c 	bl	8000794 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7fd fa98 	bl	8000794 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e020      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x498>
 800327e:	e018      	b.n	80032b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e013      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_OscConfig+0x4f4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	429a      	cmp	r2, r3
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40007000 	.word	0x40007000
 80032c4:	42420060 	.word	0x42420060

080032c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0d0      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032dc:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d910      	bls.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4965      	ldr	r1, [pc, #404]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800332e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a52      	ldr	r2, [pc, #328]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003346:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d040      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d115      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e073      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e06b      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b39      	ldr	r3, [pc, #228]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4936      	ldr	r1, [pc, #216]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b8:	f7fd f9ec 	bl	8000794 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fd f9e8 	bl	8000794 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e053      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b27      	ldr	r3, [pc, #156]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d210      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4922      	ldr	r1, [pc, #136]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003442:	4b12      	ldr	r3, [pc, #72]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_RCC_ClockConfig+0x1cc>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1d0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f94a 	bl	8000710 <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40022000 	.word	0x40022000
 800348c:	40021000 	.word	0x40021000
 8003490:	08004934 	.word	0x08004934
 8003494:	20000044 	.word	0x20000044
 8003498:	20000048 	.word	0x20000048

0800349c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b490      	push	{r4, r7}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034a2:	4b2a      	ldr	r3, [pc, #168]	; (800354c <HAL_RCC_GetSysClockFreq+0xb0>)
 80034a4:	1d3c      	adds	r4, r7, #4
 80034a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034ac:	f240 2301 	movw	r3, #513	; 0x201
 80034b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	2300      	movs	r3, #0
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034c6:	4b22      	ldr	r3, [pc, #136]	; (8003550 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d002      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x40>
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x46>
 80034da:	e02d      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034dc:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034de:	623b      	str	r3, [r7, #32]
      break;
 80034e0:	e02d      	b.n	800353e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	0c9b      	lsrs	r3, r3, #18
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034ee:	4413      	add	r3, r2
 80034f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	0c5b      	lsrs	r3, r3, #17
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800350e:	4413      	add	r3, r2
 8003510:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003514:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4a0e      	ldr	r2, [pc, #56]	; (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 800351a:	fb02 f203 	mul.w	r2, r2, r3
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	e004      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	4a0b      	ldr	r2, [pc, #44]	; (8003558 <HAL_RCC_GetSysClockFreq+0xbc>)
 800352c:	fb02 f303 	mul.w	r3, r2, r3
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	623b      	str	r3, [r7, #32]
      break;
 8003536:	e002      	b.n	800353e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353a:	623b      	str	r3, [r7, #32]
      break;
 800353c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800353e:	6a3b      	ldr	r3, [r7, #32]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bc90      	pop	{r4, r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	08004924 	.word	0x08004924
 8003550:	40021000 	.word	0x40021000
 8003554:	007a1200 	.word	0x007a1200
 8003558:	003d0900 	.word	0x003d0900

0800355c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003560:	4b02      	ldr	r3, [pc, #8]	; (800356c <HAL_RCC_GetHCLKFreq+0x10>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	20000044 	.word	0x20000044

08003570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003574:	f7ff fff2 	bl	800355c <HAL_RCC_GetHCLKFreq>
 8003578:	4602      	mov	r2, r0
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	4903      	ldr	r1, [pc, #12]	; (8003594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003586:	5ccb      	ldrb	r3, [r1, r3]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	08004944 	.word	0x08004944

08003598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800359c:	f7ff ffde 	bl	800355c <HAL_RCC_GetHCLKFreq>
 80035a0:	4602      	mov	r2, r0
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	0adb      	lsrs	r3, r3, #11
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4903      	ldr	r1, [pc, #12]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ae:	5ccb      	ldrb	r3, [r1, r3]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	08004944 	.word	0x08004944

080035c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035c8:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <RCC_Delay+0x34>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <RCC_Delay+0x38>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0a5b      	lsrs	r3, r3, #9
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035dc:	bf00      	nop
  }
  while (Delay --);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	60fa      	str	r2, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f9      	bne.n	80035dc <RCC_Delay+0x1c>
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	20000044 	.word	0x20000044
 80035f8:	10624dd3 	.word	0x10624dd3

080035fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e03f      	b.n	800368e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fc ffe4 	bl	80005f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fc25 	bl	8003e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08a      	sub	sp, #40	; 0x28
 800369a:	af02      	add	r7, sp, #8
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d17c      	bne.n	80037b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_UART_Transmit+0x2c>
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e075      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x3e>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e06e      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2221      	movs	r2, #33	; 0x21
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ea:	f7fd f853 	bl	8000794 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d108      	bne.n	8003718 <HAL_UART_Transmit+0x82>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e003      	b.n	8003720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003728:	e02a      	b.n	8003780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fa11 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e036      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3302      	adds	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e007      	b.n	8003772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	3301      	adds	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1cf      	bne.n	800372a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	2140      	movs	r1, #64	; 0x40
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f9e1 	bl	8003b5c <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e006      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_UART_IRQHandler+0x52>
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa99 	bl	8003d3e <UART_Receive_IT>
      return;
 800380c:	e17b      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80b1 	beq.w	8003978 <HAL_UART_IRQHandler+0x1bc>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <HAL_UART_IRQHandler+0x70>
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a6 	beq.w	8003978 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_UART_IRQHandler+0x90>
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_UART_IRQHandler+0xb0>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0202 	orr.w	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_UART_IRQHandler+0xd0>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00f      	beq.n	80038b6 <HAL_UART_IRQHandler+0xfa>
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_UART_IRQHandler+0xee>
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0208 	orr.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 811e 	beq.w	8003afc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_UART_IRQHandler+0x11e>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fa32 	bl	8003d3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <HAL_UART_IRQHandler+0x146>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d031      	beq.n	8003966 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f974 	bl	8003bf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d023      	beq.n	800395e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003924:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	2b00      	cmp	r3, #0
 800392c:	d013      	beq.n	8003956 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	4a76      	ldr	r2, [pc, #472]	; (8003b0c <HAL_UART_IRQHandler+0x350>)
 8003934:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd f8a0 	bl	8000a80 <HAL_DMA_Abort_IT>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003950:	4610      	mov	r0, r2
 8003952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	e00e      	b.n	8003974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8ec 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395c:	e00a      	b.n	8003974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8e8 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e006      	b.n	8003974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8e4 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003972:	e0c3      	b.n	8003afc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	bf00      	nop
    return;
 8003976:	e0c1      	b.n	8003afc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	2b01      	cmp	r3, #1
 800397e:	f040 80a1 	bne.w	8003ac4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 809b 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8095 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d04e      	beq.n	8003a5c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80039c8:	8a3b      	ldrh	r3, [r7, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8098 	beq.w	8003b00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039d4:	8a3a      	ldrh	r2, [r7, #16]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f080 8092 	bcs.w	8003b00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8a3a      	ldrh	r2, [r7, #16]
 80039e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d02b      	beq.n	8003a44 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0210 	bic.w	r2, r2, #16
 8003a38:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc ffe3 	bl	8000a0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f876 	bl	8003b46 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a5a:	e051      	b.n	8003b00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d047      	beq.n	8003b04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a74:	8a7b      	ldrh	r3, [r7, #18]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d044      	beq.n	8003b04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a88:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0210 	bic.w	r2, r2, #16
 8003ab6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ab8:	8a7b      	ldrh	r3, [r7, #18]
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f842 	bl	8003b46 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ac2:	e01f      	b.n	8003b04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x324>
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8c9 	bl	8003c70 <UART_Transmit_IT>
    return;
 8003ade:	e012      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_UART_IRQHandler+0x34a>
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f90a 	bl	8003d0e <UART_EndTransmit_IT>
    return;
 8003afa:	e004      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
    return;
 8003afc:	bf00      	nop
 8003afe:	e002      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b04:	bf00      	nop
  }
}
 8003b06:	3728      	adds	r7, #40	; 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	08003c49 	.word	0x08003c49

08003b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6c:	e02c      	b.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b74:	d028      	beq.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7c:	f7fc fe0a 	bl	8000794 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d21d      	bcs.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e00f      	b.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d0c3      	beq.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0210 	bic.w	r2, r2, #16
 8003c2e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff ff66 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b21      	cmp	r3, #33	; 0x21
 8003c82:	d13e      	bne.n	8003d02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8c:	d114      	bne.n	8003cb8 <UART_Transmit_IT+0x48>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d110      	bne.n	8003cb8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003caa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]
 8003cb6:	e008      	b.n	8003cca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	1c59      	adds	r1, r3, #1
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6211      	str	r1, [r2, #32]
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff feee 	bl	8003b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b22      	cmp	r3, #34	; 0x22
 8003d50:	f040 8099 	bne.w	8003e86 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5c:	d117      	bne.n	8003d8e <UART_Receive_IT+0x50>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	1c9a      	adds	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d8c:	e026      	b.n	8003ddc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d007      	beq.n	8003db2 <UART_Receive_IT+0x74>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <UART_Receive_IT+0x82>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e008      	b.n	8003dd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4619      	mov	r1, r3
 8003dea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d148      	bne.n	8003e82 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0220 	bic.w	r2, r2, #32
 8003dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d123      	bne.n	8003e78 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0210 	bic.w	r2, r2, #16
 8003e44:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d10a      	bne.n	8003e6a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff fe68 	bl	8003b46 <HAL_UARTEx_RxEventCallback>
 8003e76:	e002      	b.n	8003e7e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fe52 	bl	8003b22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e002      	b.n	8003e88 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003eca:	f023 030c 	bic.w	r3, r3, #12
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <UART_SetConfig+0x114>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d103      	bne.n	8003f00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ef8:	f7ff fb4e 	bl	8003598 <HAL_RCC_GetPCLK2Freq>
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	e002      	b.n	8003f06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f00:	f7ff fb36 	bl	8003570 <HAL_RCC_GetPCLK1Freq>
 8003f04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009a      	lsls	r2, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <UART_SetConfig+0x118>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	0119      	lsls	r1, r3, #4
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009a      	lsls	r2, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <UART_SetConfig+0x118>)
 8003f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2064      	movs	r0, #100	; 0x64
 8003f46:	fb00 f303 	mul.w	r3, r0, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	3332      	adds	r3, #50	; 0x32
 8003f50:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <UART_SetConfig+0x118>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5c:	4419      	add	r1, r3
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009a      	lsls	r2, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <UART_SetConfig+0x118>)
 8003f76:	fba3 0302 	umull	r0, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2064      	movs	r0, #100	; 0x64
 8003f7e:	fb00 f303 	mul.w	r3, r0, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	3332      	adds	r3, #50	; 0x32
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <UART_SetConfig+0x118>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	f003 020f 	and.w	r2, r3, #15
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	440a      	add	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40013800 	.word	0x40013800
 8003fa8:	51eb851f 	.word	0x51eb851f

08003fac <__errno>:
 8003fac:	4b01      	ldr	r3, [pc, #4]	; (8003fb4 <__errno+0x8>)
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000050 	.word	0x20000050

08003fb8 <__libc_init_array>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	2600      	movs	r6, #0
 8003fbc:	4d0c      	ldr	r5, [pc, #48]	; (8003ff0 <__libc_init_array+0x38>)
 8003fbe:	4c0d      	ldr	r4, [pc, #52]	; (8003ff4 <__libc_init_array+0x3c>)
 8003fc0:	1b64      	subs	r4, r4, r5
 8003fc2:	10a4      	asrs	r4, r4, #2
 8003fc4:	42a6      	cmp	r6, r4
 8003fc6:	d109      	bne.n	8003fdc <__libc_init_array+0x24>
 8003fc8:	f000 fc9c 	bl	8004904 <_init>
 8003fcc:	2600      	movs	r6, #0
 8003fce:	4d0a      	ldr	r5, [pc, #40]	; (8003ff8 <__libc_init_array+0x40>)
 8003fd0:	4c0a      	ldr	r4, [pc, #40]	; (8003ffc <__libc_init_array+0x44>)
 8003fd2:	1b64      	subs	r4, r4, r5
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	42a6      	cmp	r6, r4
 8003fd8:	d105      	bne.n	8003fe6 <__libc_init_array+0x2e>
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe0:	4798      	blx	r3
 8003fe2:	3601      	adds	r6, #1
 8003fe4:	e7ee      	b.n	8003fc4 <__libc_init_array+0xc>
 8003fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fea:	4798      	blx	r3
 8003fec:	3601      	adds	r6, #1
 8003fee:	e7f2      	b.n	8003fd6 <__libc_init_array+0x1e>
 8003ff0:	08004980 	.word	0x08004980
 8003ff4:	08004980 	.word	0x08004980
 8003ff8:	08004980 	.word	0x08004980
 8003ffc:	08004984 	.word	0x08004984

08004000 <memset>:
 8004000:	4603      	mov	r3, r0
 8004002:	4402      	add	r2, r0
 8004004:	4293      	cmp	r3, r2
 8004006:	d100      	bne.n	800400a <memset+0xa>
 8004008:	4770      	bx	lr
 800400a:	f803 1b01 	strb.w	r1, [r3], #1
 800400e:	e7f9      	b.n	8004004 <memset+0x4>

08004010 <siprintf>:
 8004010:	b40e      	push	{r1, r2, r3}
 8004012:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004016:	b500      	push	{lr}
 8004018:	b09c      	sub	sp, #112	; 0x70
 800401a:	ab1d      	add	r3, sp, #116	; 0x74
 800401c:	9002      	str	r0, [sp, #8]
 800401e:	9006      	str	r0, [sp, #24]
 8004020:	9107      	str	r1, [sp, #28]
 8004022:	9104      	str	r1, [sp, #16]
 8004024:	4808      	ldr	r0, [pc, #32]	; (8004048 <siprintf+0x38>)
 8004026:	4909      	ldr	r1, [pc, #36]	; (800404c <siprintf+0x3c>)
 8004028:	f853 2b04 	ldr.w	r2, [r3], #4
 800402c:	9105      	str	r1, [sp, #20]
 800402e:	6800      	ldr	r0, [r0, #0]
 8004030:	a902      	add	r1, sp, #8
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	f000 f868 	bl	8004108 <_svfiprintf_r>
 8004038:	2200      	movs	r2, #0
 800403a:	9b02      	ldr	r3, [sp, #8]
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	b01c      	add	sp, #112	; 0x70
 8004040:	f85d eb04 	ldr.w	lr, [sp], #4
 8004044:	b003      	add	sp, #12
 8004046:	4770      	bx	lr
 8004048:	20000050 	.word	0x20000050
 800404c:	ffff0208 	.word	0xffff0208

08004050 <__ssputs_r>:
 8004050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	688e      	ldr	r6, [r1, #8]
 8004056:	4682      	mov	sl, r0
 8004058:	429e      	cmp	r6, r3
 800405a:	460c      	mov	r4, r1
 800405c:	4690      	mov	r8, r2
 800405e:	461f      	mov	r7, r3
 8004060:	d838      	bhi.n	80040d4 <__ssputs_r+0x84>
 8004062:	898a      	ldrh	r2, [r1, #12]
 8004064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004068:	d032      	beq.n	80040d0 <__ssputs_r+0x80>
 800406a:	6825      	ldr	r5, [r4, #0]
 800406c:	6909      	ldr	r1, [r1, #16]
 800406e:	3301      	adds	r3, #1
 8004070:	eba5 0901 	sub.w	r9, r5, r1
 8004074:	6965      	ldr	r5, [r4, #20]
 8004076:	444b      	add	r3, r9
 8004078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800407c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004080:	106d      	asrs	r5, r5, #1
 8004082:	429d      	cmp	r5, r3
 8004084:	bf38      	it	cc
 8004086:	461d      	movcc	r5, r3
 8004088:	0553      	lsls	r3, r2, #21
 800408a:	d531      	bpl.n	80040f0 <__ssputs_r+0xa0>
 800408c:	4629      	mov	r1, r5
 800408e:	f000 fb6f 	bl	8004770 <_malloc_r>
 8004092:	4606      	mov	r6, r0
 8004094:	b950      	cbnz	r0, 80040ac <__ssputs_r+0x5c>
 8004096:	230c      	movs	r3, #12
 8004098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800409c:	f8ca 3000 	str.w	r3, [sl]
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a6:	81a3      	strh	r3, [r4, #12]
 80040a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ac:	464a      	mov	r2, r9
 80040ae:	6921      	ldr	r1, [r4, #16]
 80040b0:	f000 face 	bl	8004650 <memcpy>
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	6126      	str	r6, [r4, #16]
 80040c2:	444e      	add	r6, r9
 80040c4:	6026      	str	r6, [r4, #0]
 80040c6:	463e      	mov	r6, r7
 80040c8:	6165      	str	r5, [r4, #20]
 80040ca:	eba5 0509 	sub.w	r5, r5, r9
 80040ce:	60a5      	str	r5, [r4, #8]
 80040d0:	42be      	cmp	r6, r7
 80040d2:	d900      	bls.n	80040d6 <__ssputs_r+0x86>
 80040d4:	463e      	mov	r6, r7
 80040d6:	4632      	mov	r2, r6
 80040d8:	4641      	mov	r1, r8
 80040da:	6820      	ldr	r0, [r4, #0]
 80040dc:	f000 fac6 	bl	800466c <memmove>
 80040e0:	68a3      	ldr	r3, [r4, #8]
 80040e2:	2000      	movs	r0, #0
 80040e4:	1b9b      	subs	r3, r3, r6
 80040e6:	60a3      	str	r3, [r4, #8]
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	4433      	add	r3, r6
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	e7db      	b.n	80040a8 <__ssputs_r+0x58>
 80040f0:	462a      	mov	r2, r5
 80040f2:	f000 fbb1 	bl	8004858 <_realloc_r>
 80040f6:	4606      	mov	r6, r0
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d1e1      	bne.n	80040c0 <__ssputs_r+0x70>
 80040fc:	4650      	mov	r0, sl
 80040fe:	6921      	ldr	r1, [r4, #16]
 8004100:	f000 face 	bl	80046a0 <_free_r>
 8004104:	e7c7      	b.n	8004096 <__ssputs_r+0x46>
	...

08004108 <_svfiprintf_r>:
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	4698      	mov	r8, r3
 800410e:	898b      	ldrh	r3, [r1, #12]
 8004110:	4607      	mov	r7, r0
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	460d      	mov	r5, r1
 8004116:	4614      	mov	r4, r2
 8004118:	b09d      	sub	sp, #116	; 0x74
 800411a:	d50e      	bpl.n	800413a <_svfiprintf_r+0x32>
 800411c:	690b      	ldr	r3, [r1, #16]
 800411e:	b963      	cbnz	r3, 800413a <_svfiprintf_r+0x32>
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	f000 fb25 	bl	8004770 <_malloc_r>
 8004126:	6028      	str	r0, [r5, #0]
 8004128:	6128      	str	r0, [r5, #16]
 800412a:	b920      	cbnz	r0, 8004136 <_svfiprintf_r+0x2e>
 800412c:	230c      	movs	r3, #12
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004134:	e0d1      	b.n	80042da <_svfiprintf_r+0x1d2>
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	616b      	str	r3, [r5, #20]
 800413a:	2300      	movs	r3, #0
 800413c:	9309      	str	r3, [sp, #36]	; 0x24
 800413e:	2320      	movs	r3, #32
 8004140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004144:	2330      	movs	r3, #48	; 0x30
 8004146:	f04f 0901 	mov.w	r9, #1
 800414a:	f8cd 800c 	str.w	r8, [sp, #12]
 800414e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042f4 <_svfiprintf_r+0x1ec>
 8004152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004156:	4623      	mov	r3, r4
 8004158:	469a      	mov	sl, r3
 800415a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800415e:	b10a      	cbz	r2, 8004164 <_svfiprintf_r+0x5c>
 8004160:	2a25      	cmp	r2, #37	; 0x25
 8004162:	d1f9      	bne.n	8004158 <_svfiprintf_r+0x50>
 8004164:	ebba 0b04 	subs.w	fp, sl, r4
 8004168:	d00b      	beq.n	8004182 <_svfiprintf_r+0x7a>
 800416a:	465b      	mov	r3, fp
 800416c:	4622      	mov	r2, r4
 800416e:	4629      	mov	r1, r5
 8004170:	4638      	mov	r0, r7
 8004172:	f7ff ff6d 	bl	8004050 <__ssputs_r>
 8004176:	3001      	adds	r0, #1
 8004178:	f000 80aa 	beq.w	80042d0 <_svfiprintf_r+0x1c8>
 800417c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800417e:	445a      	add	r2, fp
 8004180:	9209      	str	r2, [sp, #36]	; 0x24
 8004182:	f89a 3000 	ldrb.w	r3, [sl]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80a2 	beq.w	80042d0 <_svfiprintf_r+0x1c8>
 800418c:	2300      	movs	r3, #0
 800418e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004196:	f10a 0a01 	add.w	sl, sl, #1
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	9307      	str	r3, [sp, #28]
 800419e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041a2:	931a      	str	r3, [sp, #104]	; 0x68
 80041a4:	4654      	mov	r4, sl
 80041a6:	2205      	movs	r2, #5
 80041a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ac:	4851      	ldr	r0, [pc, #324]	; (80042f4 <_svfiprintf_r+0x1ec>)
 80041ae:	f000 fa41 	bl	8004634 <memchr>
 80041b2:	9a04      	ldr	r2, [sp, #16]
 80041b4:	b9d8      	cbnz	r0, 80041ee <_svfiprintf_r+0xe6>
 80041b6:	06d0      	lsls	r0, r2, #27
 80041b8:	bf44      	itt	mi
 80041ba:	2320      	movmi	r3, #32
 80041bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041c0:	0711      	lsls	r1, r2, #28
 80041c2:	bf44      	itt	mi
 80041c4:	232b      	movmi	r3, #43	; 0x2b
 80041c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ca:	f89a 3000 	ldrb.w	r3, [sl]
 80041ce:	2b2a      	cmp	r3, #42	; 0x2a
 80041d0:	d015      	beq.n	80041fe <_svfiprintf_r+0xf6>
 80041d2:	4654      	mov	r4, sl
 80041d4:	2000      	movs	r0, #0
 80041d6:	f04f 0c0a 	mov.w	ip, #10
 80041da:	9a07      	ldr	r2, [sp, #28]
 80041dc:	4621      	mov	r1, r4
 80041de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041e2:	3b30      	subs	r3, #48	; 0x30
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d94e      	bls.n	8004286 <_svfiprintf_r+0x17e>
 80041e8:	b1b0      	cbz	r0, 8004218 <_svfiprintf_r+0x110>
 80041ea:	9207      	str	r2, [sp, #28]
 80041ec:	e014      	b.n	8004218 <_svfiprintf_r+0x110>
 80041ee:	eba0 0308 	sub.w	r3, r0, r8
 80041f2:	fa09 f303 	lsl.w	r3, r9, r3
 80041f6:	4313      	orrs	r3, r2
 80041f8:	46a2      	mov	sl, r4
 80041fa:	9304      	str	r3, [sp, #16]
 80041fc:	e7d2      	b.n	80041a4 <_svfiprintf_r+0x9c>
 80041fe:	9b03      	ldr	r3, [sp, #12]
 8004200:	1d19      	adds	r1, r3, #4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	9103      	str	r1, [sp, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	bfbb      	ittet	lt
 800420a:	425b      	neglt	r3, r3
 800420c:	f042 0202 	orrlt.w	r2, r2, #2
 8004210:	9307      	strge	r3, [sp, #28]
 8004212:	9307      	strlt	r3, [sp, #28]
 8004214:	bfb8      	it	lt
 8004216:	9204      	strlt	r2, [sp, #16]
 8004218:	7823      	ldrb	r3, [r4, #0]
 800421a:	2b2e      	cmp	r3, #46	; 0x2e
 800421c:	d10c      	bne.n	8004238 <_svfiprintf_r+0x130>
 800421e:	7863      	ldrb	r3, [r4, #1]
 8004220:	2b2a      	cmp	r3, #42	; 0x2a
 8004222:	d135      	bne.n	8004290 <_svfiprintf_r+0x188>
 8004224:	9b03      	ldr	r3, [sp, #12]
 8004226:	3402      	adds	r4, #2
 8004228:	1d1a      	adds	r2, r3, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	9203      	str	r2, [sp, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfb8      	it	lt
 8004232:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004236:	9305      	str	r3, [sp, #20]
 8004238:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80042f8 <_svfiprintf_r+0x1f0>
 800423c:	2203      	movs	r2, #3
 800423e:	4650      	mov	r0, sl
 8004240:	7821      	ldrb	r1, [r4, #0]
 8004242:	f000 f9f7 	bl	8004634 <memchr>
 8004246:	b140      	cbz	r0, 800425a <_svfiprintf_r+0x152>
 8004248:	2340      	movs	r3, #64	; 0x40
 800424a:	eba0 000a 	sub.w	r0, r0, sl
 800424e:	fa03 f000 	lsl.w	r0, r3, r0
 8004252:	9b04      	ldr	r3, [sp, #16]
 8004254:	3401      	adds	r4, #1
 8004256:	4303      	orrs	r3, r0
 8004258:	9304      	str	r3, [sp, #16]
 800425a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800425e:	2206      	movs	r2, #6
 8004260:	4826      	ldr	r0, [pc, #152]	; (80042fc <_svfiprintf_r+0x1f4>)
 8004262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004266:	f000 f9e5 	bl	8004634 <memchr>
 800426a:	2800      	cmp	r0, #0
 800426c:	d038      	beq.n	80042e0 <_svfiprintf_r+0x1d8>
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <_svfiprintf_r+0x1f8>)
 8004270:	bb1b      	cbnz	r3, 80042ba <_svfiprintf_r+0x1b2>
 8004272:	9b03      	ldr	r3, [sp, #12]
 8004274:	3307      	adds	r3, #7
 8004276:	f023 0307 	bic.w	r3, r3, #7
 800427a:	3308      	adds	r3, #8
 800427c:	9303      	str	r3, [sp, #12]
 800427e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004280:	4433      	add	r3, r6
 8004282:	9309      	str	r3, [sp, #36]	; 0x24
 8004284:	e767      	b.n	8004156 <_svfiprintf_r+0x4e>
 8004286:	460c      	mov	r4, r1
 8004288:	2001      	movs	r0, #1
 800428a:	fb0c 3202 	mla	r2, ip, r2, r3
 800428e:	e7a5      	b.n	80041dc <_svfiprintf_r+0xd4>
 8004290:	2300      	movs	r3, #0
 8004292:	f04f 0c0a 	mov.w	ip, #10
 8004296:	4619      	mov	r1, r3
 8004298:	3401      	adds	r4, #1
 800429a:	9305      	str	r3, [sp, #20]
 800429c:	4620      	mov	r0, r4
 800429e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042a2:	3a30      	subs	r2, #48	; 0x30
 80042a4:	2a09      	cmp	r2, #9
 80042a6:	d903      	bls.n	80042b0 <_svfiprintf_r+0x1a8>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0c5      	beq.n	8004238 <_svfiprintf_r+0x130>
 80042ac:	9105      	str	r1, [sp, #20]
 80042ae:	e7c3      	b.n	8004238 <_svfiprintf_r+0x130>
 80042b0:	4604      	mov	r4, r0
 80042b2:	2301      	movs	r3, #1
 80042b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80042b8:	e7f0      	b.n	800429c <_svfiprintf_r+0x194>
 80042ba:	ab03      	add	r3, sp, #12
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	462a      	mov	r2, r5
 80042c0:	4638      	mov	r0, r7
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <_svfiprintf_r+0x1fc>)
 80042c4:	a904      	add	r1, sp, #16
 80042c6:	f3af 8000 	nop.w
 80042ca:	1c42      	adds	r2, r0, #1
 80042cc:	4606      	mov	r6, r0
 80042ce:	d1d6      	bne.n	800427e <_svfiprintf_r+0x176>
 80042d0:	89ab      	ldrh	r3, [r5, #12]
 80042d2:	065b      	lsls	r3, r3, #25
 80042d4:	f53f af2c 	bmi.w	8004130 <_svfiprintf_r+0x28>
 80042d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042da:	b01d      	add	sp, #116	; 0x74
 80042dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e0:	ab03      	add	r3, sp, #12
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	462a      	mov	r2, r5
 80042e6:	4638      	mov	r0, r7
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <_svfiprintf_r+0x1fc>)
 80042ea:	a904      	add	r1, sp, #16
 80042ec:	f000 f87c 	bl	80043e8 <_printf_i>
 80042f0:	e7eb      	b.n	80042ca <_svfiprintf_r+0x1c2>
 80042f2:	bf00      	nop
 80042f4:	0800494c 	.word	0x0800494c
 80042f8:	08004952 	.word	0x08004952
 80042fc:	08004956 	.word	0x08004956
 8004300:	00000000 	.word	0x00000000
 8004304:	08004051 	.word	0x08004051

08004308 <_printf_common>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	4616      	mov	r6, r2
 800430e:	4699      	mov	r9, r3
 8004310:	688a      	ldr	r2, [r1, #8]
 8004312:	690b      	ldr	r3, [r1, #16]
 8004314:	4607      	mov	r7, r0
 8004316:	4293      	cmp	r3, r2
 8004318:	bfb8      	it	lt
 800431a:	4613      	movlt	r3, r2
 800431c:	6033      	str	r3, [r6, #0]
 800431e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004322:	460c      	mov	r4, r1
 8004324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004328:	b10a      	cbz	r2, 800432e <_printf_common+0x26>
 800432a:	3301      	adds	r3, #1
 800432c:	6033      	str	r3, [r6, #0]
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	0699      	lsls	r1, r3, #26
 8004332:	bf42      	ittt	mi
 8004334:	6833      	ldrmi	r3, [r6, #0]
 8004336:	3302      	addmi	r3, #2
 8004338:	6033      	strmi	r3, [r6, #0]
 800433a:	6825      	ldr	r5, [r4, #0]
 800433c:	f015 0506 	ands.w	r5, r5, #6
 8004340:	d106      	bne.n	8004350 <_printf_common+0x48>
 8004342:	f104 0a19 	add.w	sl, r4, #25
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	6832      	ldr	r2, [r6, #0]
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	42ab      	cmp	r3, r5
 800434e:	dc28      	bgt.n	80043a2 <_printf_common+0x9a>
 8004350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004354:	1e13      	subs	r3, r2, #0
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	bf18      	it	ne
 800435a:	2301      	movne	r3, #1
 800435c:	0692      	lsls	r2, r2, #26
 800435e:	d42d      	bmi.n	80043bc <_printf_common+0xb4>
 8004360:	4649      	mov	r1, r9
 8004362:	4638      	mov	r0, r7
 8004364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004368:	47c0      	blx	r8
 800436a:	3001      	adds	r0, #1
 800436c:	d020      	beq.n	80043b0 <_printf_common+0xa8>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	68e5      	ldr	r5, [r4, #12]
 8004372:	f003 0306 	and.w	r3, r3, #6
 8004376:	2b04      	cmp	r3, #4
 8004378:	bf18      	it	ne
 800437a:	2500      	movne	r5, #0
 800437c:	6832      	ldr	r2, [r6, #0]
 800437e:	f04f 0600 	mov.w	r6, #0
 8004382:	68a3      	ldr	r3, [r4, #8]
 8004384:	bf08      	it	eq
 8004386:	1aad      	subeq	r5, r5, r2
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	bf08      	it	eq
 800438c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004390:	4293      	cmp	r3, r2
 8004392:	bfc4      	itt	gt
 8004394:	1a9b      	subgt	r3, r3, r2
 8004396:	18ed      	addgt	r5, r5, r3
 8004398:	341a      	adds	r4, #26
 800439a:	42b5      	cmp	r5, r6
 800439c:	d11a      	bne.n	80043d4 <_printf_common+0xcc>
 800439e:	2000      	movs	r0, #0
 80043a0:	e008      	b.n	80043b4 <_printf_common+0xac>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4652      	mov	r2, sl
 80043a6:	4649      	mov	r1, r9
 80043a8:	4638      	mov	r0, r7
 80043aa:	47c0      	blx	r8
 80043ac:	3001      	adds	r0, #1
 80043ae:	d103      	bne.n	80043b8 <_printf_common+0xb0>
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b8:	3501      	adds	r5, #1
 80043ba:	e7c4      	b.n	8004346 <_printf_common+0x3e>
 80043bc:	2030      	movs	r0, #48	; 0x30
 80043be:	18e1      	adds	r1, r4, r3
 80043c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ca:	4422      	add	r2, r4
 80043cc:	3302      	adds	r3, #2
 80043ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043d2:	e7c5      	b.n	8004360 <_printf_common+0x58>
 80043d4:	2301      	movs	r3, #1
 80043d6:	4622      	mov	r2, r4
 80043d8:	4649      	mov	r1, r9
 80043da:	4638      	mov	r0, r7
 80043dc:	47c0      	blx	r8
 80043de:	3001      	adds	r0, #1
 80043e0:	d0e6      	beq.n	80043b0 <_printf_common+0xa8>
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7d9      	b.n	800439a <_printf_common+0x92>
	...

080043e8 <_printf_i>:
 80043e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ec:	7e0f      	ldrb	r7, [r1, #24]
 80043ee:	4691      	mov	r9, r2
 80043f0:	2f78      	cmp	r7, #120	; 0x78
 80043f2:	4680      	mov	r8, r0
 80043f4:	460c      	mov	r4, r1
 80043f6:	469a      	mov	sl, r3
 80043f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043fe:	d807      	bhi.n	8004410 <_printf_i+0x28>
 8004400:	2f62      	cmp	r7, #98	; 0x62
 8004402:	d80a      	bhi.n	800441a <_printf_i+0x32>
 8004404:	2f00      	cmp	r7, #0
 8004406:	f000 80d9 	beq.w	80045bc <_printf_i+0x1d4>
 800440a:	2f58      	cmp	r7, #88	; 0x58
 800440c:	f000 80a4 	beq.w	8004558 <_printf_i+0x170>
 8004410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004418:	e03a      	b.n	8004490 <_printf_i+0xa8>
 800441a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800441e:	2b15      	cmp	r3, #21
 8004420:	d8f6      	bhi.n	8004410 <_printf_i+0x28>
 8004422:	a101      	add	r1, pc, #4	; (adr r1, 8004428 <_printf_i+0x40>)
 8004424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004428:	08004481 	.word	0x08004481
 800442c:	08004495 	.word	0x08004495
 8004430:	08004411 	.word	0x08004411
 8004434:	08004411 	.word	0x08004411
 8004438:	08004411 	.word	0x08004411
 800443c:	08004411 	.word	0x08004411
 8004440:	08004495 	.word	0x08004495
 8004444:	08004411 	.word	0x08004411
 8004448:	08004411 	.word	0x08004411
 800444c:	08004411 	.word	0x08004411
 8004450:	08004411 	.word	0x08004411
 8004454:	080045a3 	.word	0x080045a3
 8004458:	080044c5 	.word	0x080044c5
 800445c:	08004585 	.word	0x08004585
 8004460:	08004411 	.word	0x08004411
 8004464:	08004411 	.word	0x08004411
 8004468:	080045c5 	.word	0x080045c5
 800446c:	08004411 	.word	0x08004411
 8004470:	080044c5 	.word	0x080044c5
 8004474:	08004411 	.word	0x08004411
 8004478:	08004411 	.word	0x08004411
 800447c:	0800458d 	.word	0x0800458d
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	1d1a      	adds	r2, r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	602a      	str	r2, [r5, #0]
 8004488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800448c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004490:	2301      	movs	r3, #1
 8004492:	e0a4      	b.n	80045de <_printf_i+0x1f6>
 8004494:	6820      	ldr	r0, [r4, #0]
 8004496:	6829      	ldr	r1, [r5, #0]
 8004498:	0606      	lsls	r6, r0, #24
 800449a:	f101 0304 	add.w	r3, r1, #4
 800449e:	d50a      	bpl.n	80044b6 <_printf_i+0xce>
 80044a0:	680e      	ldr	r6, [r1, #0]
 80044a2:	602b      	str	r3, [r5, #0]
 80044a4:	2e00      	cmp	r6, #0
 80044a6:	da03      	bge.n	80044b0 <_printf_i+0xc8>
 80044a8:	232d      	movs	r3, #45	; 0x2d
 80044aa:	4276      	negs	r6, r6
 80044ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b0:	230a      	movs	r3, #10
 80044b2:	485e      	ldr	r0, [pc, #376]	; (800462c <_printf_i+0x244>)
 80044b4:	e019      	b.n	80044ea <_printf_i+0x102>
 80044b6:	680e      	ldr	r6, [r1, #0]
 80044b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	bf18      	it	ne
 80044c0:	b236      	sxthne	r6, r6
 80044c2:	e7ef      	b.n	80044a4 <_printf_i+0xbc>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	1d19      	adds	r1, r3, #4
 80044ca:	6029      	str	r1, [r5, #0]
 80044cc:	0601      	lsls	r1, r0, #24
 80044ce:	d501      	bpl.n	80044d4 <_printf_i+0xec>
 80044d0:	681e      	ldr	r6, [r3, #0]
 80044d2:	e002      	b.n	80044da <_printf_i+0xf2>
 80044d4:	0646      	lsls	r6, r0, #25
 80044d6:	d5fb      	bpl.n	80044d0 <_printf_i+0xe8>
 80044d8:	881e      	ldrh	r6, [r3, #0]
 80044da:	2f6f      	cmp	r7, #111	; 0x6f
 80044dc:	bf0c      	ite	eq
 80044de:	2308      	moveq	r3, #8
 80044e0:	230a      	movne	r3, #10
 80044e2:	4852      	ldr	r0, [pc, #328]	; (800462c <_printf_i+0x244>)
 80044e4:	2100      	movs	r1, #0
 80044e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044ea:	6865      	ldr	r5, [r4, #4]
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	bfa8      	it	ge
 80044f0:	6821      	ldrge	r1, [r4, #0]
 80044f2:	60a5      	str	r5, [r4, #8]
 80044f4:	bfa4      	itt	ge
 80044f6:	f021 0104 	bicge.w	r1, r1, #4
 80044fa:	6021      	strge	r1, [r4, #0]
 80044fc:	b90e      	cbnz	r6, 8004502 <_printf_i+0x11a>
 80044fe:	2d00      	cmp	r5, #0
 8004500:	d04d      	beq.n	800459e <_printf_i+0x1b6>
 8004502:	4615      	mov	r5, r2
 8004504:	fbb6 f1f3 	udiv	r1, r6, r3
 8004508:	fb03 6711 	mls	r7, r3, r1, r6
 800450c:	5dc7      	ldrb	r7, [r0, r7]
 800450e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004512:	4637      	mov	r7, r6
 8004514:	42bb      	cmp	r3, r7
 8004516:	460e      	mov	r6, r1
 8004518:	d9f4      	bls.n	8004504 <_printf_i+0x11c>
 800451a:	2b08      	cmp	r3, #8
 800451c:	d10b      	bne.n	8004536 <_printf_i+0x14e>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	07de      	lsls	r6, r3, #31
 8004522:	d508      	bpl.n	8004536 <_printf_i+0x14e>
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	6861      	ldr	r1, [r4, #4]
 8004528:	4299      	cmp	r1, r3
 800452a:	bfde      	ittt	le
 800452c:	2330      	movle	r3, #48	; 0x30
 800452e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004532:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004536:	1b52      	subs	r2, r2, r5
 8004538:	6122      	str	r2, [r4, #16]
 800453a:	464b      	mov	r3, r9
 800453c:	4621      	mov	r1, r4
 800453e:	4640      	mov	r0, r8
 8004540:	f8cd a000 	str.w	sl, [sp]
 8004544:	aa03      	add	r2, sp, #12
 8004546:	f7ff fedf 	bl	8004308 <_printf_common>
 800454a:	3001      	adds	r0, #1
 800454c:	d14c      	bne.n	80045e8 <_printf_i+0x200>
 800454e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004552:	b004      	add	sp, #16
 8004554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004558:	4834      	ldr	r0, [pc, #208]	; (800462c <_printf_i+0x244>)
 800455a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800455e:	6829      	ldr	r1, [r5, #0]
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	f851 6b04 	ldr.w	r6, [r1], #4
 8004566:	6029      	str	r1, [r5, #0]
 8004568:	061d      	lsls	r5, r3, #24
 800456a:	d514      	bpl.n	8004596 <_printf_i+0x1ae>
 800456c:	07df      	lsls	r7, r3, #31
 800456e:	bf44      	itt	mi
 8004570:	f043 0320 	orrmi.w	r3, r3, #32
 8004574:	6023      	strmi	r3, [r4, #0]
 8004576:	b91e      	cbnz	r6, 8004580 <_printf_i+0x198>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	f023 0320 	bic.w	r3, r3, #32
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	2310      	movs	r3, #16
 8004582:	e7af      	b.n	80044e4 <_printf_i+0xfc>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	f043 0320 	orr.w	r3, r3, #32
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	2378      	movs	r3, #120	; 0x78
 800458e:	4828      	ldr	r0, [pc, #160]	; (8004630 <_printf_i+0x248>)
 8004590:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004594:	e7e3      	b.n	800455e <_printf_i+0x176>
 8004596:	0659      	lsls	r1, r3, #25
 8004598:	bf48      	it	mi
 800459a:	b2b6      	uxthmi	r6, r6
 800459c:	e7e6      	b.n	800456c <_printf_i+0x184>
 800459e:	4615      	mov	r5, r2
 80045a0:	e7bb      	b.n	800451a <_printf_i+0x132>
 80045a2:	682b      	ldr	r3, [r5, #0]
 80045a4:	6826      	ldr	r6, [r4, #0]
 80045a6:	1d18      	adds	r0, r3, #4
 80045a8:	6961      	ldr	r1, [r4, #20]
 80045aa:	6028      	str	r0, [r5, #0]
 80045ac:	0635      	lsls	r5, r6, #24
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	d501      	bpl.n	80045b6 <_printf_i+0x1ce>
 80045b2:	6019      	str	r1, [r3, #0]
 80045b4:	e002      	b.n	80045bc <_printf_i+0x1d4>
 80045b6:	0670      	lsls	r0, r6, #25
 80045b8:	d5fb      	bpl.n	80045b2 <_printf_i+0x1ca>
 80045ba:	8019      	strh	r1, [r3, #0]
 80045bc:	2300      	movs	r3, #0
 80045be:	4615      	mov	r5, r2
 80045c0:	6123      	str	r3, [r4, #16]
 80045c2:	e7ba      	b.n	800453a <_printf_i+0x152>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	2100      	movs	r1, #0
 80045c8:	1d1a      	adds	r2, r3, #4
 80045ca:	602a      	str	r2, [r5, #0]
 80045cc:	681d      	ldr	r5, [r3, #0]
 80045ce:	6862      	ldr	r2, [r4, #4]
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 f82f 	bl	8004634 <memchr>
 80045d6:	b108      	cbz	r0, 80045dc <_printf_i+0x1f4>
 80045d8:	1b40      	subs	r0, r0, r5
 80045da:	6060      	str	r0, [r4, #4]
 80045dc:	6863      	ldr	r3, [r4, #4]
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	2300      	movs	r3, #0
 80045e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e6:	e7a8      	b.n	800453a <_printf_i+0x152>
 80045e8:	462a      	mov	r2, r5
 80045ea:	4649      	mov	r1, r9
 80045ec:	4640      	mov	r0, r8
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	47d0      	blx	sl
 80045f2:	3001      	adds	r0, #1
 80045f4:	d0ab      	beq.n	800454e <_printf_i+0x166>
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	079b      	lsls	r3, r3, #30
 80045fa:	d413      	bmi.n	8004624 <_printf_i+0x23c>
 80045fc:	68e0      	ldr	r0, [r4, #12]
 80045fe:	9b03      	ldr	r3, [sp, #12]
 8004600:	4298      	cmp	r0, r3
 8004602:	bfb8      	it	lt
 8004604:	4618      	movlt	r0, r3
 8004606:	e7a4      	b.n	8004552 <_printf_i+0x16a>
 8004608:	2301      	movs	r3, #1
 800460a:	4632      	mov	r2, r6
 800460c:	4649      	mov	r1, r9
 800460e:	4640      	mov	r0, r8
 8004610:	47d0      	blx	sl
 8004612:	3001      	adds	r0, #1
 8004614:	d09b      	beq.n	800454e <_printf_i+0x166>
 8004616:	3501      	adds	r5, #1
 8004618:	68e3      	ldr	r3, [r4, #12]
 800461a:	9903      	ldr	r1, [sp, #12]
 800461c:	1a5b      	subs	r3, r3, r1
 800461e:	42ab      	cmp	r3, r5
 8004620:	dcf2      	bgt.n	8004608 <_printf_i+0x220>
 8004622:	e7eb      	b.n	80045fc <_printf_i+0x214>
 8004624:	2500      	movs	r5, #0
 8004626:	f104 0619 	add.w	r6, r4, #25
 800462a:	e7f5      	b.n	8004618 <_printf_i+0x230>
 800462c:	0800495d 	.word	0x0800495d
 8004630:	0800496e 	.word	0x0800496e

08004634 <memchr>:
 8004634:	4603      	mov	r3, r0
 8004636:	b510      	push	{r4, lr}
 8004638:	b2c9      	uxtb	r1, r1
 800463a:	4402      	add	r2, r0
 800463c:	4293      	cmp	r3, r2
 800463e:	4618      	mov	r0, r3
 8004640:	d101      	bne.n	8004646 <memchr+0x12>
 8004642:	2000      	movs	r0, #0
 8004644:	e003      	b.n	800464e <memchr+0x1a>
 8004646:	7804      	ldrb	r4, [r0, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	428c      	cmp	r4, r1
 800464c:	d1f6      	bne.n	800463c <memchr+0x8>
 800464e:	bd10      	pop	{r4, pc}

08004650 <memcpy>:
 8004650:	440a      	add	r2, r1
 8004652:	4291      	cmp	r1, r2
 8004654:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004658:	d100      	bne.n	800465c <memcpy+0xc>
 800465a:	4770      	bx	lr
 800465c:	b510      	push	{r4, lr}
 800465e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004662:	4291      	cmp	r1, r2
 8004664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004668:	d1f9      	bne.n	800465e <memcpy+0xe>
 800466a:	bd10      	pop	{r4, pc}

0800466c <memmove>:
 800466c:	4288      	cmp	r0, r1
 800466e:	b510      	push	{r4, lr}
 8004670:	eb01 0402 	add.w	r4, r1, r2
 8004674:	d902      	bls.n	800467c <memmove+0x10>
 8004676:	4284      	cmp	r4, r0
 8004678:	4623      	mov	r3, r4
 800467a:	d807      	bhi.n	800468c <memmove+0x20>
 800467c:	1e43      	subs	r3, r0, #1
 800467e:	42a1      	cmp	r1, r4
 8004680:	d008      	beq.n	8004694 <memmove+0x28>
 8004682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800468a:	e7f8      	b.n	800467e <memmove+0x12>
 800468c:	4601      	mov	r1, r0
 800468e:	4402      	add	r2, r0
 8004690:	428a      	cmp	r2, r1
 8004692:	d100      	bne.n	8004696 <memmove+0x2a>
 8004694:	bd10      	pop	{r4, pc}
 8004696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800469a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800469e:	e7f7      	b.n	8004690 <memmove+0x24>

080046a0 <_free_r>:
 80046a0:	b538      	push	{r3, r4, r5, lr}
 80046a2:	4605      	mov	r5, r0
 80046a4:	2900      	cmp	r1, #0
 80046a6:	d040      	beq.n	800472a <_free_r+0x8a>
 80046a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ac:	1f0c      	subs	r4, r1, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bfb8      	it	lt
 80046b2:	18e4      	addlt	r4, r4, r3
 80046b4:	f000 f910 	bl	80048d8 <__malloc_lock>
 80046b8:	4a1c      	ldr	r2, [pc, #112]	; (800472c <_free_r+0x8c>)
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	b933      	cbnz	r3, 80046cc <_free_r+0x2c>
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	6014      	str	r4, [r2, #0]
 80046c2:	4628      	mov	r0, r5
 80046c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c8:	f000 b90c 	b.w	80048e4 <__malloc_unlock>
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	d908      	bls.n	80046e2 <_free_r+0x42>
 80046d0:	6820      	ldr	r0, [r4, #0]
 80046d2:	1821      	adds	r1, r4, r0
 80046d4:	428b      	cmp	r3, r1
 80046d6:	bf01      	itttt	eq
 80046d8:	6819      	ldreq	r1, [r3, #0]
 80046da:	685b      	ldreq	r3, [r3, #4]
 80046dc:	1809      	addeq	r1, r1, r0
 80046de:	6021      	streq	r1, [r4, #0]
 80046e0:	e7ed      	b.n	80046be <_free_r+0x1e>
 80046e2:	461a      	mov	r2, r3
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b10b      	cbz	r3, 80046ec <_free_r+0x4c>
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d9fa      	bls.n	80046e2 <_free_r+0x42>
 80046ec:	6811      	ldr	r1, [r2, #0]
 80046ee:	1850      	adds	r0, r2, r1
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d10b      	bne.n	800470c <_free_r+0x6c>
 80046f4:	6820      	ldr	r0, [r4, #0]
 80046f6:	4401      	add	r1, r0
 80046f8:	1850      	adds	r0, r2, r1
 80046fa:	4283      	cmp	r3, r0
 80046fc:	6011      	str	r1, [r2, #0]
 80046fe:	d1e0      	bne.n	80046c2 <_free_r+0x22>
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4401      	add	r1, r0
 8004706:	6011      	str	r1, [r2, #0]
 8004708:	6053      	str	r3, [r2, #4]
 800470a:	e7da      	b.n	80046c2 <_free_r+0x22>
 800470c:	d902      	bls.n	8004714 <_free_r+0x74>
 800470e:	230c      	movs	r3, #12
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	e7d6      	b.n	80046c2 <_free_r+0x22>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	1821      	adds	r1, r4, r0
 8004718:	428b      	cmp	r3, r1
 800471a:	bf01      	itttt	eq
 800471c:	6819      	ldreq	r1, [r3, #0]
 800471e:	685b      	ldreq	r3, [r3, #4]
 8004720:	1809      	addeq	r1, r1, r0
 8004722:	6021      	streq	r1, [r4, #0]
 8004724:	6063      	str	r3, [r4, #4]
 8004726:	6054      	str	r4, [r2, #4]
 8004728:	e7cb      	b.n	80046c2 <_free_r+0x22>
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200000f0 	.word	0x200000f0

08004730 <sbrk_aligned>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4e0e      	ldr	r6, [pc, #56]	; (800476c <sbrk_aligned+0x3c>)
 8004734:	460c      	mov	r4, r1
 8004736:	6831      	ldr	r1, [r6, #0]
 8004738:	4605      	mov	r5, r0
 800473a:	b911      	cbnz	r1, 8004742 <sbrk_aligned+0x12>
 800473c:	f000 f8bc 	bl	80048b8 <_sbrk_r>
 8004740:	6030      	str	r0, [r6, #0]
 8004742:	4621      	mov	r1, r4
 8004744:	4628      	mov	r0, r5
 8004746:	f000 f8b7 	bl	80048b8 <_sbrk_r>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	d00a      	beq.n	8004764 <sbrk_aligned+0x34>
 800474e:	1cc4      	adds	r4, r0, #3
 8004750:	f024 0403 	bic.w	r4, r4, #3
 8004754:	42a0      	cmp	r0, r4
 8004756:	d007      	beq.n	8004768 <sbrk_aligned+0x38>
 8004758:	1a21      	subs	r1, r4, r0
 800475a:	4628      	mov	r0, r5
 800475c:	f000 f8ac 	bl	80048b8 <_sbrk_r>
 8004760:	3001      	adds	r0, #1
 8004762:	d101      	bne.n	8004768 <sbrk_aligned+0x38>
 8004764:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004768:	4620      	mov	r0, r4
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	200000f4 	.word	0x200000f4

08004770 <_malloc_r>:
 8004770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004774:	1ccd      	adds	r5, r1, #3
 8004776:	f025 0503 	bic.w	r5, r5, #3
 800477a:	3508      	adds	r5, #8
 800477c:	2d0c      	cmp	r5, #12
 800477e:	bf38      	it	cc
 8004780:	250c      	movcc	r5, #12
 8004782:	2d00      	cmp	r5, #0
 8004784:	4607      	mov	r7, r0
 8004786:	db01      	blt.n	800478c <_malloc_r+0x1c>
 8004788:	42a9      	cmp	r1, r5
 800478a:	d905      	bls.n	8004798 <_malloc_r+0x28>
 800478c:	230c      	movs	r3, #12
 800478e:	2600      	movs	r6, #0
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4630      	mov	r0, r6
 8004794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004798:	4e2e      	ldr	r6, [pc, #184]	; (8004854 <_malloc_r+0xe4>)
 800479a:	f000 f89d 	bl	80048d8 <__malloc_lock>
 800479e:	6833      	ldr	r3, [r6, #0]
 80047a0:	461c      	mov	r4, r3
 80047a2:	bb34      	cbnz	r4, 80047f2 <_malloc_r+0x82>
 80047a4:	4629      	mov	r1, r5
 80047a6:	4638      	mov	r0, r7
 80047a8:	f7ff ffc2 	bl	8004730 <sbrk_aligned>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	4604      	mov	r4, r0
 80047b0:	d14d      	bne.n	800484e <_malloc_r+0xde>
 80047b2:	6834      	ldr	r4, [r6, #0]
 80047b4:	4626      	mov	r6, r4
 80047b6:	2e00      	cmp	r6, #0
 80047b8:	d140      	bne.n	800483c <_malloc_r+0xcc>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	4631      	mov	r1, r6
 80047be:	4638      	mov	r0, r7
 80047c0:	eb04 0803 	add.w	r8, r4, r3
 80047c4:	f000 f878 	bl	80048b8 <_sbrk_r>
 80047c8:	4580      	cmp	r8, r0
 80047ca:	d13a      	bne.n	8004842 <_malloc_r+0xd2>
 80047cc:	6821      	ldr	r1, [r4, #0]
 80047ce:	3503      	adds	r5, #3
 80047d0:	1a6d      	subs	r5, r5, r1
 80047d2:	f025 0503 	bic.w	r5, r5, #3
 80047d6:	3508      	adds	r5, #8
 80047d8:	2d0c      	cmp	r5, #12
 80047da:	bf38      	it	cc
 80047dc:	250c      	movcc	r5, #12
 80047de:	4638      	mov	r0, r7
 80047e0:	4629      	mov	r1, r5
 80047e2:	f7ff ffa5 	bl	8004730 <sbrk_aligned>
 80047e6:	3001      	adds	r0, #1
 80047e8:	d02b      	beq.n	8004842 <_malloc_r+0xd2>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	442b      	add	r3, r5
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	e00e      	b.n	8004810 <_malloc_r+0xa0>
 80047f2:	6822      	ldr	r2, [r4, #0]
 80047f4:	1b52      	subs	r2, r2, r5
 80047f6:	d41e      	bmi.n	8004836 <_malloc_r+0xc6>
 80047f8:	2a0b      	cmp	r2, #11
 80047fa:	d916      	bls.n	800482a <_malloc_r+0xba>
 80047fc:	1961      	adds	r1, r4, r5
 80047fe:	42a3      	cmp	r3, r4
 8004800:	6025      	str	r5, [r4, #0]
 8004802:	bf18      	it	ne
 8004804:	6059      	strne	r1, [r3, #4]
 8004806:	6863      	ldr	r3, [r4, #4]
 8004808:	bf08      	it	eq
 800480a:	6031      	streq	r1, [r6, #0]
 800480c:	5162      	str	r2, [r4, r5]
 800480e:	604b      	str	r3, [r1, #4]
 8004810:	4638      	mov	r0, r7
 8004812:	f104 060b 	add.w	r6, r4, #11
 8004816:	f000 f865 	bl	80048e4 <__malloc_unlock>
 800481a:	f026 0607 	bic.w	r6, r6, #7
 800481e:	1d23      	adds	r3, r4, #4
 8004820:	1af2      	subs	r2, r6, r3
 8004822:	d0b6      	beq.n	8004792 <_malloc_r+0x22>
 8004824:	1b9b      	subs	r3, r3, r6
 8004826:	50a3      	str	r3, [r4, r2]
 8004828:	e7b3      	b.n	8004792 <_malloc_r+0x22>
 800482a:	6862      	ldr	r2, [r4, #4]
 800482c:	42a3      	cmp	r3, r4
 800482e:	bf0c      	ite	eq
 8004830:	6032      	streq	r2, [r6, #0]
 8004832:	605a      	strne	r2, [r3, #4]
 8004834:	e7ec      	b.n	8004810 <_malloc_r+0xa0>
 8004836:	4623      	mov	r3, r4
 8004838:	6864      	ldr	r4, [r4, #4]
 800483a:	e7b2      	b.n	80047a2 <_malloc_r+0x32>
 800483c:	4634      	mov	r4, r6
 800483e:	6876      	ldr	r6, [r6, #4]
 8004840:	e7b9      	b.n	80047b6 <_malloc_r+0x46>
 8004842:	230c      	movs	r3, #12
 8004844:	4638      	mov	r0, r7
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	f000 f84c 	bl	80048e4 <__malloc_unlock>
 800484c:	e7a1      	b.n	8004792 <_malloc_r+0x22>
 800484e:	6025      	str	r5, [r4, #0]
 8004850:	e7de      	b.n	8004810 <_malloc_r+0xa0>
 8004852:	bf00      	nop
 8004854:	200000f0 	.word	0x200000f0

08004858 <_realloc_r>:
 8004858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	4680      	mov	r8, r0
 800485e:	4614      	mov	r4, r2
 8004860:	460e      	mov	r6, r1
 8004862:	b921      	cbnz	r1, 800486e <_realloc_r+0x16>
 8004864:	4611      	mov	r1, r2
 8004866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800486a:	f7ff bf81 	b.w	8004770 <_malloc_r>
 800486e:	b92a      	cbnz	r2, 800487c <_realloc_r+0x24>
 8004870:	f7ff ff16 	bl	80046a0 <_free_r>
 8004874:	4625      	mov	r5, r4
 8004876:	4628      	mov	r0, r5
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	f000 f838 	bl	80048f0 <_malloc_usable_size_r>
 8004880:	4284      	cmp	r4, r0
 8004882:	4607      	mov	r7, r0
 8004884:	d802      	bhi.n	800488c <_realloc_r+0x34>
 8004886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800488a:	d812      	bhi.n	80048b2 <_realloc_r+0x5a>
 800488c:	4621      	mov	r1, r4
 800488e:	4640      	mov	r0, r8
 8004890:	f7ff ff6e 	bl	8004770 <_malloc_r>
 8004894:	4605      	mov	r5, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	d0ed      	beq.n	8004876 <_realloc_r+0x1e>
 800489a:	42bc      	cmp	r4, r7
 800489c:	4622      	mov	r2, r4
 800489e:	4631      	mov	r1, r6
 80048a0:	bf28      	it	cs
 80048a2:	463a      	movcs	r2, r7
 80048a4:	f7ff fed4 	bl	8004650 <memcpy>
 80048a8:	4631      	mov	r1, r6
 80048aa:	4640      	mov	r0, r8
 80048ac:	f7ff fef8 	bl	80046a0 <_free_r>
 80048b0:	e7e1      	b.n	8004876 <_realloc_r+0x1e>
 80048b2:	4635      	mov	r5, r6
 80048b4:	e7df      	b.n	8004876 <_realloc_r+0x1e>
	...

080048b8 <_sbrk_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	2300      	movs	r3, #0
 80048bc:	4d05      	ldr	r5, [pc, #20]	; (80048d4 <_sbrk_r+0x1c>)
 80048be:	4604      	mov	r4, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	602b      	str	r3, [r5, #0]
 80048c4:	f7fb fe2e 	bl	8000524 <_sbrk>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_sbrk_r+0x1a>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_sbrk_r+0x1a>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	200000f8 	.word	0x200000f8

080048d8 <__malloc_lock>:
 80048d8:	4801      	ldr	r0, [pc, #4]	; (80048e0 <__malloc_lock+0x8>)
 80048da:	f000 b811 	b.w	8004900 <__retarget_lock_acquire_recursive>
 80048de:	bf00      	nop
 80048e0:	200000fc 	.word	0x200000fc

080048e4 <__malloc_unlock>:
 80048e4:	4801      	ldr	r0, [pc, #4]	; (80048ec <__malloc_unlock+0x8>)
 80048e6:	f000 b80c 	b.w	8004902 <__retarget_lock_release_recursive>
 80048ea:	bf00      	nop
 80048ec:	200000fc 	.word	0x200000fc

080048f0 <_malloc_usable_size_r>:
 80048f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f4:	1f18      	subs	r0, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bfbc      	itt	lt
 80048fa:	580b      	ldrlt	r3, [r1, r0]
 80048fc:	18c0      	addlt	r0, r0, r3
 80048fe:	4770      	bx	lr

08004900 <__retarget_lock_acquire_recursive>:
 8004900:	4770      	bx	lr

08004902 <__retarget_lock_release_recursive>:
 8004902:	4770      	bx	lr

08004904 <_init>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr

08004910 <_fini>:
 8004910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004912:	bf00      	nop
 8004914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004916:	bc08      	pop	{r3}
 8004918:	469e      	mov	lr, r3
 800491a:	4770      	bx	lr
