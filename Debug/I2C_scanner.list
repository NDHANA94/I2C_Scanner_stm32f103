
I2C_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004940  08004940  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004940  08004940  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004940  08004940  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200000a0  080049e8  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080049e8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000946a  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b57  00000000  00000000  00029533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002ba30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001792e  00000000  00000000  0002c330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c203  00000000  00000000  00043c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a32  00000000  00000000  0004fe61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a6c  00000000  00000000  000d48e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080048c4 	.word	0x080048c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080048c4 	.word	0x080048c4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001ac:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ae:	4a13      	ldr	r2, [pc, #76]	; (80001fc <MX_I2C1_Init+0x54>)
 80001b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001b2:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001b4:	4a12      	ldr	r2, [pc, #72]	; (8000200 <MX_I2C1_Init+0x58>)
 80001b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001e6:	f000 fe31 	bl	8000e4c <HAL_I2C_Init>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80001f0:	f000 f8fb 	bl	80003ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	200000bc 	.word	0x200000bc
 80001fc:	40005400 	.word	0x40005400
 8000200:	000186a0 	.word	0x000186a0

08000204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a1d      	ldr	r2, [pc, #116]	; (8000294 <HAL_I2C_MspInit+0x90>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d133      	bne.n	800028c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <HAL_I2C_MspInit+0x94>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b19      	ldr	r3, [pc, #100]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800023c:	23c0      	movs	r3, #192	; 0xc0
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000240:	2312      	movs	r3, #18
 8000242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000244:	2303      	movs	r3, #3
 8000246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	4813      	ldr	r0, [pc, #76]	; (800029c <HAL_I2C_MspInit+0x98>)
 8000250:	f000 fc78 	bl	8000b44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a0f      	ldr	r2, [pc, #60]	; (8000298 <HAL_I2C_MspInit+0x94>)
 800025a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800025e:	61d3      	str	r3, [r2, #28]
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <HAL_I2C_MspInit+0x94>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000268:	60bb      	str	r3, [r7, #8]
 800026a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800026c:	2200      	movs	r2, #0
 800026e:	2100      	movs	r1, #0
 8000270:	201f      	movs	r0, #31
 8000272:	f000 fb74 	bl	800095e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000276:	201f      	movs	r0, #31
 8000278:	f000 fb8d 	bl	8000996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	2100      	movs	r1, #0
 8000280:	2020      	movs	r0, #32
 8000282:	f000 fb6c 	bl	800095e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000286:	2020      	movs	r0, #32
 8000288:	f000 fb85 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800028c:	bf00      	nop
 800028e:	3720      	adds	r7, #32
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40005400 	.word	0x40005400
 8000298:	40021000 	.word	0x40021000
 800029c:	40010c00 	.word	0x40010c00

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f000 f9fd 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f859 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f7ff ff4d 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 80002b2:	f7ff ff79 	bl	80001a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80002b6:	f000 f951 	bl	800055c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* I2C scan begin */
  HAL_Delay(1000);
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f000 fa53 	bl	8000768 <HAL_Delay>
  uint8_t i = 0, ret;
 80002c2:	2300      	movs	r3, #0
 80002c4:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 80002c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80002ca:	221d      	movs	r2, #29
 80002cc:	491d      	ldr	r1, [pc, #116]	; (8000344 <main+0xa4>)
 80002ce:	481e      	ldr	r0, [pc, #120]	; (8000348 <main+0xa8>)
 80002d0:	f003 f9c1 	bl	8003656 <HAL_UART_Transmit>
  for(i=0; i<128; i++){
 80002d4:	2300      	movs	r3, #0
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	e028      	b.n	800032c <main+0x8c>
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	b299      	uxth	r1, r3
 80002e2:	2305      	movs	r3, #5
 80002e4:	2203      	movs	r2, #3
 80002e6:	4819      	ldr	r0, [pc, #100]	; (800034c <main+0xac>)
 80002e8:	f000 fef4 	bl	80010d4 <HAL_I2C_IsDeviceReady>
 80002ec:	4603      	mov	r3, r0
 80002ee:	71bb      	strb	r3, [r7, #6]
	  if (ret != HAL_OK) // No ACK received at the address
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d007      	beq.n	8000306 <main+0x66>
	  {
		  HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80002f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80002fa:	2204      	movs	r2, #4
 80002fc:	4914      	ldr	r1, [pc, #80]	; (8000350 <main+0xb0>)
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <main+0xa8>)
 8000300:	f003 f9a9 	bl	8003656 <HAL_UART_Transmit>
 8000304:	e00f      	b.n	8000326 <main+0x86>
	  }
	  else if (ret == HAL_OK)
 8000306:	79bb      	ldrb	r3, [r7, #6]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d10c      	bne.n	8000326 <main+0x86>
	  {
		  sprintf(Buffer, "0x%X", i);
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	461a      	mov	r2, r3
 8000310:	4910      	ldr	r1, [pc, #64]	; (8000354 <main+0xb4>)
 8000312:	4811      	ldr	r0, [pc, #68]	; (8000358 <main+0xb8>)
 8000314:	f003 fe5c 	bl	8003fd0 <siprintf>
		  HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 8000318:	f242 7310 	movw	r3, #10000	; 0x2710
 800031c:	2219      	movs	r2, #25
 800031e:	490e      	ldr	r1, [pc, #56]	; (8000358 <main+0xb8>)
 8000320:	4809      	ldr	r0, [pc, #36]	; (8000348 <main+0xa8>)
 8000322:	f003 f998 	bl	8003656 <HAL_UART_Transmit>
  for(i=0; i<128; i++){
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	3301      	adds	r3, #1
 800032a:	71fb      	strb	r3, [r7, #7]
 800032c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	dad2      	bge.n	80002da <main+0x3a>
	  }
  }
  HAL_UART_Transmit(&huart1, EndMsg, sizeof(EndMsg), 10000);
 8000334:	f242 7310 	movw	r3, #10000	; 0x2710
 8000338:	220b      	movs	r2, #11
 800033a:	4908      	ldr	r1, [pc, #32]	; (800035c <main+0xbc>)
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <main+0xa8>)
 800033e:	f003 f98a 	bl	8003656 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000342:	e7fe      	b.n	8000342 <main+0xa2>
 8000344:	20000004 	.word	0x20000004
 8000348:	20000130 	.word	0x20000130
 800034c:	200000bc 	.word	0x200000bc
 8000350:	20000000 	.word	0x20000000
 8000354:	080048dc 	.word	0x080048dc
 8000358:	20000110 	.word	0x20000110
 800035c:	20000024 	.word	0x20000024

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b090      	sub	sp, #64	; 0x40
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f003 fe26 	bl	8003fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000382:	2301      	movs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000390:	2301      	movs	r3, #1
 8000392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000394:	2302      	movs	r3, #2
 8000396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800039e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 fced 	bl	8002d88 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003b4:	f000 f819 	bl	80003ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2302      	movs	r3, #2
 80003be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 ff5a 	bl	800328c <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003de:	f000 f804 	bl	80003ea <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	; 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ee:	b672      	cpsid	i
}
 80003f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800045c:	e7fe      	b.n	800045c <NMI_Handler+0x4>

0800045e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <MemManage_Handler+0x4>

0800046a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <UsageFault_Handler+0x4>

08000476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049e:	f000 f947 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <I2C1_EV_IRQHandler+0x10>)
 80004ae:	f000 ff3f 	bl	8001330 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200000bc 	.word	0x200000bc

080004bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <I2C1_ER_IRQHandler+0x10>)
 80004c2:	f001 f8a6 	bl	8001612 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000bc 	.word	0x200000bc

080004d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <USART1_IRQHandler+0x10>)
 80004d6:	f003 f951 	bl	800377c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000130 	.word	0x20000130

080004e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <_sbrk+0x5c>)
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <_sbrk+0x60>)
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <_sbrk+0x64>)
 8000502:	4a12      	ldr	r2, [pc, #72]	; (800054c <_sbrk+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <_sbrk+0x64>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	429a      	cmp	r2, r3
 8000512:	d207      	bcs.n	8000524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000514:	f003 fd2a 	bl	8003f6c <__errno>
 8000518:	4603      	mov	r3, r0
 800051a:	220c      	movs	r2, #12
 800051c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000522:	e009      	b.n	8000538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <_sbrk+0x64>)
 8000534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20005000 	.word	0x20005000
 8000544:	00000400 	.word	0x00000400
 8000548:	2000012c 	.word	0x2000012c
 800054c:	20000188 	.word	0x20000188

08000550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <MX_USART1_UART_Init+0x50>)
 8000564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800056c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000582:	220c      	movs	r2, #12
 8000584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000594:	f003 f812 	bl	80035bc <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800059e:	f7ff ff24 	bl	80003ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000130 	.word	0x20000130
 80005ac:	40013800 	.word	0x40013800

080005b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a20      	ldr	r2, [pc, #128]	; (800064c <HAL_UART_MspInit+0x9c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d139      	bne.n	8000644 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <HAL_UART_MspInit+0xa0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <HAL_UART_MspInit+0xa0>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <HAL_UART_MspInit+0xa0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <HAL_UART_MspInit+0xa0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a18      	ldr	r2, [pc, #96]	; (8000650 <HAL_UART_MspInit+0xa0>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <HAL_UART_MspInit+0xa0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	480f      	ldr	r0, [pc, #60]	; (8000654 <HAL_UART_MspInit+0xa4>)
 8000616:	f000 fa95 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <HAL_UART_MspInit+0xa4>)
 8000630:	f000 fa88 	bl	8000b44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	2100      	movs	r1, #0
 8000638:	2025      	movs	r0, #37	; 0x25
 800063a:	f000 f990 	bl	800095e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800063e:	2025      	movs	r0, #37	; 0x25
 8000640:	f000 f9a9 	bl	8000996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40013800 	.word	0x40013800
 8000650:	40021000 	.word	0x40021000
 8000654:	40010800 	.word	0x40010800

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	; (800069c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800067e:	f7ff ff67 	bl	8000550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000682:	f003 fc79 	bl	8003f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fe0b 	bl	80002a0 <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000694:	08004948 	.word	0x08004948
  ldr r2, =_sbss
 8000698:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800069c:	20000188 	.word	0x20000188

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f947 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff fe98 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f95f 	bl	80009b2 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800070c:	f000 f927 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000030 	.word	0x20000030
 8000728:	20000038 	.word	0x20000038
 800072c:	20000034 	.word	0x20000034

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000038 	.word	0x20000038
 8000750:	20000174 	.word	0x20000174

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000174 	.word	0x20000174

08000768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff0 	bl	8000754 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffe0 	bl	8000754 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000038 	.word	0x20000038

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <__NVIC_EnableIRQ+0x34>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000928:	f7ff ff90 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff2d 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff42 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff90 	bl	80008a0 <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5f 	bl	800084c <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff35 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffa2 	bl	8000904 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b085      	sub	sp, #20
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d008      	beq.n	80009f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2204      	movs	r2, #4
 80009e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e020      	b.n	8000a34 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 020e 	bic.w	r2, r2, #14
 8000a00:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f022 0201 	bic.w	r2, r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2201      	movs	r2, #1
 8000a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
	...

08000a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d005      	beq.n	8000a62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2204      	movs	r2, #4
 8000a5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	e051      	b.n	8000b06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 020e 	bic.w	r2, r2, #14
 8000a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0201 	bic.w	r2, r2, #1
 8000a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <HAL_DMA_Abort_IT+0xd0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d029      	beq.n	8000ae0 <HAL_DMA_Abort_IT+0xa0>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a20      	ldr	r2, [pc, #128]	; (8000b14 <HAL_DMA_Abort_IT+0xd4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d022      	beq.n	8000adc <HAL_DMA_Abort_IT+0x9c>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <HAL_DMA_Abort_IT+0xd8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d01a      	beq.n	8000ad6 <HAL_DMA_Abort_IT+0x96>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <HAL_DMA_Abort_IT+0xdc>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d012      	beq.n	8000ad0 <HAL_DMA_Abort_IT+0x90>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <HAL_DMA_Abort_IT+0xe0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d00a      	beq.n	8000aca <HAL_DMA_Abort_IT+0x8a>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <HAL_DMA_Abort_IT+0xe4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d102      	bne.n	8000ac4 <HAL_DMA_Abort_IT+0x84>
 8000abe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ac2:	e00e      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xa2>
 8000ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac8:	e00b      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xa2>
 8000aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ace:	e008      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xa2>
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	e005      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xa2>
 8000ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ada:	e002      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xa2>
 8000adc:	2310      	movs	r3, #16
 8000ade:	e000      	b.n	8000ae2 <HAL_DMA_Abort_IT+0xa2>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <HAL_DMA_Abort_IT+0xe8>)
 8000ae4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	4798      	blx	r3
    } 
  }
  return status;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40020008 	.word	0x40020008
 8000b14:	4002001c 	.word	0x4002001c
 8000b18:	40020030 	.word	0x40020030
 8000b1c:	40020044 	.word	0x40020044
 8000b20:	40020058 	.word	0x40020058
 8000b24:	4002006c 	.word	0x4002006c
 8000b28:	40020000 	.word	0x40020000

08000b2c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b08b      	sub	sp, #44	; 0x2c
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b56:	e169      	b.n	8000e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f040 8158 	bne.w	8000e26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4a9a      	ldr	r2, [pc, #616]	; (8000de4 <HAL_GPIO_Init+0x2a0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d05e      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b80:	4a98      	ldr	r2, [pc, #608]	; (8000de4 <HAL_GPIO_Init+0x2a0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d875      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b86:	4a98      	ldr	r2, [pc, #608]	; (8000de8 <HAL_GPIO_Init+0x2a4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d058      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b8c:	4a96      	ldr	r2, [pc, #600]	; (8000de8 <HAL_GPIO_Init+0x2a4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d86f      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b92:	4a96      	ldr	r2, [pc, #600]	; (8000dec <HAL_GPIO_Init+0x2a8>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d052      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b98:	4a94      	ldr	r2, [pc, #592]	; (8000dec <HAL_GPIO_Init+0x2a8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d869      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b9e:	4a94      	ldr	r2, [pc, #592]	; (8000df0 <HAL_GPIO_Init+0x2ac>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d04c      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000ba4:	4a92      	ldr	r2, [pc, #584]	; (8000df0 <HAL_GPIO_Init+0x2ac>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d863      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000baa:	4a92      	ldr	r2, [pc, #584]	; (8000df4 <HAL_GPIO_Init+0x2b0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d046      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000bb0:	4a90      	ldr	r2, [pc, #576]	; (8000df4 <HAL_GPIO_Init+0x2b0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d85d      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	d82a      	bhi.n	8000c10 <HAL_GPIO_Init+0xcc>
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d859      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000bbe:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <HAL_GPIO_Init+0x80>)
 8000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc4:	08000c3f 	.word	0x08000c3f
 8000bc8:	08000c19 	.word	0x08000c19
 8000bcc:	08000c2b 	.word	0x08000c2b
 8000bd0:	08000c6d 	.word	0x08000c6d
 8000bd4:	08000c73 	.word	0x08000c73
 8000bd8:	08000c73 	.word	0x08000c73
 8000bdc:	08000c73 	.word	0x08000c73
 8000be0:	08000c73 	.word	0x08000c73
 8000be4:	08000c73 	.word	0x08000c73
 8000be8:	08000c73 	.word	0x08000c73
 8000bec:	08000c73 	.word	0x08000c73
 8000bf0:	08000c73 	.word	0x08000c73
 8000bf4:	08000c73 	.word	0x08000c73
 8000bf8:	08000c73 	.word	0x08000c73
 8000bfc:	08000c73 	.word	0x08000c73
 8000c00:	08000c73 	.word	0x08000c73
 8000c04:	08000c73 	.word	0x08000c73
 8000c08:	08000c21 	.word	0x08000c21
 8000c0c:	08000c35 	.word	0x08000c35
 8000c10:	4a79      	ldr	r2, [pc, #484]	; (8000df8 <HAL_GPIO_Init+0x2b4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d013      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c16:	e02c      	b.n	8000c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e029      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	3304      	adds	r3, #4
 8000c26:	623b      	str	r3, [r7, #32]
          break;
 8000c28:	e024      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	3308      	adds	r3, #8
 8000c30:	623b      	str	r3, [r7, #32]
          break;
 8000c32:	e01f      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	330c      	adds	r3, #12
 8000c3a:	623b      	str	r3, [r7, #32]
          break;
 8000c3c:	e01a      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c46:	2304      	movs	r3, #4
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e013      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d105      	bne.n	8000c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c54:	2308      	movs	r3, #8
 8000c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	611a      	str	r2, [r3, #16]
          break;
 8000c5e:	e009      	b.n	8000c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	615a      	str	r2, [r3, #20]
          break;
 8000c6a:	e003      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
          break;
 8000c70:	e000      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          break;
 8000c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	2bff      	cmp	r3, #255	; 0xff
 8000c78:	d801      	bhi.n	8000c7e <HAL_GPIO_Init+0x13a>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	e001      	b.n	8000c82 <HAL_GPIO_Init+0x13e>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3304      	adds	r3, #4
 8000c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2bff      	cmp	r3, #255	; 0xff
 8000c88:	d802      	bhi.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x152>
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	3b08      	subs	r3, #8
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	6a39      	ldr	r1, [r7, #32]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80b1 	beq.w	8000e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc4:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cdc:	4a48      	ldr	r2, [pc, #288]	; (8000e00 <HAL_GPIO_Init+0x2bc>)
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a40      	ldr	r2, [pc, #256]	; (8000e04 <HAL_GPIO_Init+0x2c0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d013      	beq.n	8000d30 <HAL_GPIO_Init+0x1ec>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3f      	ldr	r2, [pc, #252]	; (8000e08 <HAL_GPIO_Init+0x2c4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00d      	beq.n	8000d2c <HAL_GPIO_Init+0x1e8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3e      	ldr	r2, [pc, #248]	; (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3d      	ldr	r2, [pc, #244]	; (8000e10 <HAL_GPIO_Init+0x2cc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_GPIO_Init+0x1e0>
 8000d20:	2303      	movs	r3, #3
 8000d22:	e006      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d24:	2304      	movs	r3, #4
 8000d26:	e004      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d30:	2300      	movs	r3, #0
 8000d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d34:	f002 0203 	and.w	r2, r2, #3
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	4093      	lsls	r3, r2
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d42:	492f      	ldr	r1, [pc, #188]	; (8000e00 <HAL_GPIO_Init+0x2bc>)
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	492c      	ldr	r1, [pc, #176]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4928      	ldr	r1, [pc, #160]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4922      	ldr	r1, [pc, #136]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	491e      	ldr	r1, [pc, #120]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	4918      	ldr	r1, [pc, #96]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	608b      	str	r3, [r1, #8]
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4914      	ldr	r1, [pc, #80]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d021      	beq.n	8000e18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	490e      	ldr	r1, [pc, #56]	; (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60cb      	str	r3, [r1, #12]
 8000de0:	e021      	b.n	8000e26 <HAL_GPIO_Init+0x2e2>
 8000de2:	bf00      	nop
 8000de4:	10320000 	.word	0x10320000
 8000de8:	10310000 	.word	0x10310000
 8000dec:	10220000 	.word	0x10220000
 8000df0:	10210000 	.word	0x10210000
 8000df4:	10120000 	.word	0x10120000
 8000df8:	10110000 	.word	0x10110000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010000 	.word	0x40010000
 8000e04:	40010800 	.word	0x40010800
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	40011000 	.word	0x40011000
 8000e10:	40011400 	.word	0x40011400
 8000e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_GPIO_Init+0x304>)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	4909      	ldr	r1, [pc, #36]	; (8000e48 <HAL_GPIO_Init+0x304>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	3301      	adds	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	fa22 f303 	lsr.w	r3, r2, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f47f ae8e 	bne.w	8000b58 <HAL_GPIO_Init+0x14>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	372c      	adds	r7, #44	; 0x2c
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e12b      	b.n	80010b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d106      	bne.n	8000e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff f9c6 	bl	8000204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2224      	movs	r2, #36	; 0x24
 8000e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000eb0:	f002 fb3e 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8000eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4a81      	ldr	r2, [pc, #516]	; (80010c0 <HAL_I2C_Init+0x274>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d807      	bhi.n	8000ed0 <HAL_I2C_Init+0x84>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4a80      	ldr	r2, [pc, #512]	; (80010c4 <HAL_I2C_Init+0x278>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	bf94      	ite	ls
 8000ec8:	2301      	movls	r3, #1
 8000eca:	2300      	movhi	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	e006      	b.n	8000ede <HAL_I2C_Init+0x92>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4a7d      	ldr	r2, [pc, #500]	; (80010c8 <HAL_I2C_Init+0x27c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	bf94      	ite	ls
 8000ed8:	2301      	movls	r3, #1
 8000eda:	2300      	movhi	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0e7      	b.n	80010b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4a78      	ldr	r2, [pc, #480]	; (80010cc <HAL_I2C_Init+0x280>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4a6a      	ldr	r2, [pc, #424]	; (80010c0 <HAL_I2C_Init+0x274>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d802      	bhi.n	8000f20 <HAL_I2C_Init+0xd4>
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	e009      	b.n	8000f34 <HAL_I2C_Init+0xe8>
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	4a69      	ldr	r2, [pc, #420]	; (80010d0 <HAL_I2C_Init+0x284>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	099b      	lsrs	r3, r3, #6
 8000f32:	3301      	adds	r3, #1
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	495c      	ldr	r1, [pc, #368]	; (80010c0 <HAL_I2C_Init+0x274>)
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d819      	bhi.n	8000f88 <HAL_I2C_Init+0x13c>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1e59      	subs	r1, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f68:	400b      	ands	r3, r1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00a      	beq.n	8000f84 <HAL_I2C_Init+0x138>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1e59      	subs	r1, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f82:	e051      	b.n	8001028 <HAL_I2C_Init+0x1dc>
 8000f84:	2304      	movs	r3, #4
 8000f86:	e04f      	b.n	8001028 <HAL_I2C_Init+0x1dc>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d111      	bne.n	8000fb4 <HAL_I2C_Init+0x168>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1e58      	subs	r0, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6859      	ldr	r1, [r3, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	440b      	add	r3, r1
 8000f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	e012      	b.n	8000fda <HAL_I2C_Init+0x18e>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	1e58      	subs	r0, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	0099      	lsls	r1, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_I2C_Init+0x196>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e022      	b.n	8001028 <HAL_I2C_Init+0x1dc>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10e      	bne.n	8001008 <HAL_I2C_Init+0x1bc>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1e58      	subs	r0, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001006:	e00f      	b.n	8001028 <HAL_I2C_Init+0x1dc>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1e58      	subs	r0, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6859      	ldr	r1, [r3, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	0099      	lsls	r1, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	fbb0 f3f3 	udiv	r3, r0, r3
 800101e:	3301      	adds	r3, #1
 8001020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	6809      	ldr	r1, [r1, #0]
 800102c:	4313      	orrs	r3, r2
 800102e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69da      	ldr	r2, [r3, #28]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6911      	ldr	r1, [r2, #16]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68d2      	ldr	r2, [r2, #12]
 8001062:	4311      	orrs	r1, r2
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	430b      	orrs	r3, r1
 800106a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2220      	movs	r2, #32
 80010a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	000186a0 	.word	0x000186a0
 80010c4:	001e847f 	.word	0x001e847f
 80010c8:	003d08ff 	.word	0x003d08ff
 80010cc:	431bde83 	.word	0x431bde83
 80010d0:	10624dd3 	.word	0x10624dd3

080010d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af02      	add	r7, sp, #8
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	460b      	mov	r3, r1
 80010e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff fb36 	bl	8000754 <HAL_GetTick>
 80010e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b20      	cmp	r3, #32
 80010f8:	f040 8111 	bne.w	800131e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2319      	movs	r3, #25
 8001102:	2201      	movs	r2, #1
 8001104:	4988      	ldr	r1, [pc, #544]	; (8001328 <HAL_I2C_IsDeviceReady+0x254>)
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f001 fd9a 	bl	8002c40 <I2C_WaitOnFlagUntilTimeout>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001112:	2302      	movs	r3, #2
 8001114:	e104      	b.n	8001320 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <HAL_I2C_IsDeviceReady+0x50>
 8001120:	2302      	movs	r3, #2
 8001122:	e0fd      	b.n	8001320 <HAL_I2C_IsDeviceReady+0x24c>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b01      	cmp	r3, #1
 8001138:	d007      	beq.n	800114a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 0201 	orr.w	r2, r2, #1
 8001148:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2224      	movs	r2, #36	; 0x24
 800115e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4a70      	ldr	r2, [pc, #448]	; (800132c <HAL_I2C_IsDeviceReady+0x258>)
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800117c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f001 fd58 	bl	8002c40 <I2C_WaitOnFlagUntilTimeout>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00d      	beq.n	80011b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a4:	d103      	bne.n	80011ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e0b6      	b.n	8001320 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011b2:	897b      	ldrh	r3, [r7, #10]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fac7 	bl	8000754 <HAL_GetTick>
 80011c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ec:	bf0c      	ite	eq
 80011ee:	2301      	moveq	r3, #1
 80011f0:	2300      	movne	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80011f6:	e025      	b.n	8001244 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011f8:	f7ff faac 	bl	8000754 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d302      	bcc.n	800120e <HAL_I2C_IsDeviceReady+0x13a>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	22a0      	movs	r2, #160	; 0xa0
 8001212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b02      	cmp	r3, #2
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2ba0      	cmp	r3, #160	; 0xa0
 800124e:	d005      	beq.n	800125c <HAL_I2C_IsDeviceReady+0x188>
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <HAL_I2C_IsDeviceReady+0x188>
 8001256:	7dbb      	ldrb	r3, [r7, #22]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0cd      	beq.n	80011f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2220      	movs	r2, #32
 8001260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b02      	cmp	r3, #2
 8001270:	d129      	bne.n	80012c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001280:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2319      	movs	r3, #25
 800129e:	2201      	movs	r2, #1
 80012a0:	4921      	ldr	r1, [pc, #132]	; (8001328 <HAL_I2C_IsDeviceReady+0x254>)
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f001 fccc 	bl	8002c40 <I2C_WaitOnFlagUntilTimeout>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e036      	b.n	8001320 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2220      	movs	r2, #32
 80012b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e02c      	b.n	8001320 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2319      	movs	r3, #25
 80012e6:	2201      	movs	r2, #1
 80012e8:	490f      	ldr	r1, [pc, #60]	; (8001328 <HAL_I2C_IsDeviceReady+0x254>)
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f001 fca8 	bl	8002c40 <I2C_WaitOnFlagUntilTimeout>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e012      	b.n	8001320 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	f4ff af32 	bcc.w	800116e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2220      	movs	r2, #32
 800130e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800131e:	2302      	movs	r3, #2
  }
}
 8001320:	4618      	mov	r0, r3
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	00100002 	.word	0x00100002
 800132c:	ffff0000 	.word	0xffff0000

08001330 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001350:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001358:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2b10      	cmp	r3, #16
 800135e:	d003      	beq.n	8001368 <HAL_I2C_EV_IRQHandler+0x38>
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b40      	cmp	r3, #64	; 0x40
 8001364:	f040 80c1 	bne.w	80014ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10d      	bne.n	800139e <HAL_I2C_EV_IRQHandler+0x6e>
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001388:	d003      	beq.n	8001392 <HAL_I2C_EV_IRQHandler+0x62>
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001390:	d101      	bne.n	8001396 <HAL_I2C_EV_IRQHandler+0x66>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_I2C_EV_IRQHandler+0x68>
 8001396:	2300      	movs	r3, #0
 8001398:	2b01      	cmp	r3, #1
 800139a:	f000 8132 	beq.w	8001602 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00c      	beq.n	80013c2 <HAL_I2C_EV_IRQHandler+0x92>
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	0a5b      	lsrs	r3, r3, #9
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f001 fccd 	bl	8002d54 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fd77 	bl	8001eae <I2C_Master_SB>
 80013c0:	e092      	b.n	80014e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	0a5b      	lsrs	r3, r3, #9
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fdec 	bl	8001fb8 <I2C_Master_ADD10>
 80013e0:	e082      	b.n	80014e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <HAL_I2C_EV_IRQHandler+0xd2>
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	0a5b      	lsrs	r3, r3, #9
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fe05 	bl	800200a <I2C_Master_ADDR>
 8001400:	e072      	b.n	80014e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d03b      	beq.n	8001486 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800141c:	f000 80f3 	beq.w	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	09db      	lsrs	r3, r3, #7
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00f      	beq.n	800144c <HAL_I2C_EV_IRQHandler+0x11c>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	0a9b      	lsrs	r3, r3, #10
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d009      	beq.n	800144c <HAL_I2C_EV_IRQHandler+0x11c>
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b00      	cmp	r3, #0
 8001442:	d103      	bne.n	800144c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f9f1 	bl	800182c <I2C_MasterTransmit_TXE>
 800144a:	e04d      	b.n	80014e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80d6 	beq.w	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	0a5b      	lsrs	r3, r3, #9
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80cf 	beq.w	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	2b21      	cmp	r3, #33	; 0x21
 800146c:	d103      	bne.n	8001476 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fa78 	bl	8001964 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001474:	e0c7      	b.n	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b40      	cmp	r3, #64	; 0x40
 800147a:	f040 80c4 	bne.w	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fae6 	bl	8001a50 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001484:	e0bf      	b.n	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001494:	f000 80b7 	beq.w	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	099b      	lsrs	r3, r3, #6
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00f      	beq.n	80014c4 <HAL_I2C_EV_IRQHandler+0x194>
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	0a9b      	lsrs	r3, r3, #10
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <HAL_I2C_EV_IRQHandler+0x194>
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fb5b 	bl	8001b78 <I2C_MasterReceive_RXNE>
 80014c2:	e011      	b.n	80014e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 809a 	beq.w	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	0a5b      	lsrs	r3, r3, #9
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8093 	beq.w	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fbfa 	bl	8001cda <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014e6:	e08e      	b.n	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
 80014e8:	e08d      	b.n	8001606 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	e007      	b.n	800150c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d012      	beq.n	800153e <HAL_I2C_EV_IRQHandler+0x20e>
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	0a5b      	lsrs	r3, r3, #9
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001534:	69b9      	ldr	r1, [r7, #24]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 ffbe 	bl	80024b8 <I2C_Slave_ADDR>
 800153c:	e066      	b.n	800160c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <HAL_I2C_EV_IRQHandler+0x22e>
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	0a5b      	lsrs	r3, r3, #9
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 fff8 	bl	800254c <I2C_Slave_STOPF>
 800155c:	e056      	b.n	800160c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	2b21      	cmp	r3, #33	; 0x21
 8001562:	d002      	beq.n	800156a <HAL_I2C_EV_IRQHandler+0x23a>
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b29      	cmp	r3, #41	; 0x29
 8001568:	d125      	bne.n	80015b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	09db      	lsrs	r3, r3, #7
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00f      	beq.n	8001596 <HAL_I2C_EV_IRQHandler+0x266>
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	0a9b      	lsrs	r3, r3, #10
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_I2C_EV_IRQHandler+0x266>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fed6 	bl	8002340 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001594:	e039      	b.n	800160a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d033      	beq.n	800160a <HAL_I2C_EV_IRQHandler+0x2da>
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	0a5b      	lsrs	r3, r3, #9
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d02d      	beq.n	800160a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 ff03 	bl	80023ba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015b4:	e029      	b.n	800160a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00f      	beq.n	80015e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	0a9b      	lsrs	r3, r3, #10
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d103      	bne.n	80015e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 ff0d 	bl	80023fa <I2C_SlaveReceive_RXNE>
 80015e0:	e014      	b.n	800160c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00e      	beq.n	800160c <HAL_I2C_EV_IRQHandler+0x2dc>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	0a5b      	lsrs	r3, r3, #9
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 ff3b 	bl	8002476 <I2C_SlaveReceive_BTF>
 8001600:	e004      	b.n	800160c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001602:	bf00      	nop
 8001604:	e002      	b.n	800160c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001606:	bf00      	nop
 8001608:	e000      	b.n	800160c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800160a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b08a      	sub	sp, #40	; 0x28
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001634:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d016      	beq.n	8001670 <HAL_I2C_ER_IRQHandler+0x5e>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d010      	beq.n	8001670 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800165e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800166e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	0a5b      	lsrs	r3, r3, #9
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00e      	beq.n	800169a <HAL_I2C_ER_IRQHandler+0x88>
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001698:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	0a9b      	lsrs	r3, r3, #10
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d03f      	beq.n	8001726 <HAL_I2C_ER_IRQHandler+0x114>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d039      	beq.n	8001726 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80016b2:	7efb      	ldrb	r3, [r7, #27]
 80016b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80016cc:	7ebb      	ldrb	r3, [r7, #26]
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d112      	bne.n	80016f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10f      	bne.n	80016f8 <HAL_I2C_ER_IRQHandler+0xe6>
 80016d8:	7cfb      	ldrb	r3, [r7, #19]
 80016da:	2b21      	cmp	r3, #33	; 0x21
 80016dc:	d008      	beq.n	80016f0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80016de:	7cfb      	ldrb	r3, [r7, #19]
 80016e0:	2b29      	cmp	r3, #41	; 0x29
 80016e2:	d005      	beq.n	80016f0 <HAL_I2C_ER_IRQHandler+0xde>
 80016e4:	7cfb      	ldrb	r3, [r7, #19]
 80016e6:	2b28      	cmp	r3, #40	; 0x28
 80016e8:	d106      	bne.n	80016f8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b21      	cmp	r3, #33	; 0x21
 80016ee:	d103      	bne.n	80016f8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f001 f85b 	bl	80027ac <I2C_Slave_AF>
 80016f6:	e016      	b.n	8001726 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001700:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800170a:	7efb      	ldrb	r3, [r7, #27]
 800170c:	2b10      	cmp	r3, #16
 800170e:	d002      	beq.n	8001716 <HAL_I2C_ER_IRQHandler+0x104>
 8001710:	7efb      	ldrb	r3, [r7, #27]
 8001712:	2b40      	cmp	r3, #64	; 0x40
 8001714:	d107      	bne.n	8001726 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001724:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	0adb      	lsrs	r3, r3, #11
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00e      	beq.n	8001750 <HAL_I2C_ER_IRQHandler+0x13e>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800174e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f001 f892 	bl	800288c <I2C_ITError>
  }
}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	; 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
 80017c4:	4613      	mov	r3, r2
 80017c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800183a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001842:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	2b00      	cmp	r3, #0
 8001850:	d150      	bne.n	80018f4 <I2C_MasterTransmit_TXE+0xc8>
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	2b21      	cmp	r3, #33	; 0x21
 8001856:	d14d      	bne.n	80018f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b08      	cmp	r3, #8
 800185c:	d01d      	beq.n	800189a <I2C_MasterTransmit_TXE+0x6e>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b20      	cmp	r3, #32
 8001862:	d01a      	beq.n	800189a <I2C_MasterTransmit_TXE+0x6e>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800186a:	d016      	beq.n	800189a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800187a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2211      	movs	r2, #17
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff6c 	bl	8001770 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001898:	e060      	b.n	800195c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2220      	movs	r2, #32
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b40      	cmp	r3, #64	; 0x40
 80018d2:	d107      	bne.n	80018e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff81 	bl	80017e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018e2:	e03b      	b.n	800195c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff3f 	bl	8001770 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018f2:	e033      	b.n	800195c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	2b21      	cmp	r3, #33	; 0x21
 80018f8:	d005      	beq.n	8001906 <I2C_MasterTransmit_TXE+0xda>
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	2b40      	cmp	r3, #64	; 0x40
 80018fe:	d12d      	bne.n	800195c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b22      	cmp	r3, #34	; 0x22
 8001904:	d12a      	bne.n	800195c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190a:	b29b      	uxth	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d108      	bne.n	8001922 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800191e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001920:	e01c      	b.n	800195c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b40      	cmp	r3, #64	; 0x40
 800192c:	d103      	bne.n	8001936 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f88e 	bl	8001a50 <I2C_MemoryTransmit_TXE_BTF>
}
 8001934:	e012      	b.n	800195c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800195a:	e7ff      	b.n	800195c <I2C_MasterTransmit_TXE+0x130>
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b21      	cmp	r3, #33	; 0x21
 800197c:	d164      	bne.n	8001a48 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001982:	b29b      	uxth	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d012      	beq.n	80019ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	781a      	ldrb	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80019ac:	e04c      	b.n	8001a48 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d01d      	beq.n	80019f0 <I2C_MasterTransmit_BTF+0x8c>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	d01a      	beq.n	80019f0 <I2C_MasterTransmit_BTF+0x8c>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019c0:	d016      	beq.n	80019f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2211      	movs	r2, #17
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff fec1 	bl	8001770 <HAL_I2C_MasterTxCpltCallback>
}
 80019ee:	e02b      	b.n	8001a48 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b40      	cmp	r3, #64	; 0x40
 8001a28:	d107      	bne.n	8001a3a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fed6 	bl	80017e4 <HAL_I2C_MemTxCpltCallback>
}
 8001a38:	e006      	b.n	8001a48 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fe94 	bl	8001770 <HAL_I2C_MasterTxCpltCallback>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11d      	bne.n	8001aa4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d10b      	bne.n	8001a88 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a80:	1c9a      	adds	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001a86:	e073      	b.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	121b      	asrs	r3, r3, #8
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001aa2:	e065      	b.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d10b      	bne.n	8001ac4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ac2:	e055      	b.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d151      	bne.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b22      	cmp	r3, #34	; 0x22
 8001ad0:	d10d      	bne.n	8001aee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001aec:	e040      	b.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d015      	beq.n	8001b24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b21      	cmp	r3, #33	; 0x21
 8001afc:	d112      	bne.n	8001b24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	781a      	ldrb	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b22:	e025      	b.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d120      	bne.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b21      	cmp	r3, #33	; 0x21
 8001b32:	d11d      	bne.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b42:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fe3a 	bl	80017e4 <HAL_I2C_MemTxCpltCallback>
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b22      	cmp	r3, #34	; 0x22
 8001b8a:	f040 80a2 	bne.w	8001cd2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d921      	bls.n	8001be0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	f040 8082 	bne.w	8001cd2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bdc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001bde:	e078      	b.n	8001cd2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d074      	beq.n	8001cd2 <I2C_MasterReceive_RXNE+0x15a>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d002      	beq.n	8001bf4 <I2C_MasterReceive_RXNE+0x7c>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d16e      	bne.n	8001cd2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f001 f87b 	bl	8002cf0 <I2C_WaitOnSTOPRequestThroughIT>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d142      	bne.n	8001c86 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b40      	cmp	r3, #64	; 0x40
 8001c58:	d10a      	bne.n	8001c70 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff fdc4 	bl	80017f6 <HAL_I2C_MemRxCpltCallback>
}
 8001c6e:	e030      	b.n	8001cd2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2212      	movs	r2, #18
 8001c7c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fd7f 	bl	8001782 <HAL_I2C_MasterRxCpltCallback>
}
 8001c84:	e025      	b.n	8001cd2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c94:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fd9b 	bl	8001808 <HAL_I2C_ErrorCallback>
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d11b      	bne.n	8001d2a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d00:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001d28:	e0bd      	b.n	8001ea6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d129      	bne.n	8001d88 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d00a      	beq.n	8001d60 <I2C_MasterReceive_BTF+0x86>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d007      	beq.n	8001d60 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d86:	e08e      	b.n	8001ea6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d176      	bne.n	8001e80 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d002      	beq.n	8001d9e <I2C_MasterReceive_BTF+0xc4>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d108      	bne.n	8001db0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e019      	b.n	8001de4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <I2C_MasterReceive_BTF+0xe2>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d108      	bne.n	8001dce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e00a      	b.n	8001de4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d007      	beq.n	8001de4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e3e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b40      	cmp	r3, #64	; 0x40
 8001e52:	d10a      	bne.n	8001e6a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fcc7 	bl	80017f6 <HAL_I2C_MemRxCpltCallback>
}
 8001e68:	e01d      	b.n	8001ea6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2212      	movs	r2, #18
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fc82 	bl	8001782 <HAL_I2C_MasterRxCpltCallback>
}
 8001e7e:	e012      	b.n	8001ea6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691a      	ldr	r2, [r3, #16]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d117      	bne.n	8001ef2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eda:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001edc:	e067      	b.n	8001fae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	611a      	str	r2, [r3, #16]
}
 8001ef0:	e05d      	b.n	8001fae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001efa:	d133      	bne.n	8001f64 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b21      	cmp	r3, #33	; 0x21
 8001f06:	d109      	bne.n	8001f1c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	e008      	b.n	8001f2e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <I2C_Master_SB+0x92>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d108      	bne.n	8001f52 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d032      	beq.n	8001fae <I2C_Master_SB+0x100>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d02d      	beq.n	8001fae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f60:	605a      	str	r2, [r3, #4]
}
 8001f62:	e024      	b.n	8001fae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10e      	bne.n	8001f8a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	11db      	asrs	r3, r3, #7
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f003 0306 	and.w	r3, r3, #6
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f063 030f 	orn	r3, r3, #15
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	611a      	str	r2, [r3, #16]
}
 8001f88:	e011      	b.n	8001fae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10d      	bne.n	8001fae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	11db      	asrs	r3, r3, #7
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f003 0306 	and.w	r3, r3, #6
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f063 030e 	orn	r3, r3, #14
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	611a      	str	r2, [r3, #16]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <I2C_Master_ADD10+0x26>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d108      	bne.n	8001ff0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <I2C_Master_ADD10+0x48>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ffe:	605a      	str	r2, [r3, #4]
  }
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800200a:	b480      	push	{r7}
 800200c:	b091      	sub	sp, #68	; 0x44
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002018:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b22      	cmp	r3, #34	; 0x22
 8002032:	f040 8174 	bne.w	800231e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10f      	bne.n	800205e <I2C_Master_ADDR+0x54>
 800203e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002042:	2b40      	cmp	r3, #64	; 0x40
 8002044:	d10b      	bne.n	800205e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	633b      	str	r3, [r7, #48]	; 0x30
 800205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205c:	e16b      	b.n	8002336 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11d      	bne.n	80020a2 <I2C_Master_ADDR+0x98>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800206e:	d118      	bne.n	80020a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002094:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	651a      	str	r2, [r3, #80]	; 0x50
 80020a0:	e149      	b.n	8002336 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d113      	bne.n	80020d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e120      	b.n	8002316 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	f040 808a 	bne.w	80021f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80020e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020e6:	d137      	bne.n	8002158 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002106:	d113      	bne.n	8002130 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	e0f2      	b.n	8002316 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	623b      	str	r3, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e0de      	b.n	8002316 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215a:	2b08      	cmp	r3, #8
 800215c:	d02e      	beq.n	80021bc <I2C_Master_ADDR+0x1b2>
 800215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002160:	2b20      	cmp	r3, #32
 8002162:	d02b      	beq.n	80021bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	2b12      	cmp	r3, #18
 8002168:	d102      	bne.n	8002170 <I2C_Master_ADDR+0x166>
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	2b01      	cmp	r3, #1
 800216e:	d125      	bne.n	80021bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002172:	2b04      	cmp	r3, #4
 8002174:	d00e      	beq.n	8002194 <I2C_Master_ADDR+0x18a>
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	2b02      	cmp	r3, #2
 800217a:	d00b      	beq.n	8002194 <I2C_Master_ADDR+0x18a>
 800217c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217e:	2b10      	cmp	r3, #16
 8002180:	d008      	beq.n	8002194 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	61fb      	str	r3, [r7, #28]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	e0ac      	b.n	8002316 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e090      	b.n	8002316 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d158      	bne.n	80022b0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	2b04      	cmp	r3, #4
 8002202:	d021      	beq.n	8002248 <I2C_Master_ADDR+0x23e>
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	2b02      	cmp	r3, #2
 8002208:	d01e      	beq.n	8002248 <I2C_Master_ADDR+0x23e>
 800220a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220c:	2b10      	cmp	r3, #16
 800220e:	d01b      	beq.n	8002248 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e012      	b.n	800226e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002256:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800227c:	d14b      	bne.n	8002316 <I2C_Master_ADDR+0x30c>
 800227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002280:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002284:	d00b      	beq.n	800229e <I2C_Master_ADDR+0x294>
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	2b01      	cmp	r3, #1
 800228a:	d008      	beq.n	800229e <I2C_Master_ADDR+0x294>
 800228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228e:	2b08      	cmp	r3, #8
 8002290:	d005      	beq.n	800229e <I2C_Master_ADDR+0x294>
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	2b10      	cmp	r3, #16
 8002296:	d002      	beq.n	800229e <I2C_Master_ADDR+0x294>
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	2b20      	cmp	r3, #32
 800229c:	d13b      	bne.n	8002316 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	e032      	b.n	8002316 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022ce:	d117      	bne.n	8002300 <I2C_Master_ADDR+0x2f6>
 80022d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022d6:	d00b      	beq.n	80022f0 <I2C_Master_ADDR+0x2e6>
 80022d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d008      	beq.n	80022f0 <I2C_Master_ADDR+0x2e6>
 80022de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d005      	beq.n	80022f0 <I2C_Master_ADDR+0x2e6>
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d002      	beq.n	80022f0 <I2C_Master_ADDR+0x2e6>
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d107      	bne.n	8002300 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800231c:	e00b      	b.n	8002336 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
}
 8002334:	e7ff      	b.n	8002336 <I2C_Master_ADDR+0x32c>
 8002336:	bf00      	nop
 8002338:	3744      	adds	r7, #68	; 0x44
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d02b      	beq.n	80023b2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d114      	bne.n	80023b2 <I2C_SlaveTransmit_TXE+0x72>
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b29      	cmp	r3, #41	; 0x29
 800238c:	d111      	bne.n	80023b2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2221      	movs	r2, #33	; 0x21
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2228      	movs	r2, #40	; 0x28
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff f9f1 	bl	8001794 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d011      	beq.n	80023f0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d02c      	beq.n	800246e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d114      	bne.n	800246e <I2C_SlaveReceive_RXNE+0x74>
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b2a      	cmp	r3, #42	; 0x2a
 8002448:	d111      	bne.n	800246e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002458:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2222      	movs	r2, #34	; 0x22
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2228      	movs	r2, #40	; 0x28
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff f99c 	bl	80017a6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d012      	beq.n	80024ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024d2:	2b28      	cmp	r3, #40	; 0x28
 80024d4:	d127      	bne.n	8002526 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	09db      	lsrs	r3, r3, #7
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	81bb      	strh	r3, [r7, #12]
 8002508:	e002      	b.n	8002510 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002518:	89ba      	ldrh	r2, [r7, #12]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	4619      	mov	r1, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff f94a 	bl	80017b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002524:	e00e      	b.n	8002544 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800256a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002598:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a8:	d172      	bne.n	8002690 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b22      	cmp	r3, #34	; 0x22
 80025ae:	d002      	beq.n	80025b6 <I2C_Slave_STOPF+0x6a>
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b2a      	cmp	r3, #42	; 0x2a
 80025b4:	d135      	bne.n	8002622 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f043 0204 	orr.w	r2, r3, #4
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fa9c 	bl	8000b2c <HAL_DMA_GetState>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d049      	beq.n	800268e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	4a69      	ldr	r2, [pc, #420]	; (80027a4 <I2C_Slave_STOPF+0x258>)
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fa1a 	bl	8000a40 <HAL_DMA_Abort_IT>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d03d      	beq.n	800268e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800261c:	4610      	mov	r0, r2
 800261e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002620:	e035      	b.n	800268e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002654:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fa66 	bl	8000b2c <HAL_DMA_GetState>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	d014      	beq.n	8002690 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <I2C_Slave_STOPF+0x258>)
 800266c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe f9e4 	bl	8000a40 <HAL_DMA_Abort_IT>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002688:	4610      	mov	r0, r2
 800268a:	4798      	blx	r3
 800268c:	e000      	b.n	8002690 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800268e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03e      	beq.n	8002718 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d112      	bne.n	80026ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d112      	bne.n	8002702 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f043 0204 	orr.w	r2, r3, #4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f8b3 	bl	800288c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002726:	e039      	b.n	800279c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b2a      	cmp	r3, #42	; 0x2a
 800272c:	d109      	bne.n	8002742 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2228      	movs	r2, #40	; 0x28
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff f832 	bl	80017a6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b28      	cmp	r3, #40	; 0x28
 800274c:	d111      	bne.n	8002772 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <I2C_Slave_STOPF+0x25c>)
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff f831 	bl	80017d2 <HAL_I2C_ListenCpltCallback>
}
 8002770:	e014      	b.n	800279c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	2b22      	cmp	r3, #34	; 0x22
 8002778:	d002      	beq.n	8002780 <I2C_Slave_STOPF+0x234>
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b22      	cmp	r3, #34	; 0x22
 800277e:	d10d      	bne.n	800279c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff f805 	bl	80017a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	08002af1 	.word	0x08002af1
 80027a8:	ffff0000 	.word	0xffff0000

080027ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d002      	beq.n	80027ce <I2C_Slave_AF+0x22>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d129      	bne.n	8002822 <I2C_Slave_AF+0x76>
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b28      	cmp	r3, #40	; 0x28
 80027d2:	d126      	bne.n	8002822 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <I2C_Slave_AF+0xdc>)
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe ffd9 	bl	80017d2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002820:	e02e      	b.n	8002880 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b21      	cmp	r3, #33	; 0x21
 8002826:	d126      	bne.n	8002876 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <I2C_Slave_AF+0xdc>)
 800282c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2221      	movs	r2, #33	; 0x21
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002852:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe ff90 	bl	8001794 <HAL_I2C_SlaveTxCpltCallback>
}
 8002874:	e004      	b.n	8002880 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800287e:	615a      	str	r2, [r3, #20]
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	ffff0000 	.word	0xffff0000

0800288c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d002      	beq.n	80028b0 <I2C_ITError+0x24>
 80028aa:	7bbb      	ldrb	r3, [r7, #14]
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d10a      	bne.n	80028c6 <I2C_ITError+0x3a>
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b22      	cmp	r3, #34	; 0x22
 80028b4:	d107      	bne.n	80028c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028cc:	2b28      	cmp	r3, #40	; 0x28
 80028ce:	d107      	bne.n	80028e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2228      	movs	r2, #40	; 0x28
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028de:	e015      	b.n	800290c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ee:	d00a      	beq.n	8002906 <I2C_ITError+0x7a>
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b60      	cmp	r3, #96	; 0x60
 80028f4:	d007      	beq.n	8002906 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800291a:	d161      	bne.n	80029e0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002934:	2b01      	cmp	r3, #1
 8002936:	d020      	beq.n	800297a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	4a6a      	ldr	r2, [pc, #424]	; (8002ae8 <I2C_ITError+0x25c>)
 800293e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe f87b 	bl	8000a40 <HAL_DMA_Abort_IT>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8089 	beq.w	8002a64 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002974:	4610      	mov	r0, r2
 8002976:	4798      	blx	r3
 8002978:	e074      	b.n	8002a64 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	4a5a      	ldr	r2, [pc, #360]	; (8002ae8 <I2C_ITError+0x25c>)
 8002980:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe f85a 	bl	8000a40 <HAL_DMA_Abort_IT>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d068      	beq.n	8002a64 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d10b      	bne.n	80029b8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029da:	4610      	mov	r0, r2
 80029dc:	4798      	blx	r3
 80029de:	e041      	b.n	8002a64 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d125      	bne.n	8002a38 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d10b      	bne.n	8002a20 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe fef2 	bl	800181a <HAL_I2C_AbortCpltCallback>
 8002a36:	e015      	b.n	8002a64 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b40      	cmp	r3, #64	; 0x40
 8002a44:	d10b      	bne.n	8002a5e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fed2 	bl	8001808 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10e      	bne.n	8002a92 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d113      	bne.n	8002ade <I2C_ITError+0x252>
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b28      	cmp	r3, #40	; 0x28
 8002aba:	d110      	bne.n	8002ade <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <I2C_ITError+0x260>)
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7fe fe7a 	bl	80017d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	08002af1 	.word	0x08002af1
 8002aec:	ffff0000 	.word	0xffff0000

08002af0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b0a:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <I2C_DMAAbort+0x148>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	08db      	lsrs	r3, r3, #3
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <I2C_DMAAbort+0x14c>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0a1a      	lsrs	r2, r3, #8
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00da      	lsls	r2, r3, #3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002b36:	e00a      	b.n	8002b4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d0ea      	beq.n	8002b24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2200      	movs	r2, #0
 8002b82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b90:	2200      	movs	r2, #0
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b60      	cmp	r3, #96	; 0x60
 8002bbe:	d10e      	bne.n	8002bde <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7fe fe1f 	bl	800181a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bdc:	e027      	b.n	8002c2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002be4:	2b28      	cmp	r3, #40	; 0x28
 8002be6:	d117      	bne.n	8002c18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2228      	movs	r2, #40	; 0x28
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c16:	e007      	b.n	8002c28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002c28:	6978      	ldr	r0, [r7, #20]
 8002c2a:	f7fe fded 	bl	8001808 <HAL_I2C_ErrorCallback>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000030 	.word	0x20000030
 8002c3c:	14f8b589 	.word	0x14f8b589

08002c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c50:	e025      	b.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c58:	d021      	beq.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7fd fd7b 	bl	8000754 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d116      	bne.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f043 0220 	orr.w	r2, r3, #32
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e023      	b.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d10d      	bne.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	e00c      	b.n	8002cde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d0b6      	beq.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	4a13      	ldr	r2, [pc, #76]	; (8002d50 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	0a1a      	lsrs	r2, r3, #8
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e008      	b.n	8002d40 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3c:	d0e9      	beq.n	8002d12 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000030 	.word	0x20000030
 8002d50:	14f8b589 	.word	0x14f8b589

08002d54 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d64:	d103      	bne.n	8002d6e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d6c:	e007      	b.n	8002d7e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d76:	d102      	bne.n	8002d7e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e272      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8087 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da8:	4b92      	ldr	r3, [pc, #584]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d00c      	beq.n	8002dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002db4:	4b8f      	ldr	r3, [pc, #572]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d112      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5e>
 8002dc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dce:	4b89      	ldr	r3, [pc, #548]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d06c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x12c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d168      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e24c      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x76>
 8002df0:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7f      	ldr	r2, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e02e      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x98>
 8002e06:	4b7b      	ldr	r3, [pc, #492]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b78      	ldr	r3, [pc, #480]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a77      	ldr	r2, [pc, #476]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e01d      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0xbc>
 8002e2a:	4b72      	ldr	r3, [pc, #456]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b6f      	ldr	r3, [pc, #444]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002e44:	4b6b      	ldr	r3, [pc, #428]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6a      	ldr	r2, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a67      	ldr	r2, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fd fc76 	bl	8000754 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fd fc72 	bl	8000754 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e200      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xe4>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fd fc62 	bl	8000754 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fd fc5e 	bl	8000754 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1ec      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x10c>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ece:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x18c>
 8002eda:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x176>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1c0      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4939      	ldr	r1, [pc, #228]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	e03a      	b.n	8002f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fd fc17 	bl	8000754 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fd fc13 	bl	8000754 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1a1      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4927      	ldr	r1, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <HAL_RCC_OscConfig+0x270>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fd fbf6 	bl	8000754 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fd fbf2 	bl	8000754 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e180      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d03a      	beq.n	800300c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d019      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7fd fbd6 	bl	8000754 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fd fbd2 	bl	8000754 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e160      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f000 fad8 	bl	8003580 <RCC_Delay>
 8002fd0:	e01c      	b.n	800300c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fd fbbc 	bl	8000754 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fde:	e00f      	b.n	8003000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fd fbb8 	bl	8000754 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d908      	bls.n	8003000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e146      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	42420000 	.word	0x42420000
 8002ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e9      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80a6 	beq.w	8003166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301e:	4b8b      	ldr	r3, [pc, #556]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10d      	bne.n	8003046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a87      	ldr	r2, [pc, #540]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b82      	ldr	r3, [pc, #520]	; (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003052:	4b7f      	ldr	r3, [pc, #508]	; (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7e      	ldr	r2, [pc, #504]	; (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7fd fb79 	bl	8000754 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fd fb75 	bl	8000754 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e103      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4b75      	ldr	r3, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x4c8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x312>
 800308c:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a6e      	ldr	r2, [pc, #440]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e02d      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x334>
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a69      	ldr	r2, [pc, #420]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4a66      	ldr	r2, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6213      	str	r3, [r2, #32]
 80030ba:	e01c      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_OscConfig+0x356>
 80030c4:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a60      	ldr	r2, [pc, #384]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	4b5e      	ldr	r3, [pc, #376]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a5d      	ldr	r2, [pc, #372]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6213      	str	r3, [r2, #32]
 80030dc:	e00b      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a5a      	ldr	r2, [pc, #360]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	4b58      	ldr	r3, [pc, #352]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a57      	ldr	r2, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fd fb29 	bl	8000754 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fd fb25 	bl	8000754 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0b1      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	4b4b      	ldr	r3, [pc, #300]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ee      	beq.n	8003106 <HAL_RCC_OscConfig+0x37e>
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fd fb13 	bl	8000754 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fd fb0f 	bl	8000754 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e09b      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b3c      	ldr	r3, [pc, #240]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	4a3b      	ldr	r2, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8087 	beq.w	800327e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d061      	beq.n	8003240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d146      	bne.n	8003212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_RCC_OscConfig+0x4cc>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fd fae3 	bl	8000754 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fd fadf 	bl	8000754 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e06d      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a4:	4b29      	ldr	r3, [pc, #164]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d108      	bne.n	80031cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4921      	ldr	r1, [pc, #132]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a19      	ldr	r1, [r3, #32]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	430b      	orrs	r3, r1
 80031de:	491b      	ldr	r1, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fd fab3 	bl	8000754 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fd faaf 	bl	8000754 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e03d      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46a>
 8003210:	e035      	b.n	800327e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_OscConfig+0x4cc>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fd fa9c 	bl	8000754 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7fd fa98 	bl	8000754 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e026      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x498>
 800323e:	e01e      	b.n	800327e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e019      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_OscConfig+0x500>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	429a      	cmp	r2, r3
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000

0800328c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0d0      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b6a      	ldr	r3, [pc, #424]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d910      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b67      	ldr	r3, [pc, #412]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4965      	ldr	r1, [pc, #404]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b63      	ldr	r3, [pc, #396]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0b8      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e8:	4b59      	ldr	r3, [pc, #356]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a58      	ldr	r2, [pc, #352]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003300:	4b53      	ldr	r3, [pc, #332]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a52      	ldr	r2, [pc, #328]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800330a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330c:	4b50      	ldr	r3, [pc, #320]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	494d      	ldr	r1, [pc, #308]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d040      	beq.n	80033ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d115      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e07f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b41      	ldr	r3, [pc, #260]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e073      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06b      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4936      	ldr	r1, [pc, #216]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800337c:	f7fd f9ea 	bl	8000754 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fd f9e6 	bl	8000754 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e053      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d210      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 0207 	bic.w	r2, r3, #7
 80033c2:	4922      	ldr	r1, [pc, #136]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e032      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4916      	ldr	r1, [pc, #88]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	490e      	ldr	r1, [pc, #56]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341a:	f000 f821 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	490a      	ldr	r1, [pc, #40]	; (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1cc>)
 8003434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_ClockConfig+0x1d0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f948 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40022000 	.word	0x40022000
 8003450:	40021000 	.word	0x40021000
 8003454:	080048f4 	.word	0x080048f4
 8003458:	20000030 	.word	0x20000030
 800345c:	20000034 	.word	0x20000034

08003460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b490      	push	{r4, r7}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCC_GetSysClockFreq+0xac>)
 8003468:	1d3c      	adds	r4, r7, #4
 800346a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800346c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003470:	f240 2301 	movw	r3, #513	; 0x201
 8003474:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCC_GetSysClockFreq+0xb0>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b04      	cmp	r3, #4
 8003498:	d002      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x40>
 800349a:	2b08      	cmp	r3, #8
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x46>
 800349e:	e02b      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034a2:	623b      	str	r3, [r7, #32]
      break;
 80034a4:	e02b      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	0c9b      	lsrs	r3, r3, #18
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	3328      	adds	r3, #40	; 0x28
 80034b0:	443b      	add	r3, r7
 80034b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	0c5b      	lsrs	r3, r3, #17
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	3328      	adds	r3, #40	; 0x28
 80034ce:	443b      	add	r3, r7
 80034d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034da:	fb03 f202 	mul.w	r2, r3, r2
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	e004      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	623b      	str	r3, [r7, #32]
      break;
 80034f6:	e002      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034fa:	623b      	str	r3, [r7, #32]
      break;
 80034fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc90      	pop	{r4, r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	080048e4 	.word	0x080048e4
 8003510:	40021000 	.word	0x40021000
 8003514:	007a1200 	.word	0x007a1200
 8003518:	003d0900 	.word	0x003d0900

0800351c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <HAL_RCC_GetHCLKFreq+0x10>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000030 	.word	0x20000030

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003534:	f7ff fff2 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	08004904 	.word	0x08004904

08003558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800355c:	f7ff ffde 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	0adb      	lsrs	r3, r3, #11
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4903      	ldr	r1, [pc, #12]	; (800357c <HAL_RCC_GetPCLK2Freq+0x24>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	08004904 	.word	0x08004904

08003580 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <RCC_Delay+0x34>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <RCC_Delay+0x38>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0a5b      	lsrs	r3, r3, #9
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800359c:	bf00      	nop
  }
  while (Delay --);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1e5a      	subs	r2, r3, #1
 80035a2:	60fa      	str	r2, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f9      	bne.n	800359c <RCC_Delay+0x1c>
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	20000030 	.word	0x20000030
 80035b8:	10624dd3 	.word	0x10624dd3

080035bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e03f      	b.n	800364e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fc ffe4 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fc25 	bl	8003e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	; 0x28
 800365a:	af02      	add	r7, sp, #8
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	d17c      	bne.n	8003770 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_Transmit+0x2c>
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e075      	b.n	8003772 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit+0x3e>
 8003690:	2302      	movs	r3, #2
 8003692:	e06e      	b.n	8003772 <HAL_UART_Transmit+0x11c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2221      	movs	r2, #33	; 0x21
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036aa:	f7fd f853 	bl	8000754 <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	88fa      	ldrh	r2, [r7, #6]
 80036ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d108      	bne.n	80036d8 <HAL_UART_Transmit+0x82>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	e003      	b.n	80036e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036e8:	e02a      	b.n	8003740 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2200      	movs	r2, #0
 80036f2:	2180      	movs	r1, #128	; 0x80
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fa11 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e036      	b.n	8003772 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003718:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	3302      	adds	r3, #2
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e007      	b.n	8003732 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3301      	adds	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1cf      	bne.n	80036ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f9e1 	bl	8003b1c <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e006      	b.n	8003772 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10d      	bne.n	80037ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_UART_IRQHandler+0x52>
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa99 	bl	8003cfe <UART_Receive_IT>
      return;
 80037cc:	e17b      	b.n	8003ac6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80b1 	beq.w	8003938 <HAL_UART_IRQHandler+0x1bc>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <HAL_UART_IRQHandler+0x70>
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80a6 	beq.w	8003938 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_UART_IRQHandler+0x90>
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f043 0201 	orr.w	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_UART_IRQHandler+0xb0>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f043 0202 	orr.w	r2, r3, #2
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_UART_IRQHandler+0xd0>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f043 0204 	orr.w	r2, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00f      	beq.n	8003876 <HAL_UART_IRQHandler+0xfa>
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_UART_IRQHandler+0xee>
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f043 0208 	orr.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 811e 	beq.w	8003abc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_UART_IRQHandler+0x11e>
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fa32 	bl	8003cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <HAL_UART_IRQHandler+0x146>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d031      	beq.n	8003926 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f974 	bl	8003bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d023      	beq.n	800391e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d013      	beq.n	8003916 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	4a76      	ldr	r2, [pc, #472]	; (8003acc <HAL_UART_IRQHandler+0x350>)
 80038f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd f8a0 	bl	8000a40 <HAL_DMA_Abort_IT>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d016      	beq.n	8003934 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003910:	4610      	mov	r0, r2
 8003912:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	e00e      	b.n	8003934 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8ec 	bl	8003af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	e00a      	b.n	8003934 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8e8 	bl	8003af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e006      	b.n	8003934 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8e4 	bl	8003af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003932:	e0c3      	b.n	8003abc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	bf00      	nop
    return;
 8003936:	e0c1      	b.n	8003abc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	2b01      	cmp	r3, #1
 800393e:	f040 80a1 	bne.w	8003a84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 809b 	beq.w	8003a84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8095 	beq.w	8003a84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d04e      	beq.n	8003a1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003988:	8a3b      	ldrh	r3, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8098 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003994:	8a3a      	ldrh	r2, [r7, #16]
 8003996:	429a      	cmp	r2, r3
 8003998:	f080 8092 	bcs.w	8003ac0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8a3a      	ldrh	r2, [r7, #16]
 80039a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d02b      	beq.n	8003a04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0210 	bic.w	r2, r2, #16
 80039f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fc ffe3 	bl	80009ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f876 	bl	8003b06 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a1a:	e051      	b.n	8003ac0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d047      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a34:	8a7b      	ldrh	r3, [r7, #18]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d044      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0210 	bic.w	r2, r2, #16
 8003a76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a78:	8a7b      	ldrh	r3, [r7, #18]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f842 	bl	8003b06 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a82:	e01f      	b.n	8003ac4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x324>
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f8c9 	bl	8003c30 <UART_Transmit_IT>
    return;
 8003a9e:	e012      	b.n	8003ac6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x34a>
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f90a 	bl	8003cce <UART_EndTransmit_IT>
    return;
 8003aba:	e004      	b.n	8003ac6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003abc:	bf00      	nop
 8003abe:	e002      	b.n	8003ac6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ac4:	bf00      	nop
  }
}
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08003c09 	.word	0x08003c09

08003ad0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2c:	e02c      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b34:	d028      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3c:	f7fc fe0a 	bl	8000754 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d21d      	bcs.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e00f      	b.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d0c3      	beq.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003bc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d107      	bne.n	8003bf0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0210 	bic.w	r2, r2, #16
 8003bee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f7ff ff66 	bl	8003af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c28:	bf00      	nop
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b21      	cmp	r3, #33	; 0x21
 8003c42:	d13e      	bne.n	8003cc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4c:	d114      	bne.n	8003c78 <UART_Transmit_IT+0x48>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d110      	bne.n	8003c78 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	1c9a      	adds	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]
 8003c76:	e008      	b.n	8003c8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	1c59      	adds	r1, r3, #1
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6211      	str	r1, [r2, #32]
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4619      	mov	r1, r3
 8003c98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
  }
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff feee 	bl	8003ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b22      	cmp	r3, #34	; 0x22
 8003d10:	f040 8099 	bne.w	8003e46 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d117      	bne.n	8003d4e <UART_Receive_IT+0x50>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d113      	bne.n	8003d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	1c9a      	adds	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d4c:	e026      	b.n	8003d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d60:	d007      	beq.n	8003d72 <UART_Receive_IT+0x74>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <UART_Receive_IT+0x82>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e008      	b.n	8003d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4619      	mov	r1, r3
 8003daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d148      	bne.n	8003e42 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0220 	bic.w	r2, r2, #32
 8003dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d123      	bne.n	8003e38 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0210 	bic.w	r2, r2, #16
 8003e04:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d10a      	bne.n	8003e2a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fe68 	bl	8003b06 <HAL_UARTEx_RxEventCallback>
 8003e36:	e002      	b.n	8003e3e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fe52 	bl	8003ae2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e002      	b.n	8003e48 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e000      	b.n	8003e48 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
  }
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e8a:	f023 030c 	bic.w	r3, r3, #12
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2c      	ldr	r2, [pc, #176]	; (8003f64 <UART_SetConfig+0x114>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d103      	bne.n	8003ec0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eb8:	f7ff fb4e 	bl	8003558 <HAL_RCC_GetPCLK2Freq>
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	e002      	b.n	8003ec6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7ff fb36 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009a      	lsls	r2, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <UART_SetConfig+0x118>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	0119      	lsls	r1, r3, #4
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009a      	lsls	r2, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003efc:	4b1a      	ldr	r3, [pc, #104]	; (8003f68 <UART_SetConfig+0x118>)
 8003efe:	fba3 0302 	umull	r0, r3, r3, r2
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2064      	movs	r0, #100	; 0x64
 8003f06:	fb00 f303 	mul.w	r3, r0, r3
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	3332      	adds	r3, #50	; 0x32
 8003f10:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <UART_SetConfig+0x118>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1c:	4419      	add	r1, r3
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009a      	lsls	r2, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <UART_SetConfig+0x118>)
 8003f36:	fba3 0302 	umull	r0, r3, r3, r2
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2064      	movs	r0, #100	; 0x64
 8003f3e:	fb00 f303 	mul.w	r3, r0, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	3332      	adds	r3, #50	; 0x32
 8003f48:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <UART_SetConfig+0x118>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	f003 020f 	and.w	r2, r3, #15
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	440a      	add	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40013800 	.word	0x40013800
 8003f68:	51eb851f 	.word	0x51eb851f

08003f6c <__errno>:
 8003f6c:	4b01      	ldr	r3, [pc, #4]	; (8003f74 <__errno+0x8>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2000003c 	.word	0x2000003c

08003f78 <__libc_init_array>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	4d0c      	ldr	r5, [pc, #48]	; (8003fb0 <__libc_init_array+0x38>)
 8003f7e:	4c0d      	ldr	r4, [pc, #52]	; (8003fb4 <__libc_init_array+0x3c>)
 8003f80:	1b64      	subs	r4, r4, r5
 8003f82:	10a4      	asrs	r4, r4, #2
 8003f84:	42a6      	cmp	r6, r4
 8003f86:	d109      	bne.n	8003f9c <__libc_init_array+0x24>
 8003f88:	f000 fc9c 	bl	80048c4 <_init>
 8003f8c:	2600      	movs	r6, #0
 8003f8e:	4d0a      	ldr	r5, [pc, #40]	; (8003fb8 <__libc_init_array+0x40>)
 8003f90:	4c0a      	ldr	r4, [pc, #40]	; (8003fbc <__libc_init_array+0x44>)
 8003f92:	1b64      	subs	r4, r4, r5
 8003f94:	10a4      	asrs	r4, r4, #2
 8003f96:	42a6      	cmp	r6, r4
 8003f98:	d105      	bne.n	8003fa6 <__libc_init_array+0x2e>
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa0:	4798      	blx	r3
 8003fa2:	3601      	adds	r6, #1
 8003fa4:	e7ee      	b.n	8003f84 <__libc_init_array+0xc>
 8003fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003faa:	4798      	blx	r3
 8003fac:	3601      	adds	r6, #1
 8003fae:	e7f2      	b.n	8003f96 <__libc_init_array+0x1e>
 8003fb0:	08004940 	.word	0x08004940
 8003fb4:	08004940 	.word	0x08004940
 8003fb8:	08004940 	.word	0x08004940
 8003fbc:	08004944 	.word	0x08004944

08003fc0 <memset>:
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4402      	add	r2, r0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d100      	bne.n	8003fca <memset+0xa>
 8003fc8:	4770      	bx	lr
 8003fca:	f803 1b01 	strb.w	r1, [r3], #1
 8003fce:	e7f9      	b.n	8003fc4 <memset+0x4>

08003fd0 <siprintf>:
 8003fd0:	b40e      	push	{r1, r2, r3}
 8003fd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fd6:	b500      	push	{lr}
 8003fd8:	b09c      	sub	sp, #112	; 0x70
 8003fda:	ab1d      	add	r3, sp, #116	; 0x74
 8003fdc:	9002      	str	r0, [sp, #8]
 8003fde:	9006      	str	r0, [sp, #24]
 8003fe0:	9107      	str	r1, [sp, #28]
 8003fe2:	9104      	str	r1, [sp, #16]
 8003fe4:	4808      	ldr	r0, [pc, #32]	; (8004008 <siprintf+0x38>)
 8003fe6:	4909      	ldr	r1, [pc, #36]	; (800400c <siprintf+0x3c>)
 8003fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fec:	9105      	str	r1, [sp, #20]
 8003fee:	6800      	ldr	r0, [r0, #0]
 8003ff0:	a902      	add	r1, sp, #8
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	f000 f868 	bl	80040c8 <_svfiprintf_r>
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	9b02      	ldr	r3, [sp, #8]
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	b01c      	add	sp, #112	; 0x70
 8004000:	f85d eb04 	ldr.w	lr, [sp], #4
 8004004:	b003      	add	sp, #12
 8004006:	4770      	bx	lr
 8004008:	2000003c 	.word	0x2000003c
 800400c:	ffff0208 	.word	0xffff0208

08004010 <__ssputs_r>:
 8004010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004014:	688e      	ldr	r6, [r1, #8]
 8004016:	4682      	mov	sl, r0
 8004018:	429e      	cmp	r6, r3
 800401a:	460c      	mov	r4, r1
 800401c:	4690      	mov	r8, r2
 800401e:	461f      	mov	r7, r3
 8004020:	d838      	bhi.n	8004094 <__ssputs_r+0x84>
 8004022:	898a      	ldrh	r2, [r1, #12]
 8004024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004028:	d032      	beq.n	8004090 <__ssputs_r+0x80>
 800402a:	6825      	ldr	r5, [r4, #0]
 800402c:	6909      	ldr	r1, [r1, #16]
 800402e:	3301      	adds	r3, #1
 8004030:	eba5 0901 	sub.w	r9, r5, r1
 8004034:	6965      	ldr	r5, [r4, #20]
 8004036:	444b      	add	r3, r9
 8004038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800403c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004040:	106d      	asrs	r5, r5, #1
 8004042:	429d      	cmp	r5, r3
 8004044:	bf38      	it	cc
 8004046:	461d      	movcc	r5, r3
 8004048:	0553      	lsls	r3, r2, #21
 800404a:	d531      	bpl.n	80040b0 <__ssputs_r+0xa0>
 800404c:	4629      	mov	r1, r5
 800404e:	f000 fb6f 	bl	8004730 <_malloc_r>
 8004052:	4606      	mov	r6, r0
 8004054:	b950      	cbnz	r0, 800406c <__ssputs_r+0x5c>
 8004056:	230c      	movs	r3, #12
 8004058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800405c:	f8ca 3000 	str.w	r3, [sl]
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800406c:	464a      	mov	r2, r9
 800406e:	6921      	ldr	r1, [r4, #16]
 8004070:	f000 face 	bl	8004610 <memcpy>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800407a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	6126      	str	r6, [r4, #16]
 8004082:	444e      	add	r6, r9
 8004084:	6026      	str	r6, [r4, #0]
 8004086:	463e      	mov	r6, r7
 8004088:	6165      	str	r5, [r4, #20]
 800408a:	eba5 0509 	sub.w	r5, r5, r9
 800408e:	60a5      	str	r5, [r4, #8]
 8004090:	42be      	cmp	r6, r7
 8004092:	d900      	bls.n	8004096 <__ssputs_r+0x86>
 8004094:	463e      	mov	r6, r7
 8004096:	4632      	mov	r2, r6
 8004098:	4641      	mov	r1, r8
 800409a:	6820      	ldr	r0, [r4, #0]
 800409c:	f000 fac6 	bl	800462c <memmove>
 80040a0:	68a3      	ldr	r3, [r4, #8]
 80040a2:	2000      	movs	r0, #0
 80040a4:	1b9b      	subs	r3, r3, r6
 80040a6:	60a3      	str	r3, [r4, #8]
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	4433      	add	r3, r6
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	e7db      	b.n	8004068 <__ssputs_r+0x58>
 80040b0:	462a      	mov	r2, r5
 80040b2:	f000 fbb1 	bl	8004818 <_realloc_r>
 80040b6:	4606      	mov	r6, r0
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d1e1      	bne.n	8004080 <__ssputs_r+0x70>
 80040bc:	4650      	mov	r0, sl
 80040be:	6921      	ldr	r1, [r4, #16]
 80040c0:	f000 face 	bl	8004660 <_free_r>
 80040c4:	e7c7      	b.n	8004056 <__ssputs_r+0x46>
	...

080040c8 <_svfiprintf_r>:
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	4698      	mov	r8, r3
 80040ce:	898b      	ldrh	r3, [r1, #12]
 80040d0:	4607      	mov	r7, r0
 80040d2:	061b      	lsls	r3, r3, #24
 80040d4:	460d      	mov	r5, r1
 80040d6:	4614      	mov	r4, r2
 80040d8:	b09d      	sub	sp, #116	; 0x74
 80040da:	d50e      	bpl.n	80040fa <_svfiprintf_r+0x32>
 80040dc:	690b      	ldr	r3, [r1, #16]
 80040de:	b963      	cbnz	r3, 80040fa <_svfiprintf_r+0x32>
 80040e0:	2140      	movs	r1, #64	; 0x40
 80040e2:	f000 fb25 	bl	8004730 <_malloc_r>
 80040e6:	6028      	str	r0, [r5, #0]
 80040e8:	6128      	str	r0, [r5, #16]
 80040ea:	b920      	cbnz	r0, 80040f6 <_svfiprintf_r+0x2e>
 80040ec:	230c      	movs	r3, #12
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f4:	e0d1      	b.n	800429a <_svfiprintf_r+0x1d2>
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	616b      	str	r3, [r5, #20]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9309      	str	r3, [sp, #36]	; 0x24
 80040fe:	2320      	movs	r3, #32
 8004100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004104:	2330      	movs	r3, #48	; 0x30
 8004106:	f04f 0901 	mov.w	r9, #1
 800410a:	f8cd 800c 	str.w	r8, [sp, #12]
 800410e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042b4 <_svfiprintf_r+0x1ec>
 8004112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004116:	4623      	mov	r3, r4
 8004118:	469a      	mov	sl, r3
 800411a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800411e:	b10a      	cbz	r2, 8004124 <_svfiprintf_r+0x5c>
 8004120:	2a25      	cmp	r2, #37	; 0x25
 8004122:	d1f9      	bne.n	8004118 <_svfiprintf_r+0x50>
 8004124:	ebba 0b04 	subs.w	fp, sl, r4
 8004128:	d00b      	beq.n	8004142 <_svfiprintf_r+0x7a>
 800412a:	465b      	mov	r3, fp
 800412c:	4622      	mov	r2, r4
 800412e:	4629      	mov	r1, r5
 8004130:	4638      	mov	r0, r7
 8004132:	f7ff ff6d 	bl	8004010 <__ssputs_r>
 8004136:	3001      	adds	r0, #1
 8004138:	f000 80aa 	beq.w	8004290 <_svfiprintf_r+0x1c8>
 800413c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800413e:	445a      	add	r2, fp
 8004140:	9209      	str	r2, [sp, #36]	; 0x24
 8004142:	f89a 3000 	ldrb.w	r3, [sl]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80a2 	beq.w	8004290 <_svfiprintf_r+0x1c8>
 800414c:	2300      	movs	r3, #0
 800414e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004156:	f10a 0a01 	add.w	sl, sl, #1
 800415a:	9304      	str	r3, [sp, #16]
 800415c:	9307      	str	r3, [sp, #28]
 800415e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004162:	931a      	str	r3, [sp, #104]	; 0x68
 8004164:	4654      	mov	r4, sl
 8004166:	2205      	movs	r2, #5
 8004168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800416c:	4851      	ldr	r0, [pc, #324]	; (80042b4 <_svfiprintf_r+0x1ec>)
 800416e:	f000 fa41 	bl	80045f4 <memchr>
 8004172:	9a04      	ldr	r2, [sp, #16]
 8004174:	b9d8      	cbnz	r0, 80041ae <_svfiprintf_r+0xe6>
 8004176:	06d0      	lsls	r0, r2, #27
 8004178:	bf44      	itt	mi
 800417a:	2320      	movmi	r3, #32
 800417c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004180:	0711      	lsls	r1, r2, #28
 8004182:	bf44      	itt	mi
 8004184:	232b      	movmi	r3, #43	; 0x2b
 8004186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800418a:	f89a 3000 	ldrb.w	r3, [sl]
 800418e:	2b2a      	cmp	r3, #42	; 0x2a
 8004190:	d015      	beq.n	80041be <_svfiprintf_r+0xf6>
 8004192:	4654      	mov	r4, sl
 8004194:	2000      	movs	r0, #0
 8004196:	f04f 0c0a 	mov.w	ip, #10
 800419a:	9a07      	ldr	r2, [sp, #28]
 800419c:	4621      	mov	r1, r4
 800419e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041a2:	3b30      	subs	r3, #48	; 0x30
 80041a4:	2b09      	cmp	r3, #9
 80041a6:	d94e      	bls.n	8004246 <_svfiprintf_r+0x17e>
 80041a8:	b1b0      	cbz	r0, 80041d8 <_svfiprintf_r+0x110>
 80041aa:	9207      	str	r2, [sp, #28]
 80041ac:	e014      	b.n	80041d8 <_svfiprintf_r+0x110>
 80041ae:	eba0 0308 	sub.w	r3, r0, r8
 80041b2:	fa09 f303 	lsl.w	r3, r9, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	46a2      	mov	sl, r4
 80041ba:	9304      	str	r3, [sp, #16]
 80041bc:	e7d2      	b.n	8004164 <_svfiprintf_r+0x9c>
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	1d19      	adds	r1, r3, #4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	9103      	str	r1, [sp, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfbb      	ittet	lt
 80041ca:	425b      	neglt	r3, r3
 80041cc:	f042 0202 	orrlt.w	r2, r2, #2
 80041d0:	9307      	strge	r3, [sp, #28]
 80041d2:	9307      	strlt	r3, [sp, #28]
 80041d4:	bfb8      	it	lt
 80041d6:	9204      	strlt	r2, [sp, #16]
 80041d8:	7823      	ldrb	r3, [r4, #0]
 80041da:	2b2e      	cmp	r3, #46	; 0x2e
 80041dc:	d10c      	bne.n	80041f8 <_svfiprintf_r+0x130>
 80041de:	7863      	ldrb	r3, [r4, #1]
 80041e0:	2b2a      	cmp	r3, #42	; 0x2a
 80041e2:	d135      	bne.n	8004250 <_svfiprintf_r+0x188>
 80041e4:	9b03      	ldr	r3, [sp, #12]
 80041e6:	3402      	adds	r4, #2
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	9203      	str	r2, [sp, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bfb8      	it	lt
 80041f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041f6:	9305      	str	r3, [sp, #20]
 80041f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80042b8 <_svfiprintf_r+0x1f0>
 80041fc:	2203      	movs	r2, #3
 80041fe:	4650      	mov	r0, sl
 8004200:	7821      	ldrb	r1, [r4, #0]
 8004202:	f000 f9f7 	bl	80045f4 <memchr>
 8004206:	b140      	cbz	r0, 800421a <_svfiprintf_r+0x152>
 8004208:	2340      	movs	r3, #64	; 0x40
 800420a:	eba0 000a 	sub.w	r0, r0, sl
 800420e:	fa03 f000 	lsl.w	r0, r3, r0
 8004212:	9b04      	ldr	r3, [sp, #16]
 8004214:	3401      	adds	r4, #1
 8004216:	4303      	orrs	r3, r0
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800421e:	2206      	movs	r2, #6
 8004220:	4826      	ldr	r0, [pc, #152]	; (80042bc <_svfiprintf_r+0x1f4>)
 8004222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004226:	f000 f9e5 	bl	80045f4 <memchr>
 800422a:	2800      	cmp	r0, #0
 800422c:	d038      	beq.n	80042a0 <_svfiprintf_r+0x1d8>
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <_svfiprintf_r+0x1f8>)
 8004230:	bb1b      	cbnz	r3, 800427a <_svfiprintf_r+0x1b2>
 8004232:	9b03      	ldr	r3, [sp, #12]
 8004234:	3307      	adds	r3, #7
 8004236:	f023 0307 	bic.w	r3, r3, #7
 800423a:	3308      	adds	r3, #8
 800423c:	9303      	str	r3, [sp, #12]
 800423e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004240:	4433      	add	r3, r6
 8004242:	9309      	str	r3, [sp, #36]	; 0x24
 8004244:	e767      	b.n	8004116 <_svfiprintf_r+0x4e>
 8004246:	460c      	mov	r4, r1
 8004248:	2001      	movs	r0, #1
 800424a:	fb0c 3202 	mla	r2, ip, r2, r3
 800424e:	e7a5      	b.n	800419c <_svfiprintf_r+0xd4>
 8004250:	2300      	movs	r3, #0
 8004252:	f04f 0c0a 	mov.w	ip, #10
 8004256:	4619      	mov	r1, r3
 8004258:	3401      	adds	r4, #1
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	4620      	mov	r0, r4
 800425e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004262:	3a30      	subs	r2, #48	; 0x30
 8004264:	2a09      	cmp	r2, #9
 8004266:	d903      	bls.n	8004270 <_svfiprintf_r+0x1a8>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0c5      	beq.n	80041f8 <_svfiprintf_r+0x130>
 800426c:	9105      	str	r1, [sp, #20]
 800426e:	e7c3      	b.n	80041f8 <_svfiprintf_r+0x130>
 8004270:	4604      	mov	r4, r0
 8004272:	2301      	movs	r3, #1
 8004274:	fb0c 2101 	mla	r1, ip, r1, r2
 8004278:	e7f0      	b.n	800425c <_svfiprintf_r+0x194>
 800427a:	ab03      	add	r3, sp, #12
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	462a      	mov	r2, r5
 8004280:	4638      	mov	r0, r7
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <_svfiprintf_r+0x1fc>)
 8004284:	a904      	add	r1, sp, #16
 8004286:	f3af 8000 	nop.w
 800428a:	1c42      	adds	r2, r0, #1
 800428c:	4606      	mov	r6, r0
 800428e:	d1d6      	bne.n	800423e <_svfiprintf_r+0x176>
 8004290:	89ab      	ldrh	r3, [r5, #12]
 8004292:	065b      	lsls	r3, r3, #25
 8004294:	f53f af2c 	bmi.w	80040f0 <_svfiprintf_r+0x28>
 8004298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800429a:	b01d      	add	sp, #116	; 0x74
 800429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a0:	ab03      	add	r3, sp, #12
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	462a      	mov	r2, r5
 80042a6:	4638      	mov	r0, r7
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <_svfiprintf_r+0x1fc>)
 80042aa:	a904      	add	r1, sp, #16
 80042ac:	f000 f87c 	bl	80043a8 <_printf_i>
 80042b0:	e7eb      	b.n	800428a <_svfiprintf_r+0x1c2>
 80042b2:	bf00      	nop
 80042b4:	0800490c 	.word	0x0800490c
 80042b8:	08004912 	.word	0x08004912
 80042bc:	08004916 	.word	0x08004916
 80042c0:	00000000 	.word	0x00000000
 80042c4:	08004011 	.word	0x08004011

080042c8 <_printf_common>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	4616      	mov	r6, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	688a      	ldr	r2, [r1, #8]
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	4607      	mov	r7, r0
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bfb8      	it	lt
 80042da:	4613      	movlt	r3, r2
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e2:	460c      	mov	r4, r1
 80042e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e8:	b10a      	cbz	r2, 80042ee <_printf_common+0x26>
 80042ea:	3301      	adds	r3, #1
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	0699      	lsls	r1, r3, #26
 80042f2:	bf42      	ittt	mi
 80042f4:	6833      	ldrmi	r3, [r6, #0]
 80042f6:	3302      	addmi	r3, #2
 80042f8:	6033      	strmi	r3, [r6, #0]
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	f015 0506 	ands.w	r5, r5, #6
 8004300:	d106      	bne.n	8004310 <_printf_common+0x48>
 8004302:	f104 0a19 	add.w	sl, r4, #25
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	6832      	ldr	r2, [r6, #0]
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	42ab      	cmp	r3, r5
 800430e:	dc28      	bgt.n	8004362 <_printf_common+0x9a>
 8004310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004314:	1e13      	subs	r3, r2, #0
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	bf18      	it	ne
 800431a:	2301      	movne	r3, #1
 800431c:	0692      	lsls	r2, r2, #26
 800431e:	d42d      	bmi.n	800437c <_printf_common+0xb4>
 8004320:	4649      	mov	r1, r9
 8004322:	4638      	mov	r0, r7
 8004324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d020      	beq.n	8004370 <_printf_common+0xa8>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	68e5      	ldr	r5, [r4, #12]
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf18      	it	ne
 800433a:	2500      	movne	r5, #0
 800433c:	6832      	ldr	r2, [r6, #0]
 800433e:	f04f 0600 	mov.w	r6, #0
 8004342:	68a3      	ldr	r3, [r4, #8]
 8004344:	bf08      	it	eq
 8004346:	1aad      	subeq	r5, r5, r2
 8004348:	6922      	ldr	r2, [r4, #16]
 800434a:	bf08      	it	eq
 800434c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004350:	4293      	cmp	r3, r2
 8004352:	bfc4      	itt	gt
 8004354:	1a9b      	subgt	r3, r3, r2
 8004356:	18ed      	addgt	r5, r5, r3
 8004358:	341a      	adds	r4, #26
 800435a:	42b5      	cmp	r5, r6
 800435c:	d11a      	bne.n	8004394 <_printf_common+0xcc>
 800435e:	2000      	movs	r0, #0
 8004360:	e008      	b.n	8004374 <_printf_common+0xac>
 8004362:	2301      	movs	r3, #1
 8004364:	4652      	mov	r2, sl
 8004366:	4649      	mov	r1, r9
 8004368:	4638      	mov	r0, r7
 800436a:	47c0      	blx	r8
 800436c:	3001      	adds	r0, #1
 800436e:	d103      	bne.n	8004378 <_printf_common+0xb0>
 8004370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004378:	3501      	adds	r5, #1
 800437a:	e7c4      	b.n	8004306 <_printf_common+0x3e>
 800437c:	2030      	movs	r0, #48	; 0x30
 800437e:	18e1      	adds	r1, r4, r3
 8004380:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800438a:	4422      	add	r2, r4
 800438c:	3302      	adds	r3, #2
 800438e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004392:	e7c5      	b.n	8004320 <_printf_common+0x58>
 8004394:	2301      	movs	r3, #1
 8004396:	4622      	mov	r2, r4
 8004398:	4649      	mov	r1, r9
 800439a:	4638      	mov	r0, r7
 800439c:	47c0      	blx	r8
 800439e:	3001      	adds	r0, #1
 80043a0:	d0e6      	beq.n	8004370 <_printf_common+0xa8>
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7d9      	b.n	800435a <_printf_common+0x92>
	...

080043a8 <_printf_i>:
 80043a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ac:	7e0f      	ldrb	r7, [r1, #24]
 80043ae:	4691      	mov	r9, r2
 80043b0:	2f78      	cmp	r7, #120	; 0x78
 80043b2:	4680      	mov	r8, r0
 80043b4:	460c      	mov	r4, r1
 80043b6:	469a      	mov	sl, r3
 80043b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043be:	d807      	bhi.n	80043d0 <_printf_i+0x28>
 80043c0:	2f62      	cmp	r7, #98	; 0x62
 80043c2:	d80a      	bhi.n	80043da <_printf_i+0x32>
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	f000 80d9 	beq.w	800457c <_printf_i+0x1d4>
 80043ca:	2f58      	cmp	r7, #88	; 0x58
 80043cc:	f000 80a4 	beq.w	8004518 <_printf_i+0x170>
 80043d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d8:	e03a      	b.n	8004450 <_printf_i+0xa8>
 80043da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043de:	2b15      	cmp	r3, #21
 80043e0:	d8f6      	bhi.n	80043d0 <_printf_i+0x28>
 80043e2:	a101      	add	r1, pc, #4	; (adr r1, 80043e8 <_printf_i+0x40>)
 80043e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e8:	08004441 	.word	0x08004441
 80043ec:	08004455 	.word	0x08004455
 80043f0:	080043d1 	.word	0x080043d1
 80043f4:	080043d1 	.word	0x080043d1
 80043f8:	080043d1 	.word	0x080043d1
 80043fc:	080043d1 	.word	0x080043d1
 8004400:	08004455 	.word	0x08004455
 8004404:	080043d1 	.word	0x080043d1
 8004408:	080043d1 	.word	0x080043d1
 800440c:	080043d1 	.word	0x080043d1
 8004410:	080043d1 	.word	0x080043d1
 8004414:	08004563 	.word	0x08004563
 8004418:	08004485 	.word	0x08004485
 800441c:	08004545 	.word	0x08004545
 8004420:	080043d1 	.word	0x080043d1
 8004424:	080043d1 	.word	0x080043d1
 8004428:	08004585 	.word	0x08004585
 800442c:	080043d1 	.word	0x080043d1
 8004430:	08004485 	.word	0x08004485
 8004434:	080043d1 	.word	0x080043d1
 8004438:	080043d1 	.word	0x080043d1
 800443c:	0800454d 	.word	0x0800454d
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	1d1a      	adds	r2, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	602a      	str	r2, [r5, #0]
 8004448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800444c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004450:	2301      	movs	r3, #1
 8004452:	e0a4      	b.n	800459e <_printf_i+0x1f6>
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	6829      	ldr	r1, [r5, #0]
 8004458:	0606      	lsls	r6, r0, #24
 800445a:	f101 0304 	add.w	r3, r1, #4
 800445e:	d50a      	bpl.n	8004476 <_printf_i+0xce>
 8004460:	680e      	ldr	r6, [r1, #0]
 8004462:	602b      	str	r3, [r5, #0]
 8004464:	2e00      	cmp	r6, #0
 8004466:	da03      	bge.n	8004470 <_printf_i+0xc8>
 8004468:	232d      	movs	r3, #45	; 0x2d
 800446a:	4276      	negs	r6, r6
 800446c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004470:	230a      	movs	r3, #10
 8004472:	485e      	ldr	r0, [pc, #376]	; (80045ec <_printf_i+0x244>)
 8004474:	e019      	b.n	80044aa <_printf_i+0x102>
 8004476:	680e      	ldr	r6, [r1, #0]
 8004478:	f010 0f40 	tst.w	r0, #64	; 0x40
 800447c:	602b      	str	r3, [r5, #0]
 800447e:	bf18      	it	ne
 8004480:	b236      	sxthne	r6, r6
 8004482:	e7ef      	b.n	8004464 <_printf_i+0xbc>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	6820      	ldr	r0, [r4, #0]
 8004488:	1d19      	adds	r1, r3, #4
 800448a:	6029      	str	r1, [r5, #0]
 800448c:	0601      	lsls	r1, r0, #24
 800448e:	d501      	bpl.n	8004494 <_printf_i+0xec>
 8004490:	681e      	ldr	r6, [r3, #0]
 8004492:	e002      	b.n	800449a <_printf_i+0xf2>
 8004494:	0646      	lsls	r6, r0, #25
 8004496:	d5fb      	bpl.n	8004490 <_printf_i+0xe8>
 8004498:	881e      	ldrh	r6, [r3, #0]
 800449a:	2f6f      	cmp	r7, #111	; 0x6f
 800449c:	bf0c      	ite	eq
 800449e:	2308      	moveq	r3, #8
 80044a0:	230a      	movne	r3, #10
 80044a2:	4852      	ldr	r0, [pc, #328]	; (80045ec <_printf_i+0x244>)
 80044a4:	2100      	movs	r1, #0
 80044a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044aa:	6865      	ldr	r5, [r4, #4]
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	bfa8      	it	ge
 80044b0:	6821      	ldrge	r1, [r4, #0]
 80044b2:	60a5      	str	r5, [r4, #8]
 80044b4:	bfa4      	itt	ge
 80044b6:	f021 0104 	bicge.w	r1, r1, #4
 80044ba:	6021      	strge	r1, [r4, #0]
 80044bc:	b90e      	cbnz	r6, 80044c2 <_printf_i+0x11a>
 80044be:	2d00      	cmp	r5, #0
 80044c0:	d04d      	beq.n	800455e <_printf_i+0x1b6>
 80044c2:	4615      	mov	r5, r2
 80044c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80044c8:	fb03 6711 	mls	r7, r3, r1, r6
 80044cc:	5dc7      	ldrb	r7, [r0, r7]
 80044ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044d2:	4637      	mov	r7, r6
 80044d4:	42bb      	cmp	r3, r7
 80044d6:	460e      	mov	r6, r1
 80044d8:	d9f4      	bls.n	80044c4 <_printf_i+0x11c>
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d10b      	bne.n	80044f6 <_printf_i+0x14e>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07de      	lsls	r6, r3, #31
 80044e2:	d508      	bpl.n	80044f6 <_printf_i+0x14e>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6861      	ldr	r1, [r4, #4]
 80044e8:	4299      	cmp	r1, r3
 80044ea:	bfde      	ittt	le
 80044ec:	2330      	movle	r3, #48	; 0x30
 80044ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044f6:	1b52      	subs	r2, r2, r5
 80044f8:	6122      	str	r2, [r4, #16]
 80044fa:	464b      	mov	r3, r9
 80044fc:	4621      	mov	r1, r4
 80044fe:	4640      	mov	r0, r8
 8004500:	f8cd a000 	str.w	sl, [sp]
 8004504:	aa03      	add	r2, sp, #12
 8004506:	f7ff fedf 	bl	80042c8 <_printf_common>
 800450a:	3001      	adds	r0, #1
 800450c:	d14c      	bne.n	80045a8 <_printf_i+0x200>
 800450e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004512:	b004      	add	sp, #16
 8004514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004518:	4834      	ldr	r0, [pc, #208]	; (80045ec <_printf_i+0x244>)
 800451a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800451e:	6829      	ldr	r1, [r5, #0]
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	f851 6b04 	ldr.w	r6, [r1], #4
 8004526:	6029      	str	r1, [r5, #0]
 8004528:	061d      	lsls	r5, r3, #24
 800452a:	d514      	bpl.n	8004556 <_printf_i+0x1ae>
 800452c:	07df      	lsls	r7, r3, #31
 800452e:	bf44      	itt	mi
 8004530:	f043 0320 	orrmi.w	r3, r3, #32
 8004534:	6023      	strmi	r3, [r4, #0]
 8004536:	b91e      	cbnz	r6, 8004540 <_printf_i+0x198>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f023 0320 	bic.w	r3, r3, #32
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	2310      	movs	r3, #16
 8004542:	e7af      	b.n	80044a4 <_printf_i+0xfc>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f043 0320 	orr.w	r3, r3, #32
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	2378      	movs	r3, #120	; 0x78
 800454e:	4828      	ldr	r0, [pc, #160]	; (80045f0 <_printf_i+0x248>)
 8004550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004554:	e7e3      	b.n	800451e <_printf_i+0x176>
 8004556:	0659      	lsls	r1, r3, #25
 8004558:	bf48      	it	mi
 800455a:	b2b6      	uxthmi	r6, r6
 800455c:	e7e6      	b.n	800452c <_printf_i+0x184>
 800455e:	4615      	mov	r5, r2
 8004560:	e7bb      	b.n	80044da <_printf_i+0x132>
 8004562:	682b      	ldr	r3, [r5, #0]
 8004564:	6826      	ldr	r6, [r4, #0]
 8004566:	1d18      	adds	r0, r3, #4
 8004568:	6961      	ldr	r1, [r4, #20]
 800456a:	6028      	str	r0, [r5, #0]
 800456c:	0635      	lsls	r5, r6, #24
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	d501      	bpl.n	8004576 <_printf_i+0x1ce>
 8004572:	6019      	str	r1, [r3, #0]
 8004574:	e002      	b.n	800457c <_printf_i+0x1d4>
 8004576:	0670      	lsls	r0, r6, #25
 8004578:	d5fb      	bpl.n	8004572 <_printf_i+0x1ca>
 800457a:	8019      	strh	r1, [r3, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	4615      	mov	r5, r2
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	e7ba      	b.n	80044fa <_printf_i+0x152>
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	2100      	movs	r1, #0
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	602a      	str	r2, [r5, #0]
 800458c:	681d      	ldr	r5, [r3, #0]
 800458e:	6862      	ldr	r2, [r4, #4]
 8004590:	4628      	mov	r0, r5
 8004592:	f000 f82f 	bl	80045f4 <memchr>
 8004596:	b108      	cbz	r0, 800459c <_printf_i+0x1f4>
 8004598:	1b40      	subs	r0, r0, r5
 800459a:	6060      	str	r0, [r4, #4]
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	6123      	str	r3, [r4, #16]
 80045a0:	2300      	movs	r3, #0
 80045a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a6:	e7a8      	b.n	80044fa <_printf_i+0x152>
 80045a8:	462a      	mov	r2, r5
 80045aa:	4649      	mov	r1, r9
 80045ac:	4640      	mov	r0, r8
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	47d0      	blx	sl
 80045b2:	3001      	adds	r0, #1
 80045b4:	d0ab      	beq.n	800450e <_printf_i+0x166>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	079b      	lsls	r3, r3, #30
 80045ba:	d413      	bmi.n	80045e4 <_printf_i+0x23c>
 80045bc:	68e0      	ldr	r0, [r4, #12]
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	4298      	cmp	r0, r3
 80045c2:	bfb8      	it	lt
 80045c4:	4618      	movlt	r0, r3
 80045c6:	e7a4      	b.n	8004512 <_printf_i+0x16a>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4632      	mov	r2, r6
 80045cc:	4649      	mov	r1, r9
 80045ce:	4640      	mov	r0, r8
 80045d0:	47d0      	blx	sl
 80045d2:	3001      	adds	r0, #1
 80045d4:	d09b      	beq.n	800450e <_printf_i+0x166>
 80045d6:	3501      	adds	r5, #1
 80045d8:	68e3      	ldr	r3, [r4, #12]
 80045da:	9903      	ldr	r1, [sp, #12]
 80045dc:	1a5b      	subs	r3, r3, r1
 80045de:	42ab      	cmp	r3, r5
 80045e0:	dcf2      	bgt.n	80045c8 <_printf_i+0x220>
 80045e2:	e7eb      	b.n	80045bc <_printf_i+0x214>
 80045e4:	2500      	movs	r5, #0
 80045e6:	f104 0619 	add.w	r6, r4, #25
 80045ea:	e7f5      	b.n	80045d8 <_printf_i+0x230>
 80045ec:	0800491d 	.word	0x0800491d
 80045f0:	0800492e 	.word	0x0800492e

080045f4 <memchr>:
 80045f4:	4603      	mov	r3, r0
 80045f6:	b510      	push	{r4, lr}
 80045f8:	b2c9      	uxtb	r1, r1
 80045fa:	4402      	add	r2, r0
 80045fc:	4293      	cmp	r3, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	d101      	bne.n	8004606 <memchr+0x12>
 8004602:	2000      	movs	r0, #0
 8004604:	e003      	b.n	800460e <memchr+0x1a>
 8004606:	7804      	ldrb	r4, [r0, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	428c      	cmp	r4, r1
 800460c:	d1f6      	bne.n	80045fc <memchr+0x8>
 800460e:	bd10      	pop	{r4, pc}

08004610 <memcpy>:
 8004610:	440a      	add	r2, r1
 8004612:	4291      	cmp	r1, r2
 8004614:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004618:	d100      	bne.n	800461c <memcpy+0xc>
 800461a:	4770      	bx	lr
 800461c:	b510      	push	{r4, lr}
 800461e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004622:	4291      	cmp	r1, r2
 8004624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004628:	d1f9      	bne.n	800461e <memcpy+0xe>
 800462a:	bd10      	pop	{r4, pc}

0800462c <memmove>:
 800462c:	4288      	cmp	r0, r1
 800462e:	b510      	push	{r4, lr}
 8004630:	eb01 0402 	add.w	r4, r1, r2
 8004634:	d902      	bls.n	800463c <memmove+0x10>
 8004636:	4284      	cmp	r4, r0
 8004638:	4623      	mov	r3, r4
 800463a:	d807      	bhi.n	800464c <memmove+0x20>
 800463c:	1e43      	subs	r3, r0, #1
 800463e:	42a1      	cmp	r1, r4
 8004640:	d008      	beq.n	8004654 <memmove+0x28>
 8004642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800464a:	e7f8      	b.n	800463e <memmove+0x12>
 800464c:	4601      	mov	r1, r0
 800464e:	4402      	add	r2, r0
 8004650:	428a      	cmp	r2, r1
 8004652:	d100      	bne.n	8004656 <memmove+0x2a>
 8004654:	bd10      	pop	{r4, pc}
 8004656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800465a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800465e:	e7f7      	b.n	8004650 <memmove+0x24>

08004660 <_free_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4605      	mov	r5, r0
 8004664:	2900      	cmp	r1, #0
 8004666:	d040      	beq.n	80046ea <_free_r+0x8a>
 8004668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466c:	1f0c      	subs	r4, r1, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	bfb8      	it	lt
 8004672:	18e4      	addlt	r4, r4, r3
 8004674:	f000 f910 	bl	8004898 <__malloc_lock>
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <_free_r+0x8c>)
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	b933      	cbnz	r3, 800468c <_free_r+0x2c>
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	6014      	str	r4, [r2, #0]
 8004682:	4628      	mov	r0, r5
 8004684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004688:	f000 b90c 	b.w	80048a4 <__malloc_unlock>
 800468c:	42a3      	cmp	r3, r4
 800468e:	d908      	bls.n	80046a2 <_free_r+0x42>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	1821      	adds	r1, r4, r0
 8004694:	428b      	cmp	r3, r1
 8004696:	bf01      	itttt	eq
 8004698:	6819      	ldreq	r1, [r3, #0]
 800469a:	685b      	ldreq	r3, [r3, #4]
 800469c:	1809      	addeq	r1, r1, r0
 800469e:	6021      	streq	r1, [r4, #0]
 80046a0:	e7ed      	b.n	800467e <_free_r+0x1e>
 80046a2:	461a      	mov	r2, r3
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	b10b      	cbz	r3, 80046ac <_free_r+0x4c>
 80046a8:	42a3      	cmp	r3, r4
 80046aa:	d9fa      	bls.n	80046a2 <_free_r+0x42>
 80046ac:	6811      	ldr	r1, [r2, #0]
 80046ae:	1850      	adds	r0, r2, r1
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d10b      	bne.n	80046cc <_free_r+0x6c>
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	4401      	add	r1, r0
 80046b8:	1850      	adds	r0, r2, r1
 80046ba:	4283      	cmp	r3, r0
 80046bc:	6011      	str	r1, [r2, #0]
 80046be:	d1e0      	bne.n	8004682 <_free_r+0x22>
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4401      	add	r1, r0
 80046c6:	6011      	str	r1, [r2, #0]
 80046c8:	6053      	str	r3, [r2, #4]
 80046ca:	e7da      	b.n	8004682 <_free_r+0x22>
 80046cc:	d902      	bls.n	80046d4 <_free_r+0x74>
 80046ce:	230c      	movs	r3, #12
 80046d0:	602b      	str	r3, [r5, #0]
 80046d2:	e7d6      	b.n	8004682 <_free_r+0x22>
 80046d4:	6820      	ldr	r0, [r4, #0]
 80046d6:	1821      	adds	r1, r4, r0
 80046d8:	428b      	cmp	r3, r1
 80046da:	bf01      	itttt	eq
 80046dc:	6819      	ldreq	r1, [r3, #0]
 80046de:	685b      	ldreq	r3, [r3, #4]
 80046e0:	1809      	addeq	r1, r1, r0
 80046e2:	6021      	streq	r1, [r4, #0]
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	6054      	str	r4, [r2, #4]
 80046e8:	e7cb      	b.n	8004682 <_free_r+0x22>
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	20000178 	.word	0x20000178

080046f0 <sbrk_aligned>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4e0e      	ldr	r6, [pc, #56]	; (800472c <sbrk_aligned+0x3c>)
 80046f4:	460c      	mov	r4, r1
 80046f6:	6831      	ldr	r1, [r6, #0]
 80046f8:	4605      	mov	r5, r0
 80046fa:	b911      	cbnz	r1, 8004702 <sbrk_aligned+0x12>
 80046fc:	f000 f8bc 	bl	8004878 <_sbrk_r>
 8004700:	6030      	str	r0, [r6, #0]
 8004702:	4621      	mov	r1, r4
 8004704:	4628      	mov	r0, r5
 8004706:	f000 f8b7 	bl	8004878 <_sbrk_r>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d00a      	beq.n	8004724 <sbrk_aligned+0x34>
 800470e:	1cc4      	adds	r4, r0, #3
 8004710:	f024 0403 	bic.w	r4, r4, #3
 8004714:	42a0      	cmp	r0, r4
 8004716:	d007      	beq.n	8004728 <sbrk_aligned+0x38>
 8004718:	1a21      	subs	r1, r4, r0
 800471a:	4628      	mov	r0, r5
 800471c:	f000 f8ac 	bl	8004878 <_sbrk_r>
 8004720:	3001      	adds	r0, #1
 8004722:	d101      	bne.n	8004728 <sbrk_aligned+0x38>
 8004724:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004728:	4620      	mov	r0, r4
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	2000017c 	.word	0x2000017c

08004730 <_malloc_r>:
 8004730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004734:	1ccd      	adds	r5, r1, #3
 8004736:	f025 0503 	bic.w	r5, r5, #3
 800473a:	3508      	adds	r5, #8
 800473c:	2d0c      	cmp	r5, #12
 800473e:	bf38      	it	cc
 8004740:	250c      	movcc	r5, #12
 8004742:	2d00      	cmp	r5, #0
 8004744:	4607      	mov	r7, r0
 8004746:	db01      	blt.n	800474c <_malloc_r+0x1c>
 8004748:	42a9      	cmp	r1, r5
 800474a:	d905      	bls.n	8004758 <_malloc_r+0x28>
 800474c:	230c      	movs	r3, #12
 800474e:	2600      	movs	r6, #0
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4630      	mov	r0, r6
 8004754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004758:	4e2e      	ldr	r6, [pc, #184]	; (8004814 <_malloc_r+0xe4>)
 800475a:	f000 f89d 	bl	8004898 <__malloc_lock>
 800475e:	6833      	ldr	r3, [r6, #0]
 8004760:	461c      	mov	r4, r3
 8004762:	bb34      	cbnz	r4, 80047b2 <_malloc_r+0x82>
 8004764:	4629      	mov	r1, r5
 8004766:	4638      	mov	r0, r7
 8004768:	f7ff ffc2 	bl	80046f0 <sbrk_aligned>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	4604      	mov	r4, r0
 8004770:	d14d      	bne.n	800480e <_malloc_r+0xde>
 8004772:	6834      	ldr	r4, [r6, #0]
 8004774:	4626      	mov	r6, r4
 8004776:	2e00      	cmp	r6, #0
 8004778:	d140      	bne.n	80047fc <_malloc_r+0xcc>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	4631      	mov	r1, r6
 800477e:	4638      	mov	r0, r7
 8004780:	eb04 0803 	add.w	r8, r4, r3
 8004784:	f000 f878 	bl	8004878 <_sbrk_r>
 8004788:	4580      	cmp	r8, r0
 800478a:	d13a      	bne.n	8004802 <_malloc_r+0xd2>
 800478c:	6821      	ldr	r1, [r4, #0]
 800478e:	3503      	adds	r5, #3
 8004790:	1a6d      	subs	r5, r5, r1
 8004792:	f025 0503 	bic.w	r5, r5, #3
 8004796:	3508      	adds	r5, #8
 8004798:	2d0c      	cmp	r5, #12
 800479a:	bf38      	it	cc
 800479c:	250c      	movcc	r5, #12
 800479e:	4638      	mov	r0, r7
 80047a0:	4629      	mov	r1, r5
 80047a2:	f7ff ffa5 	bl	80046f0 <sbrk_aligned>
 80047a6:	3001      	adds	r0, #1
 80047a8:	d02b      	beq.n	8004802 <_malloc_r+0xd2>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	442b      	add	r3, r5
 80047ae:	6023      	str	r3, [r4, #0]
 80047b0:	e00e      	b.n	80047d0 <_malloc_r+0xa0>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	1b52      	subs	r2, r2, r5
 80047b6:	d41e      	bmi.n	80047f6 <_malloc_r+0xc6>
 80047b8:	2a0b      	cmp	r2, #11
 80047ba:	d916      	bls.n	80047ea <_malloc_r+0xba>
 80047bc:	1961      	adds	r1, r4, r5
 80047be:	42a3      	cmp	r3, r4
 80047c0:	6025      	str	r5, [r4, #0]
 80047c2:	bf18      	it	ne
 80047c4:	6059      	strne	r1, [r3, #4]
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	bf08      	it	eq
 80047ca:	6031      	streq	r1, [r6, #0]
 80047cc:	5162      	str	r2, [r4, r5]
 80047ce:	604b      	str	r3, [r1, #4]
 80047d0:	4638      	mov	r0, r7
 80047d2:	f104 060b 	add.w	r6, r4, #11
 80047d6:	f000 f865 	bl	80048a4 <__malloc_unlock>
 80047da:	f026 0607 	bic.w	r6, r6, #7
 80047de:	1d23      	adds	r3, r4, #4
 80047e0:	1af2      	subs	r2, r6, r3
 80047e2:	d0b6      	beq.n	8004752 <_malloc_r+0x22>
 80047e4:	1b9b      	subs	r3, r3, r6
 80047e6:	50a3      	str	r3, [r4, r2]
 80047e8:	e7b3      	b.n	8004752 <_malloc_r+0x22>
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	bf0c      	ite	eq
 80047f0:	6032      	streq	r2, [r6, #0]
 80047f2:	605a      	strne	r2, [r3, #4]
 80047f4:	e7ec      	b.n	80047d0 <_malloc_r+0xa0>
 80047f6:	4623      	mov	r3, r4
 80047f8:	6864      	ldr	r4, [r4, #4]
 80047fa:	e7b2      	b.n	8004762 <_malloc_r+0x32>
 80047fc:	4634      	mov	r4, r6
 80047fe:	6876      	ldr	r6, [r6, #4]
 8004800:	e7b9      	b.n	8004776 <_malloc_r+0x46>
 8004802:	230c      	movs	r3, #12
 8004804:	4638      	mov	r0, r7
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	f000 f84c 	bl	80048a4 <__malloc_unlock>
 800480c:	e7a1      	b.n	8004752 <_malloc_r+0x22>
 800480e:	6025      	str	r5, [r4, #0]
 8004810:	e7de      	b.n	80047d0 <_malloc_r+0xa0>
 8004812:	bf00      	nop
 8004814:	20000178 	.word	0x20000178

08004818 <_realloc_r>:
 8004818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800481c:	4680      	mov	r8, r0
 800481e:	4614      	mov	r4, r2
 8004820:	460e      	mov	r6, r1
 8004822:	b921      	cbnz	r1, 800482e <_realloc_r+0x16>
 8004824:	4611      	mov	r1, r2
 8004826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800482a:	f7ff bf81 	b.w	8004730 <_malloc_r>
 800482e:	b92a      	cbnz	r2, 800483c <_realloc_r+0x24>
 8004830:	f7ff ff16 	bl	8004660 <_free_r>
 8004834:	4625      	mov	r5, r4
 8004836:	4628      	mov	r0, r5
 8004838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800483c:	f000 f838 	bl	80048b0 <_malloc_usable_size_r>
 8004840:	4284      	cmp	r4, r0
 8004842:	4607      	mov	r7, r0
 8004844:	d802      	bhi.n	800484c <_realloc_r+0x34>
 8004846:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800484a:	d812      	bhi.n	8004872 <_realloc_r+0x5a>
 800484c:	4621      	mov	r1, r4
 800484e:	4640      	mov	r0, r8
 8004850:	f7ff ff6e 	bl	8004730 <_malloc_r>
 8004854:	4605      	mov	r5, r0
 8004856:	2800      	cmp	r0, #0
 8004858:	d0ed      	beq.n	8004836 <_realloc_r+0x1e>
 800485a:	42bc      	cmp	r4, r7
 800485c:	4622      	mov	r2, r4
 800485e:	4631      	mov	r1, r6
 8004860:	bf28      	it	cs
 8004862:	463a      	movcs	r2, r7
 8004864:	f7ff fed4 	bl	8004610 <memcpy>
 8004868:	4631      	mov	r1, r6
 800486a:	4640      	mov	r0, r8
 800486c:	f7ff fef8 	bl	8004660 <_free_r>
 8004870:	e7e1      	b.n	8004836 <_realloc_r+0x1e>
 8004872:	4635      	mov	r5, r6
 8004874:	e7df      	b.n	8004836 <_realloc_r+0x1e>
	...

08004878 <_sbrk_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	2300      	movs	r3, #0
 800487c:	4d05      	ldr	r5, [pc, #20]	; (8004894 <_sbrk_r+0x1c>)
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	f7fb fe2e 	bl	80004e4 <_sbrk>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_sbrk_r+0x1a>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_sbrk_r+0x1a>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	20000180 	.word	0x20000180

08004898 <__malloc_lock>:
 8004898:	4801      	ldr	r0, [pc, #4]	; (80048a0 <__malloc_lock+0x8>)
 800489a:	f000 b811 	b.w	80048c0 <__retarget_lock_acquire_recursive>
 800489e:	bf00      	nop
 80048a0:	20000184 	.word	0x20000184

080048a4 <__malloc_unlock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	; (80048ac <__malloc_unlock+0x8>)
 80048a6:	f000 b80c 	b.w	80048c2 <__retarget_lock_release_recursive>
 80048aa:	bf00      	nop
 80048ac:	20000184 	.word	0x20000184

080048b0 <_malloc_usable_size_r>:
 80048b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048b4:	1f18      	subs	r0, r3, #4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bfbc      	itt	lt
 80048ba:	580b      	ldrlt	r3, [r1, r0]
 80048bc:	18c0      	addlt	r0, r0, r3
 80048be:	4770      	bx	lr

080048c0 <__retarget_lock_acquire_recursive>:
 80048c0:	4770      	bx	lr

080048c2 <__retarget_lock_release_recursive>:
 80048c2:	4770      	bx	lr

080048c4 <_init>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr

080048d0 <_fini>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr
